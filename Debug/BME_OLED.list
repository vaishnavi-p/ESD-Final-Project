
BME_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d0c  08009f00  08009f00  00019f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac0c  0800ac0c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac0c  0800ac0c  0001ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac14  0800ac14  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac14  0800ac14  0001ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac18  0800ac18  0001ac18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ac1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200001e8  0800ae04  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800ae04  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0f9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  0002a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dbe  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca4  00000000  00000000  00043e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088eb4  00000000  00000000  0004fb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d89ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  000d8a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ee8 	.word	0x08009ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009ee8 	.word	0x08009ee8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 fa75 	bl	80025a0 <null_ptr_check>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d120      	bne.n	8001104 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f8ee 	bl	80012a4 <bme680_soft_reset>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d117      	bne.n	8001104 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	20d0      	movs	r0, #208	; 0xd0
 80010dc:	f000 f818 	bl	8001110 <bme680_get_regs>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10b      	bne.n	8001104 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b61      	cmp	r3, #97	; 0x61
 80010f2:	d105      	bne.n	8001100 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fbcf 	bl	8001898 <get_calib_data>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e001      	b.n	8001104 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8001100:	23fd      	movs	r3, #253	; 0xfd
 8001102:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	4613      	mov	r3, r2
 8001120:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 fa3c 	bl	80025a0 <null_ptr_check>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 800112c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d126      	bne.n	8001182 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	789b      	ldrb	r3, [r3, #2]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10e      	bne.n	800115a <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f95e 	bl	8002402 <set_mem_page>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800114a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001158:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7858      	ldrb	r0, [r3, #1]
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	7bf9      	ldrb	r1, [r7, #15]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	47a0      	blx	r4
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 800117e:	23fe      	movs	r3, #254	; 0xfe
 8001180:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 800118e:	b5b0      	push	{r4, r5, r7, lr}
 8001190:	b090      	sub	sp, #64	; 0x40
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fa3c 	bl	8005628 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f001 f9f5 	bl	80025a0 <null_ptr_check>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 80011bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d169      	bne.n	8001298 <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d061      	beq.n	800128e <bme680_set_regs+0x100>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b13      	cmp	r3, #19
 80011ce:	d85e      	bhi.n	800128e <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80011d4:	e034      	b.n	8001240 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80011de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f90a 	bl	8002402 <set_mem_page>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80011f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	3340      	adds	r3, #64	; 0x40
 8001208:	443b      	add	r3, r7
 800120a:	f803 2c2c 	strb.w	r2, [r3, #-44]
 800120e:	e009      	b.n	8001224 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001210:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	441a      	add	r2, r3
 8001216:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	3340      	adds	r3, #64	; 0x40
 800121e:	443b      	add	r3, r7
 8001220:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001224:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	441a      	add	r2, r3
 800122a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	3301      	adds	r3, #1
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	3340      	adds	r3, #64	; 0x40
 8001234:	443b      	add	r3, r7
 8001236:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800123a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800123c:	3301      	adds	r3, #1
 800123e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	b29b      	uxth	r3, r3
 8001244:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001246:	429a      	cmp	r2, r3
 8001248:	d3c5      	bcc.n	80011d6 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 800124a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800124e:	2b00      	cmp	r3, #0
 8001250:	d121      	bne.n	8001296 <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	7858      	ldrb	r0, [r3, #1]
 800125a:	7d39      	ldrb	r1, [r7, #20]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	b29b      	uxth	r3, r3
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b29d      	uxth	r5, r3
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	462b      	mov	r3, r5
 8001270:	47a0      	blx	r4
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 8001286:	23fe      	movs	r3, #254	; 0xfe
 8001288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 800128c:	e003      	b.n	8001296 <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 800128e:	23fc      	movs	r3, #252	; 0xfc
 8001290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001294:	e000      	b.n	8001298 <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 8001296:	bf00      	nop
		}
	}

	return rslt;
 8001298:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800129c:	4618      	mov	r0, r3
 800129e:	3740      	adds	r7, #64	; 0x40
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}

080012a4 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80012ac:	23e0      	movs	r3, #224	; 0xe0
 80012ae:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80012b0:	23b6      	movs	r3, #182	; 0xb6
 80012b2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f973 	bl	80025a0 <null_ptr_check>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d127      	bne.n	8001316 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	789b      	ldrb	r3, [r3, #2]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f001 f8fc 	bl	80024cc <get_mem_page>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d11a      	bne.n	8001316 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012e0:	f107 010d 	add.w	r1, r7, #13
 80012e4:	f107 000e 	add.w	r0, r7, #14
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f7ff ff4f 	bl	800118e <bme680_set_regs>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f8:	200a      	movs	r0, #10
 80012fa:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d108      	bne.n	8001316 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f001 f8dd 	bl	80024cc <get_mem_page>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b088      	sub	sp, #32
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	6039      	str	r1, [r7, #0]
 800132c:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	2300      	movs	r3, #0
 800133c:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	2300      	movs	r3, #0
 8001344:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800134c:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f001 f926 	bl	80025a0 <null_ptr_check>
 8001354:	4603      	mov	r3, r0
 8001356:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8001358:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 81a2 	bne.w	80016a6 <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f000 fbbf 	bl	8001af0 <set_gas_config>
 8001372:	4603      	mov	r3, r0
 8001374:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 800137e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d104      	bne.n	8001390 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f000 f993 	bl	80016b2 <bme680_set_sensor_mode>
 800138c:	4603      	mov	r3, r0
 800138e:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03d      	beq.n	8001416 <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2207      	movs	r2, #7
 80013a4:	2100      	movs	r1, #0
 80013a6:	f001 f8c0 	bl	800252a <boundary_check>
 80013aa:	4603      	mov	r3, r0
 80013ac:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80013ae:	2375      	movs	r3, #117	; 0x75
 80013b0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80013b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d108      	bne.n	80013cc <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80013ba:	f107 011b 	add.w	r1, r7, #27
 80013be:	7f38      	ldrb	r0, [r7, #28]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f7ff fea4 	bl	8001110 <bme680_get_regs>
 80013c8:	4603      	mov	r3, r0
 80013ca:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f023 031c 	bic.w	r3, r3, #28
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f003 031c 	and.w	r3, r3, #28
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80013f8:	7fbb      	ldrb	r3, [r7, #30]
 80013fa:	3320      	adds	r3, #32
 80013fc:	443b      	add	r3, r7
 80013fe:	7f3a      	ldrb	r2, [r7, #28]
 8001400:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001404:	7fbb      	ldrb	r3, [r7, #30]
 8001406:	7efa      	ldrb	r2, [r7, #27]
 8001408:	3320      	adds	r3, #32
 800140a:	443b      	add	r3, r7
 800140c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	3301      	adds	r3, #1
 8001414:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b00      	cmp	r3, #0
 800141e:	d037      	beq.n	8001490 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2208      	movs	r2, #8
 800142a:	2100      	movs	r1, #0
 800142c:	f001 f87d 	bl	800252a <boundary_check>
 8001430:	4603      	mov	r3, r0
 8001432:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001434:	2370      	movs	r3, #112	; 0x70
 8001436:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001438:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001440:	f107 011b 	add.w	r1, r7, #27
 8001444:	7f38      	ldrb	r0, [r7, #28]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	f7ff fe61 	bl	8001110 <bme680_get_regs>
 800144e:	4603      	mov	r3, r0
 8001450:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001452:	7efb      	ldrb	r3, [r7, #27]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 0308 	bic.w	r3, r3, #8
 800145a:	b25a      	sxtb	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001462:	b25b      	sxtb	r3, r3
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b25b      	sxtb	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001472:	7fbb      	ldrb	r3, [r7, #30]
 8001474:	3320      	adds	r3, #32
 8001476:	443b      	add	r3, r7
 8001478:	7f3a      	ldrb	r2, [r7, #28]
 800147a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800147e:	7fbb      	ldrb	r3, [r7, #30]
 8001480:	7efa      	ldrb	r2, [r7, #27]
 8001482:	3320      	adds	r3, #32
 8001484:	443b      	add	r3, r7
 8001486:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800148a:	7fbb      	ldrb	r3, [r7, #30]
 800148c:	3301      	adds	r3, #1
 800148e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d050      	beq.n	800153c <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2205      	movs	r2, #5
 80014a4:	2100      	movs	r1, #0
 80014a6:	f001 f840 	bl	800252a <boundary_check>
 80014aa:	4603      	mov	r3, r0
 80014ac:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80014ae:	2374      	movs	r3, #116	; 0x74
 80014b0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80014b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014ba:	f107 011b 	add.w	r1, r7, #27
 80014be:	7f38      	ldrb	r0, [r7, #28]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff fe24 	bl	8001110 <bme680_get_regs>
 80014c8:	4603      	mov	r3, r0
 80014ca:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00d      	beq.n	80014f2 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80014d6:	7efb      	ldrb	r3, [r7, #27]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d010      	beq.n	800151e <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80014fc:	7efb      	ldrb	r3, [r7, #27]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	f023 031c 	bic.w	r3, r3, #28
 8001504:	b25a      	sxtb	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	f003 031c 	and.w	r3, r3, #28
 8001514:	b25b      	sxtb	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b25b      	sxtb	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 800151e:	7fbb      	ldrb	r3, [r7, #30]
 8001520:	3320      	adds	r3, #32
 8001522:	443b      	add	r3, r7
 8001524:	7f3a      	ldrb	r2, [r7, #28]
 8001526:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800152a:	7fbb      	ldrb	r3, [r7, #30]
 800152c:	7efa      	ldrb	r2, [r7, #27]
 800152e:	3320      	adds	r3, #32
 8001530:	443b      	add	r3, r7
 8001532:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001536:	7fbb      	ldrb	r3, [r7, #30]
 8001538:	3301      	adds	r3, #1
 800153a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d037      	beq.n	80015b6 <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2205      	movs	r2, #5
 8001550:	2100      	movs	r1, #0
 8001552:	f000 ffea 	bl	800252a <boundary_check>
 8001556:	4603      	mov	r3, r0
 8001558:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 800155a:	2372      	movs	r3, #114	; 0x72
 800155c:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800155e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d108      	bne.n	8001578 <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001566:	f107 011b 	add.w	r1, r7, #27
 800156a:	7f38      	ldrb	r0, [r7, #28]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	f7ff fdce 	bl	8001110 <bme680_get_regs>
 8001574:	4603      	mov	r3, r0
 8001576:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8001578:	7efb      	ldrb	r3, [r7, #27]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f023 0307 	bic.w	r3, r3, #7
 8001580:	b25a      	sxtb	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001588:	b25b      	sxtb	r3, r3
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001598:	7fbb      	ldrb	r3, [r7, #30]
 800159a:	3320      	adds	r3, #32
 800159c:	443b      	add	r3, r7
 800159e:	7f3a      	ldrb	r2, [r7, #28]
 80015a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7efa      	ldrb	r2, [r7, #27]
 80015a8:	3320      	adds	r3, #32
 80015aa:	443b      	add	r3, r7
 80015ac:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	3301      	adds	r3, #1
 80015b4:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d060      	beq.n	8001682 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	2100      	movs	r1, #0
 80015cc:	f000 ffad 	bl	800252a <boundary_check>
 80015d0:	4603      	mov	r3, r0
 80015d2:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80015d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	220a      	movs	r2, #10
 80015e6:	2100      	movs	r1, #0
 80015e8:	f000 ff9f 	bl	800252a <boundary_check>
 80015ec:	4603      	mov	r3, r0
 80015ee:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 80015f0:	2371      	movs	r3, #113	; 0x71
 80015f2:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80015f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80015fc:	f107 011b 	add.w	r1, r7, #27
 8001600:	7f38      	ldrb	r0, [r7, #28]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	f7ff fd83 	bl	8001110 <bme680_get_regs>
 800160a:	4603      	mov	r3, r0
 800160c:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d010      	beq.n	800163a <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8001618:	7efb      	ldrb	r3, [r7, #27]
 800161a:	b25b      	sxtb	r3, r3
 800161c:	f023 0310 	bic.w	r3, r3, #16
 8001620:	b25a      	sxtb	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	b25b      	sxtb	r3, r3
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00f      	beq.n	8001664 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001644:	7efb      	ldrb	r3, [r7, #27]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f023 030f 	bic.w	r3, r3, #15
 800164c:	b25a      	sxtb	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001664:	7fbb      	ldrb	r3, [r7, #30]
 8001666:	3320      	adds	r3, #32
 8001668:	443b      	add	r3, r7
 800166a:	7f3a      	ldrb	r2, [r7, #28]
 800166c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001670:	7fbb      	ldrb	r3, [r7, #30]
 8001672:	7efa      	ldrb	r2, [r7, #27]
 8001674:	3320      	adds	r3, #32
 8001676:	443b      	add	r3, r7
 8001678:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800167c:	7fbb      	ldrb	r3, [r7, #30]
 800167e:	3301      	adds	r3, #1
 8001680:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800168a:	7fba      	ldrb	r2, [r7, #30]
 800168c:	f107 010c 	add.w	r1, r7, #12
 8001690:	f107 0014 	add.w	r0, r7, #20
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f7ff fd7a 	bl	800118e <bme680_set_regs>
 800169a:	4603      	mov	r3, r0
 800169c:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7f7a      	ldrb	r2, [r7, #29]
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 80016a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80016be:	2374      	movs	r3, #116	; 0x74
 80016c0:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 ff6c 	bl	80025a0 <null_ptr_check>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d14c      	bne.n	800176e <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80016d4:	f107 010d 	add.w	r1, r7, #13
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	2074      	movs	r0, #116	; 0x74
 80016de:	f7ff fd17 	bl	8001110 <bme680_get_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d012      	beq.n	8001722 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80016fc:	7b7b      	ldrb	r3, [r7, #13]
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001706:	f107 010d 	add.w	r1, r7, #13
 800170a:	f107 000c 	add.w	r0, r7, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f7ff fd3c 	bl	800118e <bme680_set_regs>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	200a      	movs	r0, #10
 8001720:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1d5      	bne.n	80016d4 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01d      	beq.n	800176e <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	b25a      	sxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	b25b      	sxtb	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800175a:	f107 010d 	add.w	r1, r7, #13
 800175e:	f107 000c 	add.w	r0, r7, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f7ff fd12 	bl	800118e <bme680_set_regs>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001786:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <bme680_get_profile_dur+0xbc>)
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001790:	6018      	str	r0, [r3, #0]
 8001792:	3304      	adds	r3, #4
 8001794:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800179c:	3318      	adds	r3, #24
 800179e:	443b      	add	r3, r7
 80017a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017a4:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80017ac:	3318      	adds	r3, #24
 80017ae:	443b      	add	r3, r7
 80017b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017b4:	461a      	mov	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c2:	3318      	adds	r3, #24
 80017c4:	443b      	add	r3, r7
 80017c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80017e4:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f603 1351 	addw	r3, r3, #2385	; 0x951
 80017ec:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80017f4:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4a10      	ldr	r2, [pc, #64]	; (800183c <bme680_get_profile_dur+0xc0>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	881a      	ldrh	r2, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001824:	4413      	add	r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	801a      	strh	r2, [r3, #0]
	}
}
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	08009f00 	.word	0x08009f00
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f000 fea8 	bl	80025a0 <null_ptr_check>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d117      	bne.n	800188c <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fd05 	bl	800226e <read_field_data>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10d      	bne.n	800188c <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b25b      	sxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	da04      	bge.n	8001884 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001882:	e003      	b.n	800188c <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 800188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2225      	movs	r2, #37	; 0x25
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 febb 	bl	8005628 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80018b2:	2300      	movs	r3, #0
 80018b4:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fe72 	bl	80025a0 <null_ptr_check>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 80018c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 810c 	bne.w	8001ae4 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80018cc:	f107 010c 	add.w	r1, r7, #12
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2219      	movs	r2, #25
 80018d4:	2089      	movs	r0, #137	; 0x89
 80018d6:	f7ff fc1b 	bl	8001110 <bme680_get_regs>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80018e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	f103 0119 	add.w	r1, r3, #25
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2210      	movs	r2, #16
 80018f4:	20e1      	movs	r0, #225	; 0xe1
 80018f6:	f7ff fc0b 	bl	8001110 <bme680_get_regs>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8001900:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b21a      	sxth	r2, r3
 8001908:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	7b7b      	ldrb	r3, [r7, #13]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21a      	sxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	b25a      	sxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001932:	7cbb      	ldrb	r3, [r7, #18]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	7c7b      	ldrb	r3, [r7, #17]
 800193a:	b21b      	sxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b21b      	sxth	r3, r3
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8001946:	7d3b      	ldrb	r3, [r7, #20]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21a      	sxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001958:	7d7b      	ldrb	r3, [r7, #21]
 800195a:	b25a      	sxtb	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001962:	7e3b      	ldrb	r3, [r7, #24]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21a      	sxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001974:	7ebb      	ldrb	r3, [r7, #26]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	7e7b      	ldrb	r3, [r7, #25]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001986:	7f3b      	ldrb	r3, [r7, #28]
 8001988:	b25a      	sxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001990:	7efb      	ldrb	r3, [r7, #27]
 8001992:	b25a      	sxtb	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800199a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80019ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21a      	sxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80019c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d2:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019da:	b21b      	sxth	r3, r3
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80019ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019f0:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8001a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a0c:	b25a      	sxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8001a12:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a16:	b25a      	sxtb	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8001a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001a26:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8001a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001a38:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a3c:	b25a      	sxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8001a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001a58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001a62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d135      	bne.n	8001ad6 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8001a6a:	f107 010b 	add.w	r1, r7, #11
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fb4c 	bl	8001110 <bme680_get_regs>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da00      	bge.n	8001a8a <get_calib_data+0x1f2>
 8001a88:	330f      	adds	r3, #15
 8001a8a:	111b      	asrs	r3, r3, #4
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8001a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11c      	bne.n	8001ad6 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8001a9c:	f107 010b 	add.w	r1, r7, #11
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fb33 	bl	8001110 <bme680_get_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 8001aba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8001ac2:	f107 010b 	add.w	r1, r7, #11
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2004      	movs	r0, #4
 8001acc:	f7ff fb20 	bl	8001110 <bme680_get_regs>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	111b      	asrs	r3, r3, #4
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001ae4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3738      	adds	r7, #56	; 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fd51 	bl	80025a0 <null_ptr_check>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d132      	bne.n	8001b70 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001b0e:	2300      	movs	r3, #0
 8001b10:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d119      	bne.n	8001b50 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001b1c:	235a      	movs	r3, #90	; 0x5a
 8001b1e:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 faff 	bl	800212c <calc_heater_res>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fb71 	bl	8002224 <calc_heater_dur>
 8001b42:	4603      	mov	r3, r0
 8001b44:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b4e:	e001      	b.n	8001b54 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001b5c:	f107 0108 	add.w	r1, r7, #8
 8001b60:	f107 000c 	add.w	r0, r7, #12
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f7ff fb11 	bl	800118e <bme680_set_regs>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001b7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b80:	b091      	sub	sp, #68	; 0x44
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	61f8      	str	r0, [r7, #28]
 8001b86:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	10da      	asrs	r2, r3, #3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	8adb      	ldrh	r3, [r3, #22]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	17da      	asrs	r2, r3, #31
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	17da      	asrs	r2, r3, #31
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	617a      	str	r2, [r7, #20]
 8001bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	fb02 f203 	mul.w	r2, r2, r3
 8001bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bbe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	fba2 4501 	umull	r4, r5, r2, r1
 8001bd2:	442b      	add	r3, r5
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	0ae2      	lsrs	r2, r4, #11
 8001be0:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001be4:	12eb      	asrs	r3, r5, #11
 8001be6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001bea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0850      	lsrs	r0, r2, #1
 8001bf8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001bfc:	1059      	asrs	r1, r3, #1
 8001bfe:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	0862      	lsrs	r2, r4, #1
 8001c0c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001c10:	106b      	asrs	r3, r5, #1
 8001c12:	fb02 f501 	mul.w	r5, r2, r1
 8001c16:	fb00 f403 	mul.w	r4, r0, r3
 8001c1a:	442c      	add	r4, r5
 8001c1c:	fba0 ab02 	umull	sl, fp, r0, r2
 8001c20:	eb04 030b 	add.w	r3, r4, fp
 8001c24:	469b      	mov	fp, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001c32:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8001c36:	ea4f 332b 	mov.w	r3, fp, asr #12
 8001c3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	17da      	asrs	r2, r3, #31
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	60fa      	str	r2, [r7, #12]
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c52:	462a      	mov	r2, r5
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c64:	4621      	mov	r1, r4
 8001c66:	fba2 8901 	umull	r8, r9, r2, r1
 8001c6a:	444b      	add	r3, r9
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8001c7a:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8001c7e:	ea4f 33a9 	mov.w	r3, r9, asr #14
 8001c82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3380      	adds	r3, #128	; 0x80
 8001c9e:	121b      	asrs	r3, r3, #8
 8001ca0:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 8001ca2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3744      	adds	r7, #68	; 0x44
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001cb0:	4770      	bx	lr

08001cb2 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	105b      	asrs	r3, r3, #1
 8001cc2:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001cc6:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	109b      	asrs	r3, r3, #2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	1092      	asrs	r2, r2, #2
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	109b      	asrs	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001cea:	461a      	mov	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	109a      	asrs	r2, r3, #2
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	109b      	asrs	r3, r3, #2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	1092      	asrs	r2, r2, #2
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001d1e:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001d24:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001d36:	4413      	add	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	149b      	asrs	r3, r3, #18
 8001d3e:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	8b92      	ldrh	r2, [r2, #28]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	13db      	asrs	r3, r3, #15
 8001d50:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d58:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	131b      	asrs	r3, r3, #12
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	f640 4335 	movw	r3, #3125	; 0xc35
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	db06      	blt.n	8001d84 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e005      	b.n	8001d90 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005a      	lsls	r2, r3, #1
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d96:	4619      	mov	r1, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001da4:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	131b      	asrs	r3, r3, #12
 8001dac:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	135b      	asrs	r3, r3, #13
 8001dbe:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	121b      	asrs	r3, r3, #8
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	1212      	asrs	r2, r2, #8
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001dde:	145b      	asrs	r3, r3, #17
 8001de0:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	441a      	add	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001df2:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001df4:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001df6:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001dfe:	697b      	ldr	r3, [r7, #20]

}
 8001e00:	4618      	mov	r0, r3
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3380      	adds	r3, #128	; 0x80
 8001e24:	121b      	asrs	r3, r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001e28:	88fa      	ldrh	r2, [r7, #6]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	891b      	ldrh	r3, [r3, #8]
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	493d      	ldr	r1, [pc, #244]	; (8001f38 <calc_humidity+0x12c>)
 8001e42:	fb81 0103 	smull	r0, r1, r1, r3
 8001e46:	1149      	asrs	r1, r1, #5
 8001e48:	17db      	asrs	r3, r3, #31
 8001e4a:	1acb      	subs	r3, r1, r3
 8001e4c:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	895b      	ldrh	r3, [r3, #10]
 8001e56:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <calc_humidity+0x12c>)
 8001e68:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6c:	1152      	asrs	r2, r2, #5
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	492d      	ldr	r1, [pc, #180]	; (8001f38 <calc_humidity+0x12c>)
 8001e82:	fb81 c103 	smull	ip, r1, r1, r3
 8001e86:	1149      	asrs	r1, r1, #5
 8001e88:	17db      	asrs	r3, r3, #31
 8001e8a:	1acb      	subs	r3, r1, r3
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001e94:	4928      	ldr	r1, [pc, #160]	; (8001f38 <calc_humidity+0x12c>)
 8001e96:	fb81 c103 	smull	ip, r1, r1, r3
 8001e9a:	1149      	asrs	r1, r1, #5
 8001e9c:	17db      	asrs	r3, r3, #31
 8001e9e:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001ea0:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001ea2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001ea6:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 8001eaa:	129b      	asrs	r3, r3, #10
 8001eac:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7bdb      	ldrb	r3, [r3, #15]
 8001ebc:	01db      	lsls	r3, r3, #7
 8001ebe:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <calc_humidity+0x12c>)
 8001ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed4:	1152      	asrs	r2, r2, #5
 8001ed6:	17db      	asrs	r3, r3, #31
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	111b      	asrs	r3, r3, #4
 8001ee0:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	139b      	asrs	r3, r3, #14
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	1392      	asrs	r2, r2, #14
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	129b      	asrs	r3, r3, #10
 8001ef0:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	105b      	asrs	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	129b      	asrs	r3, r3, #10
 8001f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	131b      	asrs	r3, r3, #12
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <calc_humidity+0x130>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	dd02      	ble.n	8001f20 <calc_humidity+0x114>
		calc_hum = 100000;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <calc_humidity+0x130>)
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	e004      	b.n	8001f2a <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da01      	bge.n	8001f2a <calc_humidity+0x11e>
		calc_hum = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	372c      	adds	r7, #44	; 0x2c
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	51eb851f 	.word	0x51eb851f
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b0bc      	sub	sp, #240	; 0xf0
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8001f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f50:	460b      	mov	r3, r1
 8001f52:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <calc_gas_resistance+0x1e4>)
 8001f58:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001f72:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <calc_gas_resistance+0x1e8>)
 8001f74:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8001f78:	461c      	mov	r4, r3
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	17da      	asrs	r2, r3, #31
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f9c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	0099      	lsls	r1, r3, #2
 8001fae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001fb2:	0090      	lsls	r0, r2, #2
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4621      	mov	r1, r4
 8001fba:	1851      	adds	r1, r2, r1
 8001fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb43 0101 	adc.w	r1, r3, r1
 8001fc4:	6379      	str	r1, [r7, #52]	; 0x34
 8001fc6:	f240 533c 	movw	r3, #1340	; 0x53c
 8001fca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fce:	4602      	mov	r2, r0
 8001fd0:	18d3      	adds	r3, r2, r3
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	f143 0300 	adc.w	r3, r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001fdc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	33a8      	adds	r3, #168	; 0xa8
 8001fe4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fe8:	4413      	add	r3, r2
 8001fea:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff2:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001ff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001ffe:	4622      	mov	r2, r4
 8002000:	fb02 f203 	mul.w	r2, r2, r3
 8002004:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8002008:	462b      	mov	r3, r5
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	4621      	mov	r1, r4
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	4622      	mov	r2, r4
 8002018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800201a:	fba2 8901 	umull	r8, r9, r2, r1
 800201e:	444b      	add	r3, r9
 8002020:	4699      	mov	r9, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800202e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002032:	ea4f 4329 	mov.w	r3, r9, asr #16
 8002036:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800203a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800203e:	2200      	movs	r2, #0
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	627a      	str	r2, [r7, #36]	; 0x24
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002050:	4629      	mov	r1, r5
 8002052:	03cb      	lsls	r3, r1, #15
 8002054:	4621      	mov	r1, r4
 8002056:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800205a:	4621      	mov	r1, r4
 800205c:	03ca      	lsls	r2, r1, #15
 800205e:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 8002062:	61b9      	str	r1, [r7, #24]
 8002064:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800206e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002072:	4621      	mov	r1, r4
 8002074:	1889      	adds	r1, r1, r2
 8002076:	6139      	str	r1, [r7, #16]
 8002078:	4629      	mov	r1, r5
 800207a:	eb43 0101 	adc.w	r1, r3, r1
 800207e:	6179      	str	r1, [r7, #20]
 8002080:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002084:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8002088:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	33a8      	adds	r3, #168	; 0xa8
 8002090:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002094:	4413      	add	r3, r2
 8002096:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800209a:	2200      	movs	r2, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	60fa      	str	r2, [r7, #12]
 80020a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80020a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020a8:	462a      	mov	r2, r5
 80020aa:	fb02 f203 	mul.w	r2, r2, r3
 80020ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020b2:	4621      	mov	r1, r4
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80020be:	4621      	mov	r1, r4
 80020c0:	fba2 ab01 	umull	sl, fp, r2, r1
 80020c4:	445b      	add	r3, fp
 80020c6:	469b      	mov	fp, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	ea4f 225a 	mov.w	r2, sl, lsr #9
 80020d4:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 80020d8:	ea4f 236b 	mov.w	r3, fp, asr #9
 80020dc:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80020e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	0842      	lsrs	r2, r0, #1
 80020ee:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80020f2:	104b      	asrs	r3, r1, #1
 80020f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80020f8:	1814      	adds	r4, r2, r0
 80020fa:	603c      	str	r4, [r7, #0]
 80020fc:	414b      	adcs	r3, r1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002108:	f7fe fdc6 	bl	8000c98 <__aeabi_ldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 8002116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 800211a:	4618      	mov	r0, r3
 800211c:	37f0      	adds	r7, #240	; 0xf0
 800211e:	46bd      	mov	sp, r7
 8002120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002124:	08009f08 	.word	0x08009f08
 8002128:	08009f48 	.word	0x08009f48

0800212c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800212c:	b480      	push	{r7}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800213e:	d902      	bls.n	8002146 <calc_heater_res+0x1a>
		temp = 400;
 8002140:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002144:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800214c:	461a      	mov	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <calc_heater_res+0xec>)
 800215a:	fb82 1203 	smull	r1, r2, r2, r3
 800215e:	1192      	asrs	r2, r2, #6
 8002160:	17db      	asrs	r3, r3, #31
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800216e:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002178:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 800217c:	f203 1399 	addw	r3, r3, #409	; 0x199
 8002180:	88f9      	ldrh	r1, [r7, #6]
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4925      	ldr	r1, [pc, #148]	; (800221c <calc_heater_res+0xf0>)
 8002188:	fb81 0103 	smull	r0, r1, r1, r3
 800218c:	10c9      	asrs	r1, r1, #3
 800218e:	17db      	asrs	r3, r3, #31
 8002190:	1acb      	subs	r3, r1, r3
 8002192:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8002196:	4921      	ldr	r1, [pc, #132]	; (800221c <calc_heater_res+0xf0>)
 8002198:	fb81 0103 	smull	r0, r1, r1, r3
 800219c:	1089      	asrs	r1, r1, #2
 800219e:	17db      	asrs	r3, r3, #31
 80021a0:	1acb      	subs	r3, r1, r3
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	0fda      	lsrs	r2, r3, #31
 80021ac:	4413      	add	r3, r2
 80021ae:	105b      	asrs	r3, r3, #1
 80021b0:	461a      	mov	r2, r3
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021be:	3304      	adds	r3, #4
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80021c6:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 80021ce:	461a      	mov	r2, r3
 80021d0:	4613      	mov	r3, r2
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	4413      	add	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80021de:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021e8:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	3332      	adds	r3, #50	; 0x32
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <calc_heater_res+0xf4>)
 80021fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002200:	1152      	asrs	r2, r2, #5
 8002202:	17db      	asrs	r3, r3, #31
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	372c      	adds	r7, #44	; 0x2c
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	10624dd3 	.word	0x10624dd3
 800221c:	66666667 	.word	0x66666667
 8002220:	51eb851f 	.word	0x51eb851f

08002224 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8002238:	d308      	bcc.n	800224c <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800223a:	23ff      	movs	r3, #255	; 0xff
 800223c:	73bb      	strb	r3, [r7, #14]
 800223e:	e00f      	b.n	8002260 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2b3f      	cmp	r3, #63	; 0x3f
 8002250:	d8f6      	bhi.n	8002240 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4413      	add	r3, r2
 800225e:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002260:	7bbb      	ldrb	r3, [r7, #14]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b08a      	sub	sp, #40	; 0x28
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 800228a:	230a      	movs	r3, #10
 800228c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f000 f985 	bl	80025a0 <null_ptr_check>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 800229c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 8097 	bne.w	80023d4 <read_field_data+0x166>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80022a6:	f107 0108 	add.w	r1, r7, #8
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	220f      	movs	r2, #15
 80022ae:	201d      	movs	r0, #29
 80022b0:	f7fe ff2e 	bl	8001110 <bme680_get_regs>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80022ba:	7a3b      	ldrb	r3, [r7, #8]
 80022bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80022c6:	7a3b      	ldrb	r3, [r7, #8]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80022d2:	7a7a      	ldrb	r2, [r7, #9]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80022d8:	7abb      	ldrb	r3, [r7, #10]
 80022da:	031a      	lsls	r2, r3, #12
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 80022e2:	7b3a      	ldrb	r2, [r7, #12]
 80022e4:	0912      	lsrs	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80022ec:	7b7b      	ldrb	r3, [r7, #13]
 80022ee:	031a      	lsls	r2, r3, #12
 80022f0:	7bbb      	ldrb	r3, [r7, #14]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	0912      	lsrs	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002300:	7c3b      	ldrb	r3, [r7, #16]
 8002302:	b29b      	uxth	r3, r3
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b29a      	uxth	r2, r3
 8002308:	7c7b      	ldrb	r3, [r7, #17]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002310:	7d7b      	ldrb	r3, [r7, #21]
 8002312:	b29b      	uxth	r3, r3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	b29a      	uxth	r2, r3
 8002318:	7dbb      	ldrb	r3, [r7, #22]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	b2db      	uxtb	r3, r3
 800231e:	b29b      	uxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002324:	7dbb      	ldrb	r3, [r7, #22]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25a      	sxtb	r2, r3
 8002332:	7dbb      	ldrb	r3, [r7, #22]
 8002334:	b25b      	sxtb	r3, r3
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	b25b      	sxtb	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b25b      	sxtb	r3, r3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b25a      	sxtb	r2, r3
 800234c:	7dbb      	ldrb	r3, [r7, #22]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	b25b      	sxtb	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b25b      	sxtb	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	da30      	bge.n	80023cc <read_field_data+0x15e>
				data->temperature = calc_temperature(adc_temp, dev);
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	69f8      	ldr	r0, [r7, #28]
 800236e:	f7ff fc05 	bl	8001b7c <calc_temperature>
 8002372:	4603      	mov	r3, r0
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edc3 7a01 	vstr	s15, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	6a38      	ldr	r0, [r7, #32]
 8002386:	f7ff fc94 	bl	8001cb2 <calc_pressure>
 800238a:	ee07 0a90 	vmov	s15, r0
 800238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	edc3 7a02 	vstr	s15, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fd35 	bl	8001e0c <calc_humidity>
 80023a2:	ee07 0a90 	vmov	s15, r0
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	edc3 7a03 	vstr	s15, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80023b0:	7df9      	ldrb	r1, [r7, #23]
 80023b2:	8b3b      	ldrh	r3, [r7, #24]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fdc2 	bl	8001f40 <calc_gas_resistance>
 80023bc:	ee07 0a90 	vmov	s15, r0
 80023c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	edc3 7a04 	vstr	s15, [r3, #16]
				break;
 80023ca:	e00d      	b.n	80023e8 <read_field_data+0x17a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	200a      	movs	r0, #10
 80023d2:	4798      	blx	r3
		}
		tries--;
 80023d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023d8:	3b01      	subs	r3, #1
 80023da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 80023de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f af5a 	bne.w	800229c <read_field_data+0x2e>

	if (!tries)
 80023e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <read_field_data+0x188>
		rslt = BME680_W_NO_NEW_DATA;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 80023f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002402:	b590      	push	{r4, r7, lr}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	6039      	str	r1, [r7, #0]
 800240c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f000 f8c6 	bl	80025a0 <null_ptr_check>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d14f      	bne.n	80024c0 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da02      	bge.n	800242e <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8002428:	2300      	movs	r3, #0
 800242a:	73bb      	strb	r3, [r7, #14]
 800242c:	e001      	b.n	8002432 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 800242e:	2310      	movs	r3, #16
 8002430:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	7bba      	ldrb	r2, [r7, #14]
 8002438:	429a      	cmp	r2, r3
 800243a:	d041      	beq.n	80024c0 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	7bba      	ldrb	r2, [r7, #14]
 8002440:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7858      	ldrb	r0, [r3, #1]
 800244a:	f107 020d 	add.w	r2, r7, #13
 800244e:	2301      	movs	r3, #1
 8002450:	21f3      	movs	r1, #243	; 0xf3
 8002452:	47a0      	blx	r4
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8002468:	23fe      	movs	r3, #254	; 0xfe
 800246a:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d125      	bne.n	80024c0 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	f023 0310 	bic.w	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	78db      	ldrb	r3, [r3, #3]
 8002482:	b25b      	sxtb	r3, r3
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	b25a      	sxtb	r2, r3
 800248a:	7b7b      	ldrb	r3, [r7, #13]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b25b      	sxtb	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7858      	ldrb	r0, [r3, #1]
 800249e:	f107 020d 	add.w	r2, r7, #13
 80024a2:	2301      	movs	r3, #1
 80024a4:	2173      	movs	r1, #115	; 0x73
 80024a6:	47a0      	blx	r4
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80024bc:	23fe      	movs	r3, #254	; 0xfe
 80024be:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80024c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f863 	bl	80025a0 <null_ptr_check>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11b      	bne.n	800251e <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7858      	ldrb	r0, [r3, #1]
 80024ee:	f107 020e 	add.w	r2, r7, #14
 80024f2:	2301      	movs	r3, #1
 80024f4:	21f3      	movs	r1, #243	; 0xf3
 80024f6:	47a0      	blx	r4
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 800250c:	23fe      	movs	r3, #254	; 0xfe
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e005      	b.n	800251e <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002512:	7bbb      	ldrb	r3, [r7, #14]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}

0800252a <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	72fb      	strb	r3, [r7, #11]
 8002538:	4613      	mov	r3, r2
 800253a:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d022      	beq.n	800258c <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	7afa      	ldrb	r2, [r7, #11]
 800254c:	429a      	cmp	r2, r3
 800254e:	d90b      	bls.n	8002568 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	7afa      	ldrb	r2, [r7, #11]
 8002554:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	7aba      	ldrb	r2, [r7, #10]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20e      	bcs.n	8002590 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	7aba      	ldrb	r2, [r7, #10]
 8002576:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	b2da      	uxtb	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800258a:	e001      	b.n	8002590 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800258c:	23ff      	movs	r3, #255	; 0xff
 800258e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002590:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <null_ptr_check+0x26>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <null_ptr_check+0x26>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <null_ptr_check+0x26>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80025c6:	23ff      	movs	r3, #255	; 0xff
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e001      	b.n	80025d0 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80025d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025e6:	f000 ff75 	bl	80034d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025ea:	f000 f879 	bl	80026e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025ee:	f000 f93d 	bl	800286c <MX_GPIO_Init>
	MX_I2C1_Init();
 80025f2:	f000 f8df 	bl	80027b4 <MX_I2C1_Init>
	MX_I2C2_Init();
 80025f6:	f000 f90b 	bl	8002810 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 80025fa:	f000 fac3 	bl	8002b84 <SSD1306_Init>
	SSD1306_Clear();
 80025fe:	f000 fce6 	bl	8002fce <SSD1306_Clear>
	//SSD1306_COLOR_t COLOR;
	//COLOR = SSD1306_COLOR_WHITE;
	//SSD1306_Fill(COLOR);
	/* USER CODE BEGIN 2 */

	gas_sensor.dev_id = BME680_I2C_ADDR_SECONDARY;
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <main+0xe4>)
 8002604:	2277      	movs	r2, #119	; 0x77
 8002606:	705a      	strb	r2, [r3, #1]
	gas_sensor.intf = BME680_I2C_INTF;
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <main+0xe4>)
 800260a:	2201      	movs	r2, #1
 800260c:	709a      	strb	r2, [r3, #2]
	gas_sensor.read = user_i2c_read;
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <main+0xe4>)
 8002610:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <main+0xe8>)
 8002612:	649a      	str	r2, [r3, #72]	; 0x48
	gas_sensor.write = user_i2c_write;
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <main+0xe4>)
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <main+0xec>)
 8002618:	64da      	str	r2, [r3, #76]	; 0x4c
	gas_sensor.delay_ms = user_delay_ms;
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <main+0xe4>)
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <main+0xf0>)
 800261e:	651a      	str	r2, [r3, #80]	; 0x50
	gas_sensor.amb_temp = 25;
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <main+0xe4>)
 8002622:	2219      	movs	r2, #25
 8002624:	711a      	strb	r2, [r3, #4]
	rslt = bme680_init(&gas_sensor);
 8002626:	4827      	ldr	r0, [pc, #156]	; (80026c4 <main+0xe4>)
 8002628:	f7fe fd3e 	bl	80010a8 <bme680_init>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <main+0xf4>)
 8002632:	701a      	strb	r2, [r3, #0]
	if (bme680_init(&gas_sensor) != BME680_OK) {
 8002634:	4823      	ldr	r0, [pc, #140]	; (80026c4 <main+0xe4>)
 8002636:	f7fe fd37 	bl	80010a8 <bme680_init>
		//char bme_msg1[] = "BME680 Initialization Error\r\n";
	} else {
		//char bme_msg2[] = "BME680 Initialized and Ready\r\n";
	}
	/* Set the temperature, pressure and humidity settings */
	gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <main+0xe4>)
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <main+0xe4>)
 8002644:	2203      	movs	r2, #3
 8002646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <main+0xe4>)
 800264c:	2204      	movs	r2, #4
 800264e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_127;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <main+0xe4>)
 8002654:	2207      	movs	r2, #7
 8002656:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	/* Set the remaining gas sensor settings and link the heating profile */
	gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <main+0xe4>)
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	/* Create a ramp heat waveform in 3 steps */
	gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <main+0xe4>)
 8002664:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <main+0xe4>)
 800266e:	2296      	movs	r2, #150	; 0x96
 8002670:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	/* Select the power mode */
	/* Must be set before writing the sensor configuration */
	gas_sensor.power_mode = BME680_FORCED_MODE;
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <main+0xe4>)
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/* Set the required sensor settings needed */
	set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <main+0xf8>)
 800267e:	22df      	movs	r2, #223	; 0xdf
 8002680:	701a      	strb	r2, [r3, #0]
			| BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;

	rslt = bme680_init(&gas_sensor);
 8002682:	4810      	ldr	r0, [pc, #64]	; (80026c4 <main+0xe4>)
 8002684:	f7fe fd10 	bl	80010a8 <bme680_init>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <main+0xf4>)
 800268e:	701a      	strb	r2, [r3, #0]

	bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <main+0xe4>)
 8002692:	4812      	ldr	r0, [pc, #72]	; (80026dc <main+0xfc>)
 8002694:	f7ff f872 	bl	800177c <bme680_get_profile_dur>

	// Sampling results variable
	struct bme680_field_data data;

	/* Set the desired sensor configuration */
	rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <main+0xf8>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4908      	ldr	r1, [pc, #32]	; (80026c4 <main+0xe4>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fe3d 	bl	8001322 <bme680_set_sensor_settings>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <main+0xf4>)
 80026ae:	701a      	strb	r2, [r3, #0]

	/* Set the power mode */
	rslt = bme680_set_sensor_mode(&gas_sensor);
 80026b0:	4804      	ldr	r0, [pc, #16]	; (80026c4 <main+0xe4>)
 80026b2:	f7fe fffe 	bl	80016b2 <bme680_set_sensor_mode>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <main+0xf4>)
 80026bc:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE BEGIN 2 */
		/* USER CODE END WHILE */
		BME680_Read();
 80026be:	f000 f927 	bl	8002910 <BME680_Read>
 80026c2:	e7fc      	b.n	80026be <main+0xde>
 80026c4:	20000208 	.word	0x20000208
 80026c8:	08002a85 	.word	0x08002a85
 80026cc:	08002afd 	.word	0x08002afd
 80026d0:	08002a6d 	.word	0x08002a6d
 80026d4:	20000205 	.word	0x20000205
 80026d8:	20000204 	.word	0x20000204
 80026dc:	200002a6 	.word	0x200002a6

080026e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b094      	sub	sp, #80	; 0x50
 80026e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80026e6:	f107 0320 	add.w	r3, r7, #32
 80026ea:	2230      	movs	r2, #48	; 0x30
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 ff9a 	bl	8005628 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <SystemClock_Config+0xcc>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <SystemClock_Config+0xcc>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <SystemClock_Config+0xcc>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <SystemClock_Config+0xd0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <SystemClock_Config+0xd0>)
 800272a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <SystemClock_Config+0xd0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800273c:	2302      	movs	r3, #2
 800273e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002740:	2301      	movs	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002744:	2310      	movs	r3, #16
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002748:	2302      	movs	r3, #2
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002750:	2308      	movs	r3, #8
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002758:	2304      	movs	r3, #4
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800275c:	2308      	movs	r3, #8
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fa93 	bl	8004c90 <HAL_RCC_OscConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0x94>
		Error_Handler();
 8002770:	f000 fa02 	bl	8002b78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002774:	230f      	movs	r3, #15
 8002776:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002784:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2103      	movs	r1, #3
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fcf4 	bl	8005180 <HAL_RCC_ClockConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0xc2>
		Error_Handler();
 800279e:	f000 f9eb 	bl	8002b78 <Error_Handler>
	}
}
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	; 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000

080027b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_I2C1_Init+0x50>)
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <MX_I2C1_Init+0x54>)
 80027bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_I2C1_Init+0x50>)
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <MX_I2C1_Init+0x58>)
 80027c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_I2C1_Init+0x50>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_I2C1_Init+0x50>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_I2C1_Init+0x50>)
 80027d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <MX_I2C1_Init+0x50>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_I2C1_Init+0x50>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <MX_I2C1_Init+0x50>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_I2C1_Init+0x50>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80027f0:	4804      	ldr	r0, [pc, #16]	; (8002804 <MX_I2C1_Init+0x50>)
 80027f2:	f001 f989 	bl	8003b08 <HAL_I2C_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80027fc:	f000 f9bc 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002a8 	.word	0x200002a8
 8002808:	40005400 	.word	0x40005400
 800280c:	00061a80 	.word	0x00061a80

08002810 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_I2C2_Init+0x50>)
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <MX_I2C2_Init+0x54>)
 8002818:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_I2C2_Init+0x50>)
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <MX_I2C2_Init+0x58>)
 800281e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_I2C2_Init+0x50>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_I2C2_Init+0x50>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_I2C2_Init+0x50>)
 800282e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002832:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <MX_I2C2_Init+0x50>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_I2C2_Init+0x50>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <MX_I2C2_Init+0x50>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_I2C2_Init+0x50>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_I2C2_Init+0x50>)
 800284e:	f001 f95b 	bl	8003b08 <HAL_I2C_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002858:	f000 f98e 	bl	8002b78 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200002fc 	.word	0x200002fc
 8002864:	40005800 	.word	0x40005800
 8002868:	00061a80 	.word	0x00061a80

0800286c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_GPIO_Init+0x9c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <MX_GPIO_Init+0x9c>)
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_GPIO_Init+0x9c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_GPIO_Init+0x9c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <MX_GPIO_Init+0xa0>)
 80028de:	f001 f8f9 	bl	8003ad4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD5_Pin */
	GPIO_InitStruct.Pin = LD5_Pin;
 80028e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	4619      	mov	r1, r3
 80028fa:	4804      	ldr	r0, [pc, #16]	; (800290c <MX_GPIO_Init+0xa0>)
 80028fc:	f000 ff66 	bl	80037cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40020c00 	.word	0x40020c00

08002910 <BME680_Read>:

/* USER CODE BEGIN 4 */
void BME680_Read(void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

	user_delay_ms(min_sampling_period);
 8002914:	4b48      	ldr	r3, [pc, #288]	; (8002a38 <BME680_Read+0x128>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f8a7 	bl	8002a6c <user_delay_ms>
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 800291e:	4947      	ldr	r1, [pc, #284]	; (8002a3c <BME680_Read+0x12c>)
 8002920:	4847      	ldr	r0, [pc, #284]	; (8002a40 <BME680_Read+0x130>)
 8002922:	f7fe ff8d 	bl	8001840 <bme680_get_sensor_data>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <BME680_Read+0x134>)
 800292c:	701a      	strb	r2, [r3, #0]

	SSD1306_GotoXY(0, 0); // goto 10, 10
 800292e:	2100      	movs	r1, #0
 8002930:	2000      	movs	r0, #0
 8002932:	f000 fa91 	bl	8002e58 <SSD1306_GotoXY>
	SSD1306_Puts("ESD PROJECT 2023", &Font_7x10, 1); // print
 8002936:	2201      	movs	r2, #1
 8002938:	4943      	ldr	r1, [pc, #268]	; (8002a48 <BME680_Read+0x138>)
 800293a:	4844      	ldr	r0, [pc, #272]	; (8002a4c <BME680_Read+0x13c>)
 800293c:	f000 fb22 	bl	8002f84 <SSD1306_Puts>
	SSD1306_GotoXY(0, 20); // goto 10, 10
 8002940:	2114      	movs	r1, #20
 8002942:	2000      	movs	r0, #0
 8002944:	f000 fa88 	bl	8002e58 <SSD1306_GotoXY>

	sprintf(bufbme1, "Temp:%.2fdegC", data.temperature / 100.0f);
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <BME680_Read+0x130>)
 800294a:	edd3 7a01 	vldr	s15, [r3, #4]
 800294e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002a50 <BME680_Read+0x140>
 8002952:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002956:	ee16 0a90 	vmov	r0, s13
 800295a:	f7fd fdfd 	bl	8000558 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	493c      	ldr	r1, [pc, #240]	; (8002a54 <BME680_Read+0x144>)
 8002964:	483c      	ldr	r0, [pc, #240]	; (8002a58 <BME680_Read+0x148>)
 8002966:	f003 fdd7 	bl	8006518 <siprintf>
	//SSD1306_Puts("TEMPERATURE:", &Font_7x10, 1); // print
	SSD1306_Puts(bufbme1, &Font_7x10, 1);
 800296a:	2201      	movs	r2, #1
 800296c:	4936      	ldr	r1, [pc, #216]	; (8002a48 <BME680_Read+0x138>)
 800296e:	483a      	ldr	r0, [pc, #232]	; (8002a58 <BME680_Read+0x148>)
 8002970:	f000 fb08 	bl	8002f84 <SSD1306_Puts>

	SSD1306_GotoXY(0, 30);
 8002974:	211e      	movs	r1, #30
 8002976:	2000      	movs	r0, #0
 8002978:	f000 fa6e 	bl	8002e58 <SSD1306_GotoXY>
	sprintf(bufbme1, "Humi:%.2f%%rH ", data.humidity / 1000.0f);
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <BME680_Read+0x130>)
 800297e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002982:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a5c <BME680_Read+0x14c>
 8002986:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800298a:	ee16 0a90 	vmov	r0, s13
 800298e:	f7fd fde3 	bl	8000558 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4932      	ldr	r1, [pc, #200]	; (8002a60 <BME680_Read+0x150>)
 8002998:	482f      	ldr	r0, [pc, #188]	; (8002a58 <BME680_Read+0x148>)
 800299a:	f003 fdbd 	bl	8006518 <siprintf>
	SSD1306_Puts(bufbme1, &Font_7x10, 1);
 800299e:	2201      	movs	r2, #1
 80029a0:	4929      	ldr	r1, [pc, #164]	; (8002a48 <BME680_Read+0x138>)
 80029a2:	482d      	ldr	r0, [pc, #180]	; (8002a58 <BME680_Read+0x148>)
 80029a4:	f000 faee 	bl	8002f84 <SSD1306_Puts>

	SSD1306_GotoXY(0, 40);
 80029a8:	2128      	movs	r1, #40	; 0x28
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 fa54 	bl	8002e58 <SSD1306_GotoXY>
	sprintf(bufbme1, "Press:%.2fhPa", data.pressure / 100.0f);
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <BME680_Read+0x130>)
 80029b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a50 <BME680_Read+0x140>
 80029ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029be:	ee16 0a90 	vmov	r0, s13
 80029c2:	f7fd fdc9 	bl	8000558 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4926      	ldr	r1, [pc, #152]	; (8002a64 <BME680_Read+0x154>)
 80029cc:	4822      	ldr	r0, [pc, #136]	; (8002a58 <BME680_Read+0x148>)
 80029ce:	f003 fda3 	bl	8006518 <siprintf>
	SSD1306_Puts(bufbme1, &Font_7x10, 1);
 80029d2:	2201      	movs	r2, #1
 80029d4:	491c      	ldr	r1, [pc, #112]	; (8002a48 <BME680_Read+0x138>)
 80029d6:	4820      	ldr	r0, [pc, #128]	; (8002a58 <BME680_Read+0x148>)
 80029d8:	f000 fad4 	bl	8002f84 <SSD1306_Puts>

	SSD1306_GotoXY(0, 50);
 80029dc:	2132      	movs	r1, #50	; 0x32
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 fa3a 	bl	8002e58 <SSD1306_GotoXY>
	sprintf(bufbme1, "AIRQUAL:%.2fKohms ", data.gas_resistance / 1000.0f);
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <BME680_Read+0x130>)
 80029e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a5c <BME680_Read+0x14c>
 80029ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029f2:	ee16 0a90 	vmov	r0, s13
 80029f6:	f7fd fdaf 	bl	8000558 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	491a      	ldr	r1, [pc, #104]	; (8002a68 <BME680_Read+0x158>)
 8002a00:	4815      	ldr	r0, [pc, #84]	; (8002a58 <BME680_Read+0x148>)
 8002a02:	f003 fd89 	bl	8006518 <siprintf>
	SSD1306_Puts(bufbme1, &Font_7x10, 1);
 8002a06:	2201      	movs	r2, #1
 8002a08:	490f      	ldr	r1, [pc, #60]	; (8002a48 <BME680_Read+0x138>)
 8002a0a:	4813      	ldr	r0, [pc, #76]	; (8002a58 <BME680_Read+0x148>)
 8002a0c:	f000 faba 	bl	8002f84 <SSD1306_Puts>


	SSD1306_UpdateScreen(); // update screen
 8002a10:	f000 f97c 	bl	8002d0c <SSD1306_UpdateScreen>

	user_delay_ms(10 * 1000);
 8002a14:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a18:	f000 f828 	bl	8002a6c <user_delay_ms>

	/*  Trigger the next measurement if you would like to read data out continuously*/
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <BME680_Read+0x12c>)
 8002a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d106      	bne.n	8002a34 <BME680_Read+0x124>
		rslt = bme680_set_sensor_mode(&gas_sensor);
 8002a26:	4805      	ldr	r0, [pc, #20]	; (8002a3c <BME680_Read+0x12c>)
 8002a28:	f7fe fe43 	bl	80016b2 <bme680_set_sensor_mode>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <BME680_Read+0x134>)
 8002a32:	701a      	strb	r2, [r3, #0]
	}

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200002a6 	.word	0x200002a6
 8002a3c:	20000208 	.word	0x20000208
 8002a40:	20000260 	.word	0x20000260
 8002a44:	20000205 	.word	0x20000205
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	08009f88 	.word	0x08009f88
 8002a50:	42c80000 	.word	0x42c80000
 8002a54:	08009f9c 	.word	0x08009f9c
 8002a58:	20000274 	.word	0x20000274
 8002a5c:	447a0000 	.word	0x447a0000
 8002a60:	08009fac 	.word	0x08009fac
 8002a64:	08009fbc 	.word	0x08009fbc
 8002a68:	08009fcc 	.word	0x08009fcc

08002a6c <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fd9f 	bl	80035b8 <HAL_Delay>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	603a      	str	r2, [r7, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	460b      	mov	r3, r1
 8002a94:	71bb      	strb	r3, [r7, #6]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80bb      	strh	r3, [r7, #4]
	int8_t result;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1,
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	b299      	uxth	r1, r3
 8002aa2:	1dba      	adds	r2, r7, #6
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	4812      	ldr	r0, [pc, #72]	; (8002af8 <user_i2c_read+0x74>)
 8002aae:	f001 f96f 	bl	8003d90 <HAL_I2C_Master_Transmit>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <user_i2c_read+0x3a>
			HAL_MAX_DELAY) != HAL_OK) {
		result = -1;
 8002ab8:	23ff      	movs	r3, #255	; 0xff
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e016      	b.n	8002aec <user_i2c_read+0x68>
	} else if (HAL_I2C_Master_Receive(&hi2c1, (dev_id << 1) | 0x01, reg_data,
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	b299      	uxth	r1, r3
 8002acc:	88bb      	ldrh	r3, [r7, #4]
 8002ace:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4808      	ldr	r0, [pc, #32]	; (8002af8 <user_i2c_read+0x74>)
 8002ad8:	f001 fa58 	bl	8003f8c <HAL_I2C_Master_Receive>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <user_i2c_read+0x64>
			len, HAL_MAX_DELAY) != HAL_OK) {
		result = -1;
 8002ae2:	23ff      	movs	r3, #255	; 0xff
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e001      	b.n	8002aec <user_i2c_read+0x68>
	} else {
		result = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200002a8 	.word	0x200002a8

08002afc <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	603a      	str	r2, [r7, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	71bb      	strb	r3, [r7, #6]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80bb      	strh	r3, [r7, #4]
	int8_t result;
	int8_t *buf;

	// Allocate and load I2C transmit buffer
	buf = malloc(len + 1);
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fd68 	bl	80055ec <malloc>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 8002b20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, reg_data, len);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	88ba      	ldrh	r2, [r7, #4]
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fd6b 	bl	800560c <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t*) buf, len + 1,
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	88bb      	ldrh	r3, [r7, #4]
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <user_i2c_write+0x78>)
 8002b4e:	f001 f91f 	bl	8003d90 <HAL_I2C_Master_Transmit>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <user_i2c_write+0x62>
			HAL_MAX_DELAY) != HAL_OK) {
		result = -1;
 8002b58:	23ff      	movs	r3, #255	; 0xff
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e001      	b.n	8002b62 <user_i2c_write+0x66>
	} else {
		result = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
	}

	free(buf);
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f002 fd4a 	bl	80055fc <free>
	return result;
 8002b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200002a8 	.word	0x200002a8

08002b78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <SSD1306_Init>:
				SSD1306_DrawPixel(x + i, y, color);
		}
	}
}

uint8_t SSD1306_Init(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002b8a:	f000 fa29 	bl	8002fe0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002b8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002b92:	2201      	movs	r2, #1
 8002b94:	2178      	movs	r1, #120	; 0x78
 8002b96:	485b      	ldr	r0, [pc, #364]	; (8002d04 <SSD1306_Init+0x180>)
 8002b98:	f001 fc1e 	bl	80043d8 <HAL_I2C_IsDeviceReady>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e0a9      	b.n	8002cfa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002ba6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002baa:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002bac:	e002      	b.n	8002bb4 <SSD1306_Init+0x30>
		p--;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002bba:	22ae      	movs	r2, #174	; 0xae
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2078      	movs	r0, #120	; 0x78
 8002bc0:	f000 fa8a 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2078      	movs	r0, #120	; 0x78
 8002bca:	f000 fa85 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002bce:	2210      	movs	r2, #16
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2078      	movs	r0, #120	; 0x78
 8002bd4:	f000 fa80 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bd8:	22b0      	movs	r2, #176	; 0xb0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2078      	movs	r0, #120	; 0x78
 8002bde:	f000 fa7b 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002be2:	22c8      	movs	r2, #200	; 0xc8
 8002be4:	2100      	movs	r1, #0
 8002be6:	2078      	movs	r0, #120	; 0x78
 8002be8:	f000 fa76 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2078      	movs	r0, #120	; 0x78
 8002bf2:	f000 fa71 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2078      	movs	r0, #120	; 0x78
 8002bfc:	f000 fa6c 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	2100      	movs	r1, #0
 8002c04:	2078      	movs	r0, #120	; 0x78
 8002c06:	f000 fa67 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002c0a:	2281      	movs	r2, #129	; 0x81
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2078      	movs	r0, #120	; 0x78
 8002c10:	f000 fa62 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	2100      	movs	r1, #0
 8002c18:	2078      	movs	r0, #120	; 0x78
 8002c1a:	f000 fa5d 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002c1e:	22a1      	movs	r2, #161	; 0xa1
 8002c20:	2100      	movs	r1, #0
 8002c22:	2078      	movs	r0, #120	; 0x78
 8002c24:	f000 fa58 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002c28:	22a6      	movs	r2, #166	; 0xa6
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2078      	movs	r0, #120	; 0x78
 8002c2e:	f000 fa53 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002c32:	22a8      	movs	r2, #168	; 0xa8
 8002c34:	2100      	movs	r1, #0
 8002c36:	2078      	movs	r0, #120	; 0x78
 8002c38:	f000 fa4e 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002c3c:	223f      	movs	r2, #63	; 0x3f
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2078      	movs	r0, #120	; 0x78
 8002c42:	f000 fa49 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002c46:	22a4      	movs	r2, #164	; 0xa4
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2078      	movs	r0, #120	; 0x78
 8002c4c:	f000 fa44 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002c50:	22d3      	movs	r2, #211	; 0xd3
 8002c52:	2100      	movs	r1, #0
 8002c54:	2078      	movs	r0, #120	; 0x78
 8002c56:	f000 fa3f 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2078      	movs	r0, #120	; 0x78
 8002c60:	f000 fa3a 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002c64:	22d5      	movs	r2, #213	; 0xd5
 8002c66:	2100      	movs	r1, #0
 8002c68:	2078      	movs	r0, #120	; 0x78
 8002c6a:	f000 fa35 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002c6e:	22f0      	movs	r2, #240	; 0xf0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2078      	movs	r0, #120	; 0x78
 8002c74:	f000 fa30 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002c78:	22d9      	movs	r2, #217	; 0xd9
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2078      	movs	r0, #120	; 0x78
 8002c7e:	f000 fa2b 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	2100      	movs	r1, #0
 8002c86:	2078      	movs	r0, #120	; 0x78
 8002c88:	f000 fa26 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002c8c:	22da      	movs	r2, #218	; 0xda
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2078      	movs	r0, #120	; 0x78
 8002c92:	f000 fa21 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002c96:	2212      	movs	r2, #18
 8002c98:	2100      	movs	r1, #0
 8002c9a:	2078      	movs	r0, #120	; 0x78
 8002c9c:	f000 fa1c 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002ca0:	22db      	movs	r2, #219	; 0xdb
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2078      	movs	r0, #120	; 0x78
 8002ca6:	f000 fa17 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002caa:	2220      	movs	r2, #32
 8002cac:	2100      	movs	r1, #0
 8002cae:	2078      	movs	r0, #120	; 0x78
 8002cb0:	f000 fa12 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002cb4:	228d      	movs	r2, #141	; 0x8d
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2078      	movs	r0, #120	; 0x78
 8002cba:	f000 fa0d 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002cbe:	2214      	movs	r2, #20
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2078      	movs	r0, #120	; 0x78
 8002cc4:	f000 fa08 	bl	80030d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002cc8:	22af      	movs	r2, #175	; 0xaf
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2078      	movs	r0, #120	; 0x78
 8002cce:	f000 fa03 	bl	80030d8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002cd2:	222e      	movs	r2, #46	; 0x2e
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2078      	movs	r0, #120	; 0x78
 8002cd8:	f000 f9fe 	bl	80030d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f000 f843 	bl	8002d68 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002ce2:	f000 f813 	bl	8002d0c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <SSD1306_Init+0x184>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <SSD1306_Init+0x184>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SSD1306_Init+0x184>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200002a8 	.word	0x200002a8
 8002d08:	20000750 	.word	0x20000750

08002d0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	e01d      	b.n	8002d54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	3b50      	subs	r3, #80	; 0x50
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2100      	movs	r1, #0
 8002d22:	2078      	movs	r0, #120	; 0x78
 8002d24:	f000 f9d8 	bl	80030d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2078      	movs	r0, #120	; 0x78
 8002d2e:	f000 f9d3 	bl	80030d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002d32:	2210      	movs	r2, #16
 8002d34:	2100      	movs	r1, #0
 8002d36:	2078      	movs	r0, #120	; 0x78
 8002d38:	f000 f9ce 	bl	80030d8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <SSD1306_UpdateScreen+0x58>)
 8002d42:	441a      	add	r2, r3
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	2078      	movs	r0, #120	; 0x78
 8002d4a:	f000 f95f 	bl	800300c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	3301      	adds	r3, #1
 8002d52:	71fb      	strb	r3, [r7, #7]
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	2b07      	cmp	r3, #7
 8002d58:	d9de      	bls.n	8002d18 <SSD1306_UpdateScreen+0xc>
	}
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000350 	.word	0x20000350

08002d68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SSD1306_Fill+0x14>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <SSD1306_Fill+0x16>
 8002d7c:	23ff      	movs	r3, #255	; 0xff
 8002d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d82:	4619      	mov	r1, r3
 8002d84:	4803      	ldr	r0, [pc, #12]	; (8002d94 <SSD1306_Fill+0x2c>)
 8002d86:	f002 fc4f 	bl	8005628 <memset>
			sizeof(SSD1306_Buffer));
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000350 	.word	0x20000350

08002d98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
 8002da2:	460b      	mov	r3, r1
 8002da4:	80bb      	strh	r3, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b7f      	cmp	r3, #127	; 0x7f
 8002dae:	d848      	bhi.n	8002e42 <SSD1306_DrawPixel+0xaa>
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	2b3f      	cmp	r3, #63	; 0x3f
 8002db4:	d845      	bhi.n	8002e42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <SSD1306_DrawPixel+0xb8>)
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t) !color;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d11a      	bne.n	8002e08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	88bb      	ldrh	r3, [r7, #4]
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	4413      	add	r3, r2
 8002de0:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b259      	sxtb	r1, r3
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2c9      	uxtb	r1, r1
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e04:	54d1      	strb	r1, [r2, r3]
 8002e06:	e01d      	b.n	8002e44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	88bb      	ldrh	r3, [r7, #4]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4413      	add	r3, r2
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	b25a      	sxtb	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b259      	sxtb	r1, r3
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	4603      	mov	r3, r0
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4413      	add	r3, r2
 8002e3a:	b2c9      	uxtb	r1, r1
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <SSD1306_DrawPixel+0xbc>)
 8002e3e:	54d1      	strb	r1, [r2, r3]
 8002e40:	e000      	b.n	8002e44 <SSD1306_DrawPixel+0xac>
		return;
 8002e42:	bf00      	nop
	}
}
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000750 	.word	0x20000750
 8002e54:	20000350 	.word	0x20000350

08002e58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460a      	mov	r2, r1
 8002e62:	80fb      	strh	r3, [r7, #6]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002e68:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <SSD1306_GotoXY+0x28>)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <SSD1306_GotoXY+0x28>)
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	8053      	strh	r3, [r2, #2]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000750 	.word	0x20000750

08002e84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
	if (
 8002ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea2:	dc07      	bgt.n	8002eb4 <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)) {
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002ea6:	885b      	ldrh	r3, [r3, #2]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002eb0:	2b3f      	cmp	r3, #63	; 0x3f
 8002eb2:	dd01      	ble.n	8002eb8 <SSD1306_Putc+0x34>
		/* Error */
		return 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e05e      	b.n	8002f76 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e04b      	b.n	8002f56 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	3b20      	subs	r3, #32
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	7849      	ldrb	r1, [r1, #1]
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	440b      	add	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e030      	b.n	8002f44 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b298      	uxth	r0, r3
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002f00:	885a      	ldrh	r2, [r3, #2]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	79ba      	ldrb	r2, [r7, #6]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff ff43 	bl	8002d98 <SSD1306_DrawPixel>
 8002f12:	e014      	b.n	8002f3e <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b298      	uxth	r0, r3
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002f22:	885a      	ldrh	r2, [r3, #2]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	b299      	uxth	r1, r3
 8002f2c:	79bb      	ldrb	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f7ff ff2d 	bl	8002d98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d3c8      	bcc.n	8002ee2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d3ad      	bcc.n	8002ebe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002f64:	881a      	ldrh	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <SSD1306_Putc+0xfc>)
 8002f72:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002f74:	79fb      	ldrb	r3, [r7, #7]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000750 	.word	0x20000750

08002f84 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002f92:	e012      	b.n	8002fba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff71 	bl	8002e84 <SSD1306_Putc>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d002      	beq.n	8002fb4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	e008      	b.n	8002fc6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e8      	bne.n	8002f94 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void) {
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff fec8 	bl	8002d68 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002fd8:	f7ff fe98 	bl	8002d0c <SSD1306_UpdateScreen>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <ssd1306_I2C_Init+0x28>)
 8002fe8:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002fea:	e002      	b.n	8002ff2 <ssd1306_I2C_Init+0x12>
		p--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0003d090 	.word	0x0003d090

0800300c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data,
		uint16_t count) {
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b0c7      	sub	sp, #284	; 0x11c
 8003010:	af02      	add	r7, sp, #8
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800301a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800301e:	600a      	str	r2, [r1, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003026:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800302a:	4622      	mov	r2, r4
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003032:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003036:	4602      	mov	r2, r0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800303e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003042:	460a      	mov	r2, r1
 8003044:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8003046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800304a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800304e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003052:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003060:	e015      	b.n	800308e <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8003062:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003066:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800306a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	441a      	add	r2, r3
 8003072:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003076:	3301      	adds	r3, #1
 8003078:	7811      	ldrb	r1, [r2, #0]
 800307a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800307e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003082:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 8003084:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003088:	3301      	adds	r3, #1
 800308a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800308e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003092:	b29b      	uxth	r3, r3
 8003094:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003098:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8df      	bhi.n	8003062 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 80030a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b299      	uxth	r1, r3
 80030ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f107 020c 	add.w	r2, r7, #12
 80030c0:	200a      	movs	r0, #10
 80030c2:	9000      	str	r0, [sp, #0]
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80030c6:	f000 fe63 	bl	8003d90 <HAL_I2C_Master_Transmit>
}
 80030ca:	bf00      	nop
 80030cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	200002a8 	.word	0x200002a8

080030d8 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	460b      	mov	r3, r1
 80030e4:	71bb      	strb	r3, [r7, #6]
 80030e6:	4613      	mov	r3, r2
 80030e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80030ee:	797b      	ldrb	r3, [r7, #5]
 80030f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	b299      	uxth	r1, r3
 80030f6:	f107 020c 	add.w	r2, r7, #12
 80030fa:	230a      	movs	r3, #10
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2302      	movs	r3, #2
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <ssd1306_I2C_Write+0x38>)
 8003102:	f000 fe45 	bl	8003d90 <HAL_I2C_Master_Transmit>
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200002a8 	.word	0x200002a8

08003114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_MspInit+0x4c>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_MspInit+0x4c>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_MspInit+0x4c>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_MspInit+0x4c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_MspInit+0x4c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_MspInit+0x4c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003152:	2007      	movs	r0, #7
 8003154:	f000 fb06 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_I2C_MspInit+0x108>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12c      	bne.n	80031e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a38      	ldr	r2, [pc, #224]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b2:	2304      	movs	r3, #4
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	482d      	ldr	r0, [pc, #180]	; (8003274 <HAL_I2C_MspInit+0x110>)
 80031be:	f000 fb05 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a29      	ldr	r2, [pc, #164]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031de:	e041      	b.n	8003264 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a24      	ldr	r2, [pc, #144]	; (8003278 <HAL_I2C_MspInit+0x114>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d13c      	bne.n	8003264 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800320c:	2312      	movs	r3, #18
 800320e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003218:	2304      	movs	r3, #4
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	4814      	ldr	r0, [pc, #80]	; (8003274 <HAL_I2C_MspInit+0x110>)
 8003224:	f000 fad2 	bl	80037cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003228:	2308      	movs	r3, #8
 800322a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800322c:	2312      	movs	r3, #18
 800322e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003238:	2309      	movs	r3, #9
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4619      	mov	r1, r3
 8003242:	480c      	ldr	r0, [pc, #48]	; (8003274 <HAL_I2C_MspInit+0x110>)
 8003244:	f000 fac2 	bl	80037cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 8003252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003256:	6413      	str	r3, [r2, #64]	; 0x40
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_I2C_MspInit+0x10c>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	bf00      	nop
 8003266:	3730      	adds	r7, #48	; 0x30
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40005400 	.word	0x40005400
 8003270:	40023800 	.word	0x40023800
 8003274:	40020400 	.word	0x40020400
 8003278:	40005800 	.word	0x40005800

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <MemManage_Handler+0x4>

0800328e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <UsageFault_Handler+0x4>

0800329a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 f956 	bl	8003578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return 1;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_kill>:

int _kill(int pid, int sig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ea:	f002 f955 	bl	8005598 <__errno>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2216      	movs	r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
  return -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffe7 	bl	80032e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003312:	e7fe      	b.n	8003312 <_exit+0x12>

08003314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e00a      	b.n	800333c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003326:	f3af 8000 	nop.w
 800332a:	4601      	mov	r1, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	60ba      	str	r2, [r7, #8]
 8003332:	b2ca      	uxtb	r2, r1
 8003334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	dbf0      	blt.n	8003326 <_read+0x12>
  }

  return len;
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e009      	b.n	8003374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60ba      	str	r2, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	dbf1      	blt.n	8003360 <_write+0x12>
  }
  return len;
 800337c:	687b      	ldr	r3, [r7, #4]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_close>:

int _close(int file)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ae:	605a      	str	r2, [r3, #4]
  return 0;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_isatty>:

int _isatty(int file)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <_sbrk+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <_sbrk+0x64>)
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <_sbrk+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <_sbrk+0x64>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d207      	bcs.n	8003430 <_sbrk+0x40>
		errno = ENOMEM;
 8003420:	f002 f8ba 	bl	8005598 <__errno>
 8003424:	4603      	mov	r3, r0
 8003426:	220c      	movs	r2, #12
 8003428:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	e009      	b.n	8003444 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <_sbrk+0x64>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <_sbrk+0x64>)
 8003440:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20020000 	.word	0x20020000
 8003450:	00000400 	.word	0x00000400
 8003454:	20000758 	.word	0x20000758
 8003458:	20000770 	.word	0x20000770

0800345c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <SystemInit+0x20>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <SystemInit+0x20>)
 8003468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800346c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003484:	480d      	ldr	r0, [pc, #52]	; (80034bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003486:	490e      	ldr	r1, [pc, #56]	; (80034c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800348c:	e002      	b.n	8003494 <LoopCopyDataInit>

0800348e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003492:	3304      	adds	r3, #4

08003494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003498:	d3f9      	bcc.n	800348e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800349c:	4c0b      	ldr	r4, [pc, #44]	; (80034cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800349e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a0:	e001      	b.n	80034a6 <LoopFillZerobss>

080034a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a4:	3204      	adds	r2, #4

080034a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a8:	d3fb      	bcc.n	80034a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034aa:	f7ff ffd7 	bl	800345c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ae:	f002 f879 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b2:	f7ff f895 	bl	80025e0 <main>
  bx  lr    
 80034b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80034c4:	0800ac1c 	.word	0x0800ac1c
  ldr r2, =_sbss
 80034c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80034cc:	20000770 	.word	0x20000770

080034d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <ADC_IRQHandler>
	...

080034d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_Init+0x40>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_Init+0x40>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <HAL_Init+0x40>)
 80034ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_Init+0x40>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_Init+0x40>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 f931 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003502:	2000      	movs	r0, #0
 8003504:	f000 f808 	bl	8003518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003508:	f7ff fe04 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00

08003518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_InitTick+0x54>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_InitTick+0x58>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800352e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f93b 	bl	80037b2 <HAL_SYSTICK_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e00e      	b.n	8003564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0f      	cmp	r3, #15
 800354a:	d80a      	bhi.n	8003562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354c:	2200      	movs	r2, #0
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f000 f911 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <HAL_InitTick+0x5c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000008 	.word	0x20000008
 8003570:	20000010 	.word	0x20000010
 8003574:	2000000c 	.word	0x2000000c

08003578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_IncTick+0x20>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_IncTick+0x24>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4413      	add	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_IncTick+0x24>)
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000010 	.word	0x20000010
 800359c:	2000075c 	.word	0x2000075c

080035a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return uwTick;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_GetTick+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	2000075c 	.word	0x2000075c

080035b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff ffee 	bl	80035a0 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d005      	beq.n	80035de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_Delay+0x44>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035de:	bf00      	nop
 80035e0:	f7ff ffde 	bl	80035a0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d8f7      	bhi.n	80035e0 <HAL_Delay+0x28>
  {
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000010 	.word	0x20000010

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff47 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff5c 	bl	8003648 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffb0 	bl	8003720 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e159      	b.n	8003a9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 8148 	bne.w	8003a96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d005      	beq.n	800381e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	2b02      	cmp	r3, #2
 800381c:	d130      	bne.n	8003880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 0201 	and.w	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b03      	cmp	r3, #3
 800388a:	d017      	beq.n	80038bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d123      	bne.n	8003910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	08da      	lsrs	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	08da      	lsrs	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3208      	adds	r2, #8
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80a2 	beq.w	8003a96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a56      	ldr	r2, [pc, #344]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <HAL_GPIO_Init+0x2e8>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800396e:	4a52      	ldr	r2, [pc, #328]	; (8003ab8 <HAL_GPIO_Init+0x2ec>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a49      	ldr	r2, [pc, #292]	; (8003abc <HAL_GPIO_Init+0x2f0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0x202>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <HAL_GPIO_Init+0x2f4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x1fe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <HAL_GPIO_Init+0x2f8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x1fa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a46      	ldr	r2, [pc, #280]	; (8003ac8 <HAL_GPIO_Init+0x2fc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x1f6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a45      	ldr	r2, [pc, #276]	; (8003acc <HAL_GPIO_Init+0x300>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x1f2>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039be:	2307      	movs	r3, #7
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x204>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x2ec>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f aea2 	bls.w	80037e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af0:	e003      	b.n	8003afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	619a      	str	r2, [r3, #24]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e12b      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fb18 	bl	8003164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f001 fd00 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a81      	ldr	r2, [pc, #516]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d807      	bhi.n	8003b8c <HAL_I2C_Init+0x84>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a80      	ldr	r2, [pc, #512]	; (8003d80 <HAL_I2C_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e006      	b.n	8003b9a <HAL_I2C_Init+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a7d      	ldr	r2, [pc, #500]	; (8003d84 <HAL_I2C_Init+0x27c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf94      	ite	ls
 8003b94:	2301      	movls	r3, #1
 8003b96:	2300      	movhi	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0e7      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <HAL_I2C_Init+0x280>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9b      	lsrs	r3, r3, #18
 8003bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <HAL_I2C_Init+0xd4>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	e009      	b.n	8003bf0 <HAL_I2C_Init+0xe8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a69      	ldr	r2, [pc, #420]	; (8003d8c <HAL_I2C_Init+0x284>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	3301      	adds	r3, #1
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	495c      	ldr	r1, [pc, #368]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d819      	bhi.n	8003c44 <HAL_I2C_Init+0x13c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e59      	subs	r1, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c24:	400b      	ands	r3, r1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_I2C_Init+0x138>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e59      	subs	r1, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	e051      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e04f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_I2C_Init+0x168>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e012      	b.n	8003c96 <HAL_I2C_Init+0x18e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	0099      	lsls	r1, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x196>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_I2C_Init+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e58      	subs	r0, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0
 8003d80:	001e847f 	.word	0x001e847f
 8003d84:	003d08ff 	.word	0x003d08ff
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
 8003da0:	4613      	mov	r3, r2
 8003da2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff fbfc 	bl	80035a0 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	f040 80e0 	bne.w	8003f78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2319      	movs	r3, #25
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4970      	ldr	r1, [pc, #448]	; (8003f84 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fd86 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0d3      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2C_Master_Transmit+0x50>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0cc      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d007      	beq.n	8003e06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2221      	movs	r2, #33	; 0x21
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2210      	movs	r2, #16
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	893a      	ldrh	r2, [r7, #8]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a50      	ldr	r2, [pc, #320]	; (8003f88 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e48:	8979      	ldrh	r1, [r7, #10]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fbf0 	bl	8004634 <I2C_MasterRequestWrite>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e08d      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e74:	e066      	b.n	8003f44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fe00 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d11b      	bne.n	8003f18 <HAL_I2C_Master_Transmit+0x188>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	6a39      	ldr	r1, [r7, #32]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fdf0 	bl	8004b02 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e01a      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d194      	bne.n	8003e76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	00100002 	.word	0x00100002
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	; 0x30
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7ff fafe 	bl	80035a0 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	f040 820b 	bne.w	80043ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	497c      	ldr	r1, [pc, #496]	; (80041b0 <HAL_I2C_Master_Receive+0x224>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fc88 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e1fe      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2C_Master_Receive+0x50>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e1f7      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d007      	beq.n	8004002 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2222      	movs	r2, #34	; 0x22
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2210      	movs	r2, #16
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a5c      	ldr	r2, [pc, #368]	; (80041b4 <HAL_I2C_Master_Receive+0x228>)
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004044:	8979      	ldrh	r1, [r7, #10]
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fb74 	bl	8004738 <I2C_MasterRequestRead>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1b8      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	2b00      	cmp	r3, #0
 8004060:	d113      	bne.n	800408a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e18c      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b01      	cmp	r3, #1
 8004090:	d11b      	bne.n	80040ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e16c      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d11b      	bne.n	800410a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	e14c      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004130:	e138      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	2b03      	cmp	r3, #3
 8004138:	f200 80f1 	bhi.w	800431e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	2b01      	cmp	r3, #1
 8004142:	d123      	bne.n	800418c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fd1b 	bl	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e139      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800418a:	e10b      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b02      	cmp	r3, #2
 8004192:	d14e      	bne.n	8004232 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	2200      	movs	r2, #0
 800419c:	4906      	ldr	r1, [pc, #24]	; (80041b8 <HAL_I2C_Master_Receive+0x22c>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fb98 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e10e      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
 80041ae:	bf00      	nop
 80041b0:	00100002 	.word	0x00100002
 80041b4:	ffff0000 	.word	0xffff0000
 80041b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004230:	e0b8      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2200      	movs	r2, #0
 800423a:	4966      	ldr	r1, [pc, #408]	; (80043d4 <HAL_I2C_Master_Receive+0x448>)
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fb49 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0bf      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	494f      	ldr	r1, [pc, #316]	; (80043d4 <HAL_I2C_Master_Receive+0x448>)
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fb1b 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e091      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800431c:	e042      	b.n	80043a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fc2e 	bl	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e04c      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d118      	bne.n	80043a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f aec2 	bne.w	8004132 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00010004 	.word	0x00010004

080043d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	460b      	mov	r3, r1
 80043e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff f8da 	bl	80035a0 <HAL_GetTick>
 80043ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	f040 8111 	bne.w	8004622 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2319      	movs	r3, #25
 8004406:	2201      	movs	r2, #1
 8004408:	4988      	ldr	r1, [pc, #544]	; (800462c <HAL_I2C_IsDeviceReady+0x254>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa62 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
 8004418:	e104      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2C_IsDeviceReady+0x50>
 8004424:	2302      	movs	r3, #2
 8004426:	e0fd      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d007      	beq.n	800444e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2224      	movs	r2, #36	; 0x24
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a70      	ldr	r2, [pc, #448]	; (8004630 <HAL_I2C_IsDeviceReady+0x258>)
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004480:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2200      	movs	r2, #0
 800448a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fa20 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a8:	d103      	bne.n	80044b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0b6      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80044c6:	f7ff f86b 	bl	80035a0 <HAL_GetTick>
 80044ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044fa:	e025      	b.n	8004548 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7ff f850 	bl	80035a0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <HAL_I2C_IsDeviceReady+0x13a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	22a0      	movs	r2, #160	; 0xa0
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2ba0      	cmp	r3, #160	; 0xa0
 8004552:	d005      	beq.n	8004560 <HAL_I2C_IsDeviceReady+0x188>
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_I2C_IsDeviceReady+0x188>
 800455a:	7dbb      	ldrb	r3, [r7, #22]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0cd      	beq.n	80044fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d129      	bne.n	80045ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2319      	movs	r3, #25
 80045a2:	2201      	movs	r2, #1
 80045a4:	4921      	ldr	r1, [pc, #132]	; (800462c <HAL_I2C_IsDeviceReady+0x254>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f994 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e036      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e02c      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2319      	movs	r3, #25
 80045ea:	2201      	movs	r2, #1
 80045ec:	490f      	ldr	r1, [pc, #60]	; (800462c <HAL_I2C_IsDeviceReady+0x254>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f970 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e012      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3301      	adds	r3, #1
 8004602:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	f4ff af32 	bcc.w	8004472 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00100002 	.word	0x00100002
 8004630:	ffff0000 	.word	0xffff0000

08004634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	460b      	mov	r3, r1
 8004642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d006      	beq.n	800465e <I2C_MasterRequestWrite+0x2a>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d003      	beq.n	800465e <I2C_MasterRequestWrite+0x2a>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00b      	b.n	8004688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	2b12      	cmp	r3, #18
 8004676:	d107      	bne.n	8004688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f91d 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e035      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d108      	bne.n	80046d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e01b      	b.n	8004710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	11db      	asrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f063 030f 	orn	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <I2C_MasterRequestWrite+0xfc>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f943 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e010      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <I2C_MasterRequestWrite+0x100>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f933 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	00010008 	.word	0x00010008
 8004734:	00010002 	.word	0x00010002

08004738 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d006      	beq.n	8004772 <I2C_MasterRequestRead+0x3a>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d003      	beq.n	8004772 <I2C_MasterRequestRead+0x3a>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004770:	d108      	bne.n	8004784 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e00b      	b.n	800479c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b11      	cmp	r3, #17
 800478a:	d107      	bne.n	800479c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f893 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d103      	bne.n	80047cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e079      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d8:	d108      	bne.n	80047ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
 80047ea:	e05f      	b.n	80048ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	11db      	asrs	r3, r3, #7
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f063 030f 	orn	r3, r3, #15
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4930      	ldr	r1, [pc, #192]	; (80048cc <I2C_MasterRequestRead+0x194>)
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8b9 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e054      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <I2C_MasterRequestRead+0x198>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f8a9 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e044      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f831 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d103      	bne.n	8004890 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e017      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	11db      	asrs	r3, r3, #7
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f063 030e 	orn	r3, r3, #14
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4907      	ldr	r1, [pc, #28]	; (80048d0 <I2C_MasterRequestRead+0x198>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f865 	bl	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	00010008 	.word	0x00010008
 80048d0:	00010002 	.word	0x00010002

080048d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e4:	e025      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d021      	beq.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fe fe57 	bl	80035a0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d116      	bne.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e023      	b.n	800497a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10d      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	e00c      	b.n	8004972 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	429a      	cmp	r2, r3
 8004976:	d0b6      	beq.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004990:	e051      	b.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d123      	bne.n	80049ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e046      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d021      	beq.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fe fdd5 	bl	80035a0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d116      	bne.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e020      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10c      	bne.n	8004a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	43da      	mvns	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e00b      	b.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	43da      	mvns	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d18d      	bne.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8c:	e02d      	b.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8ce 	bl	8004c30 <I2C_IsAcknowledgeFailed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e02d      	b.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d021      	beq.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fe fd7b 	bl	80035a0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d116      	bne.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e007      	b.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d1ca      	bne.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b0e:	e02d      	b.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f88d 	bl	8004c30 <I2C_IsAcknowledgeFailed>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e02d      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d021      	beq.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fe fd3a 	bl	80035a0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d116      	bne.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e007      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d1ca      	bne.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b90:	e042      	b.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d119      	bne.n	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e029      	b.n	8004c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd4:	f7fe fce4 	bl	80035a0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e007      	b.n	8004c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d1b5      	bne.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d11b      	bne.n	8004c80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e267      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d075      	beq.n	8004d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cae:	4b88      	ldr	r3, [pc, #544]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d00c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cba:	4b85      	ldr	r3, [pc, #532]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d112      	bne.n	8004cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc6:	4b82      	ldr	r3, [pc, #520]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	4b7e      	ldr	r3, [pc, #504]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05b      	beq.n	8004d98 <HAL_RCC_OscConfig+0x108>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d157      	bne.n	8004d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e242      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCC_OscConfig+0x74>
 8004cf6:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a75      	ldr	r2, [pc, #468]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e01d      	b.n	8004d40 <HAL_RCC_OscConfig+0xb0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x98>
 8004d0e:	4b70      	ldr	r3, [pc, #448]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6f      	ldr	r2, [pc, #444]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6c      	ldr	r2, [pc, #432]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_OscConfig+0xb0>
 8004d28:	4b69      	ldr	r3, [pc, #420]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a68      	ldr	r2, [pc, #416]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fe fc2a 	bl	80035a0 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fe fc26 	bl	80035a0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e207      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	4b5b      	ldr	r3, [pc, #364]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0xc0>
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe fc16 	bl	80035a0 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fe fc12 	bl	80035a0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1f3      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0xe8>
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d063      	beq.n	8004e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da6:	4b4a      	ldr	r3, [pc, #296]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d11c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dbe:	4b44      	ldr	r3, [pc, #272]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d116      	bne.n	8004df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_RCC_OscConfig+0x152>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e1c7      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de2:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4937      	ldr	r1, [pc, #220]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	e03a      	b.n	8004e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e00:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <HAL_RCC_OscConfig+0x244>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fe fbcb 	bl	80035a0 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0e:	f7fe fbc7 	bl	80035a0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e1a8      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2c:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4925      	ldr	r1, [pc, #148]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	600b      	str	r3, [r1, #0]
 8004e40:	e015      	b.n	8004e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e42:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_RCC_OscConfig+0x244>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe fbaa 	bl	80035a0 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e50:	f7fe fba6 	bl	80035a0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e187      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d036      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_RCC_OscConfig+0x248>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fe fb8a 	bl	80035a0 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fe fb86 	bl	80035a0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e167      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x200>
 8004eae:	e01b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_OscConfig+0x248>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fe fb73 	bl	80035a0 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ebc:	e00e      	b.n	8004edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ebe:	f7fe fb6f 	bl	80035a0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d907      	bls.n	8004edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e150      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470000 	.word	0x42470000
 8004ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004edc:	4b88      	ldr	r3, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ea      	bne.n	8004ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8097 	beq.w	8005024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efa:	4b81      	ldr	r3, [pc, #516]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10f      	bne.n	8004f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	4b7d      	ldr	r3, [pc, #500]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a7c      	ldr	r2, [pc, #496]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b7a      	ldr	r3, [pc, #488]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f26:	4b77      	ldr	r3, [pc, #476]	; (8005104 <HAL_RCC_OscConfig+0x474>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d118      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f32:	4b74      	ldr	r3, [pc, #464]	; (8005104 <HAL_RCC_OscConfig+0x474>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a73      	ldr	r2, [pc, #460]	; (8005104 <HAL_RCC_OscConfig+0x474>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fe fb2f 	bl	80035a0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fe fb2b 	bl	80035a0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e10c      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	4b6a      	ldr	r3, [pc, #424]	; (8005104 <HAL_RCC_OscConfig+0x474>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x2ea>
 8004f6c:	4b64      	ldr	r3, [pc, #400]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a63      	ldr	r2, [pc, #396]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	e01c      	b.n	8004fb4 <HAL_RCC_OscConfig+0x324>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x30c>
 8004f82:	4b5f      	ldr	r3, [pc, #380]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f88:	f043 0304 	orr.w	r3, r3, #4
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a5b      	ldr	r2, [pc, #364]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	e00b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x324>
 8004f9c:	4b58      	ldr	r3, [pc, #352]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4a57      	ldr	r2, [pc, #348]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa8:	4b55      	ldr	r3, [pc, #340]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a54      	ldr	r2, [pc, #336]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004fae:	f023 0304 	bic.w	r3, r3, #4
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fe faf0 	bl	80035a0 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fe faec 	bl	80035a0 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0cb      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	4b49      	ldr	r3, [pc, #292]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0ee      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x334>
 8004fe6:	e014      	b.n	8005012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe8:	f7fe fada 	bl	80035a0 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fe fad6 	bl	80035a0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e0b5      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ee      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b39      	ldr	r3, [pc, #228]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	4a38      	ldr	r2, [pc, #224]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a1 	beq.w	8005170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502e:	4b34      	ldr	r3, [pc, #208]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b08      	cmp	r3, #8
 8005038:	d05c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d141      	bne.n	80050c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <HAL_RCC_OscConfig+0x478>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe faaa 	bl	80035a0 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005050:	f7fe faa6 	bl	80035a0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e087      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	019b      	lsls	r3, r3, #6
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	3b01      	subs	r3, #1
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	491b      	ldr	r1, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_RCC_OscConfig+0x478>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fe fa7f 	bl	80035a0 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fe fa7b 	bl	80035a0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e05c      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x416>
 80050c4:	e054      	b.n	8005170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCC_OscConfig+0x478>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fe fa68 	bl	80035a0 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fe fa64 	bl	80035a0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e045      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_RCC_OscConfig+0x470>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x444>
 80050f2:	e03d      	b.n	8005170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e038      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
 8005108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4ec>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d028      	beq.n	800516c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d121      	bne.n	800516c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d11a      	bne.n	800516c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005144:	4293      	cmp	r3, r2
 8005146:	d111      	bne.n	800516c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	3b01      	subs	r3, #1
 8005156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0cc      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b68      	ldr	r3, [pc, #416]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90c      	bls.n	80051bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b65      	ldr	r3, [pc, #404]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b63      	ldr	r3, [pc, #396]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0b8      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d4:	4b59      	ldr	r3, [pc, #356]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a58      	ldr	r2, [pc, #352]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ec:	4b53      	ldr	r3, [pc, #332]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a52      	ldr	r2, [pc, #328]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f8:	4b50      	ldr	r3, [pc, #320]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	494d      	ldr	r1, [pc, #308]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d044      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	4b47      	ldr	r3, [pc, #284]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d119      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e07f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d003      	beq.n	800523e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523a:	2b03      	cmp	r3, #3
 800523c:	d107      	bne.n	800524e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524e:	4b3b      	ldr	r3, [pc, #236]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e067      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525e:	4b37      	ldr	r3, [pc, #220]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4934      	ldr	r1, [pc, #208]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005270:	f7fe f996 	bl	80035a0 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	e00a      	b.n	800528e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005278:	f7fe f992 	bl	80035a0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e04f      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	4b2b      	ldr	r3, [pc, #172]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 020c 	and.w	r2, r3, #12
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	429a      	cmp	r2, r3
 800529e:	d1eb      	bne.n	8005278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d20c      	bcs.n	80052c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b22      	ldr	r3, [pc, #136]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b20      	ldr	r3, [pc, #128]	; (8005338 <HAL_RCC_ClockConfig+0x1b8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e032      	b.n	800532e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4916      	ldr	r1, [pc, #88]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	490e      	ldr	r1, [pc, #56]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005306:	f000 f821 	bl	800534c <HAL_RCC_GetSysClockFreq>
 800530a:	4602      	mov	r2, r0
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	490a      	ldr	r1, [pc, #40]	; (8005340 <HAL_RCC_ClockConfig+0x1c0>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe f8f6 	bl	8003518 <HAL_InitTick>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023c00 	.word	0x40023c00
 800533c:	40023800 	.word	0x40023800
 8005340:	0800a74c 	.word	0x0800a74c
 8005344:	20000008 	.word	0x20000008
 8005348:	2000000c 	.word	0x2000000c

0800534c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b094      	sub	sp, #80	; 0x50
 8005352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
 8005358:	2300      	movs	r3, #0
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535c:	2300      	movs	r3, #0
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005364:	4b79      	ldr	r3, [pc, #484]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b08      	cmp	r3, #8
 800536e:	d00d      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x40>
 8005370:	2b08      	cmp	r3, #8
 8005372:	f200 80e1 	bhi.w	8005538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x34>
 800537a:	2b04      	cmp	r3, #4
 800537c:	d003      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x3a>
 800537e:	e0db      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCC_GetSysClockFreq+0x204>)
 8005382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005384:	e0db      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005386:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_GetSysClockFreq+0x208>)
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e0d8      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005396:	4b6d      	ldr	r3, [pc, #436]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d063      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a2:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	2200      	movs	r2, #0
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
 80053b6:	2300      	movs	r3, #0
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	0159      	lsls	r1, r3, #5
 80053cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d0:	0150      	lsls	r0, r2, #5
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4621      	mov	r1, r4
 80053d8:	1a51      	subs	r1, r2, r1
 80053da:	6139      	str	r1, [r7, #16]
 80053dc:	4629      	mov	r1, r5
 80053de:	eb63 0301 	sbc.w	r3, r3, r1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053f0:	4659      	mov	r1, fp
 80053f2:	018b      	lsls	r3, r1, #6
 80053f4:	4651      	mov	r1, sl
 80053f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fa:	4651      	mov	r1, sl
 80053fc:	018a      	lsls	r2, r1, #6
 80053fe:	4651      	mov	r1, sl
 8005400:	ebb2 0801 	subs.w	r8, r2, r1
 8005404:	4659      	mov	r1, fp
 8005406:	eb63 0901 	sbc.w	r9, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	4623      	mov	r3, r4
 8005424:	eb18 0303 	adds.w	r3, r8, r3
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	462b      	mov	r3, r5
 800542c:	eb49 0303 	adc.w	r3, r9, r3
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543e:	4629      	mov	r1, r5
 8005440:	024b      	lsls	r3, r1, #9
 8005442:	4621      	mov	r1, r4
 8005444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005448:	4621      	mov	r1, r4
 800544a:	024a      	lsls	r2, r1, #9
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005452:	2200      	movs	r2, #0
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
 8005456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800545c:	f7fb fc6c 	bl	8000d38 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4613      	mov	r3, r2
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	e058      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546a:	4b38      	ldr	r3, [pc, #224]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	099b      	lsrs	r3, r3, #6
 8005470:	2200      	movs	r2, #0
 8005472:	4618      	mov	r0, r3
 8005474:	4611      	mov	r1, r2
 8005476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	0159      	lsls	r1, r3, #5
 8005492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005496:	0150      	lsls	r0, r2, #5
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4641      	mov	r1, r8
 800549e:	ebb2 0a01 	subs.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054bc:	ebb2 040a 	subs.w	r4, r2, sl
 80054c0:	eb63 050b 	sbc.w	r5, r3, fp
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	464b      	mov	r3, r9
 80054e0:	eb45 0303 	adc.w	r3, r5, r3
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f2:	4629      	mov	r1, r5
 80054f4:	028b      	lsls	r3, r1, #10
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054fc:	4621      	mov	r1, r4
 80054fe:	028a      	lsls	r2, r1, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	2200      	movs	r2, #0
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	61fa      	str	r2, [r7, #28]
 800550c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005510:	f7fb fc12 	bl	8000d38 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4613      	mov	r3, r2
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	3301      	adds	r3, #1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800552c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005536:	e002      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCC_GetSysClockFreq+0x204>)
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005540:	4618      	mov	r0, r3
 8005542:	3750      	adds	r7, #80	; 0x50
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	40023800 	.word	0x40023800
 8005550:	00f42400 	.word	0x00f42400
 8005554:	007a1200 	.word	0x007a1200

08005558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCC_GetHCLKFreq+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000008 	.word	0x20000008

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005574:	f7ff fff0 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0a9b      	lsrs	r3, r3, #10
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4903      	ldr	r1, [pc, #12]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	0800a75c 	.word	0x0800a75c

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000014 	.word	0x20000014

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	; (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	; (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x44>)
 80055b8:	f004 fc96 	bl	8009ee8 <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	0800ac14 	.word	0x0800ac14
 80055e0:	0800ac14 	.word	0x0800ac14
 80055e4:	0800ac14 	.word	0x0800ac14
 80055e8:	0800ac18 	.word	0x0800ac18

080055ec <malloc>:
 80055ec:	4b02      	ldr	r3, [pc, #8]	; (80055f8 <malloc+0xc>)
 80055ee:	4601      	mov	r1, r0
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	f000 b88d 	b.w	8005710 <_malloc_r>
 80055f6:	bf00      	nop
 80055f8:	20000014 	.word	0x20000014

080055fc <free>:
 80055fc:	4b02      	ldr	r3, [pc, #8]	; (8005608 <free+0xc>)
 80055fe:	4601      	mov	r1, r0
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f000 b819 	b.w	8005638 <_free_r>
 8005606:	bf00      	nop
 8005608:	20000014 	.word	0x20000014

0800560c <memcpy>:
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	f100 33ff 	add.w	r3, r0, #4294967295
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	4770      	bx	lr
 8005618:	b510      	push	{r4, lr}
 800561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005622:	4291      	cmp	r1, r2
 8005624:	d1f9      	bne.n	800561a <memcpy+0xe>
 8005626:	bd10      	pop	{r4, pc}

08005628 <memset>:
 8005628:	4402      	add	r2, r0
 800562a:	4603      	mov	r3, r0
 800562c:	4293      	cmp	r3, r2
 800562e:	d100      	bne.n	8005632 <memset+0xa>
 8005630:	4770      	bx	lr
 8005632:	f803 1b01 	strb.w	r1, [r3], #1
 8005636:	e7f9      	b.n	800562c <memset+0x4>

08005638 <_free_r>:
 8005638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800563a:	2900      	cmp	r1, #0
 800563c:	d044      	beq.n	80056c8 <_free_r+0x90>
 800563e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005642:	9001      	str	r0, [sp, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f1a1 0404 	sub.w	r4, r1, #4
 800564a:	bfb8      	it	lt
 800564c:	18e4      	addlt	r4, r4, r3
 800564e:	f003 f82f 	bl	80086b0 <__malloc_lock>
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <_free_r+0x94>)
 8005654:	9801      	ldr	r0, [sp, #4]
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	b933      	cbnz	r3, 8005668 <_free_r+0x30>
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	6014      	str	r4, [r2, #0]
 800565e:	b003      	add	sp, #12
 8005660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005664:	f003 b82a 	b.w	80086bc <__malloc_unlock>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x46>
 800566c:	6825      	ldr	r5, [r4, #0]
 800566e:	1961      	adds	r1, r4, r5
 8005670:	428b      	cmp	r3, r1
 8005672:	bf01      	itttt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	1949      	addeq	r1, r1, r5
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	e7ed      	b.n	800565a <_free_r+0x22>
 800567e:	461a      	mov	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	b10b      	cbz	r3, 8005688 <_free_r+0x50>
 8005684:	42a3      	cmp	r3, r4
 8005686:	d9fa      	bls.n	800567e <_free_r+0x46>
 8005688:	6811      	ldr	r1, [r2, #0]
 800568a:	1855      	adds	r5, r2, r1
 800568c:	42a5      	cmp	r5, r4
 800568e:	d10b      	bne.n	80056a8 <_free_r+0x70>
 8005690:	6824      	ldr	r4, [r4, #0]
 8005692:	4421      	add	r1, r4
 8005694:	1854      	adds	r4, r2, r1
 8005696:	42a3      	cmp	r3, r4
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	d1e0      	bne.n	800565e <_free_r+0x26>
 800569c:	681c      	ldr	r4, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	6053      	str	r3, [r2, #4]
 80056a2:	4421      	add	r1, r4
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	e7da      	b.n	800565e <_free_r+0x26>
 80056a8:	d902      	bls.n	80056b0 <_free_r+0x78>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6003      	str	r3, [r0, #0]
 80056ae:	e7d6      	b.n	800565e <_free_r+0x26>
 80056b0:	6825      	ldr	r5, [r4, #0]
 80056b2:	1961      	adds	r1, r4, r5
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf04      	itt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	bf04      	itt	eq
 80056c0:	1949      	addeq	r1, r1, r5
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	6054      	str	r4, [r2, #4]
 80056c6:	e7ca      	b.n	800565e <_free_r+0x26>
 80056c8:	b003      	add	sp, #12
 80056ca:	bd30      	pop	{r4, r5, pc}
 80056cc:	20000760 	.word	0x20000760

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0e      	ldr	r6, [pc, #56]	; (800570c <sbrk_aligned+0x3c>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 ff06 	bl	80064ec <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 ff01 	bl	80064ec <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d00a      	beq.n	8005704 <sbrk_aligned+0x34>
 80056ee:	1cc4      	adds	r4, r0, #3
 80056f0:	f024 0403 	bic.w	r4, r4, #3
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d007      	beq.n	8005708 <sbrk_aligned+0x38>
 80056f8:	1a21      	subs	r1, r4, r0
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fef6 	bl	80064ec <_sbrk_r>
 8005700:	3001      	adds	r0, #1
 8005702:	d101      	bne.n	8005708 <sbrk_aligned+0x38>
 8005704:	f04f 34ff 	mov.w	r4, #4294967295
 8005708:	4620      	mov	r0, r4
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	20000764 	.word	0x20000764

08005710 <_malloc_r>:
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	1ccd      	adds	r5, r1, #3
 8005716:	f025 0503 	bic.w	r5, r5, #3
 800571a:	3508      	adds	r5, #8
 800571c:	2d0c      	cmp	r5, #12
 800571e:	bf38      	it	cc
 8005720:	250c      	movcc	r5, #12
 8005722:	2d00      	cmp	r5, #0
 8005724:	4607      	mov	r7, r0
 8005726:	db01      	blt.n	800572c <_malloc_r+0x1c>
 8005728:	42a9      	cmp	r1, r5
 800572a:	d905      	bls.n	8005738 <_malloc_r+0x28>
 800572c:	230c      	movs	r3, #12
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	2600      	movs	r6, #0
 8005732:	4630      	mov	r0, r6
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	4e2e      	ldr	r6, [pc, #184]	; (80057f4 <_malloc_r+0xe4>)
 800573a:	f002 ffb9 	bl	80086b0 <__malloc_lock>
 800573e:	6833      	ldr	r3, [r6, #0]
 8005740:	461c      	mov	r4, r3
 8005742:	bb34      	cbnz	r4, 8005792 <_malloc_r+0x82>
 8005744:	4629      	mov	r1, r5
 8005746:	4638      	mov	r0, r7
 8005748:	f7ff ffc2 	bl	80056d0 <sbrk_aligned>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	4604      	mov	r4, r0
 8005750:	d14d      	bne.n	80057ee <_malloc_r+0xde>
 8005752:	6834      	ldr	r4, [r6, #0]
 8005754:	4626      	mov	r6, r4
 8005756:	2e00      	cmp	r6, #0
 8005758:	d140      	bne.n	80057dc <_malloc_r+0xcc>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4631      	mov	r1, r6
 800575e:	4638      	mov	r0, r7
 8005760:	eb04 0803 	add.w	r8, r4, r3
 8005764:	f000 fec2 	bl	80064ec <_sbrk_r>
 8005768:	4580      	cmp	r8, r0
 800576a:	d13a      	bne.n	80057e2 <_malloc_r+0xd2>
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	3503      	adds	r5, #3
 8005770:	1a6d      	subs	r5, r5, r1
 8005772:	f025 0503 	bic.w	r5, r5, #3
 8005776:	3508      	adds	r5, #8
 8005778:	2d0c      	cmp	r5, #12
 800577a:	bf38      	it	cc
 800577c:	250c      	movcc	r5, #12
 800577e:	4629      	mov	r1, r5
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ffa5 	bl	80056d0 <sbrk_aligned>
 8005786:	3001      	adds	r0, #1
 8005788:	d02b      	beq.n	80057e2 <_malloc_r+0xd2>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	442b      	add	r3, r5
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	e00e      	b.n	80057b0 <_malloc_r+0xa0>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	1b52      	subs	r2, r2, r5
 8005796:	d41e      	bmi.n	80057d6 <_malloc_r+0xc6>
 8005798:	2a0b      	cmp	r2, #11
 800579a:	d916      	bls.n	80057ca <_malloc_r+0xba>
 800579c:	1961      	adds	r1, r4, r5
 800579e:	42a3      	cmp	r3, r4
 80057a0:	6025      	str	r5, [r4, #0]
 80057a2:	bf18      	it	ne
 80057a4:	6059      	strne	r1, [r3, #4]
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	bf08      	it	eq
 80057aa:	6031      	streq	r1, [r6, #0]
 80057ac:	5162      	str	r2, [r4, r5]
 80057ae:	604b      	str	r3, [r1, #4]
 80057b0:	4638      	mov	r0, r7
 80057b2:	f104 060b 	add.w	r6, r4, #11
 80057b6:	f002 ff81 	bl	80086bc <__malloc_unlock>
 80057ba:	f026 0607 	bic.w	r6, r6, #7
 80057be:	1d23      	adds	r3, r4, #4
 80057c0:	1af2      	subs	r2, r6, r3
 80057c2:	d0b6      	beq.n	8005732 <_malloc_r+0x22>
 80057c4:	1b9b      	subs	r3, r3, r6
 80057c6:	50a3      	str	r3, [r4, r2]
 80057c8:	e7b3      	b.n	8005732 <_malloc_r+0x22>
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	bf0c      	ite	eq
 80057d0:	6032      	streq	r2, [r6, #0]
 80057d2:	605a      	strne	r2, [r3, #4]
 80057d4:	e7ec      	b.n	80057b0 <_malloc_r+0xa0>
 80057d6:	4623      	mov	r3, r4
 80057d8:	6864      	ldr	r4, [r4, #4]
 80057da:	e7b2      	b.n	8005742 <_malloc_r+0x32>
 80057dc:	4634      	mov	r4, r6
 80057de:	6876      	ldr	r6, [r6, #4]
 80057e0:	e7b9      	b.n	8005756 <_malloc_r+0x46>
 80057e2:	230c      	movs	r3, #12
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4638      	mov	r0, r7
 80057e8:	f002 ff68 	bl	80086bc <__malloc_unlock>
 80057ec:	e7a1      	b.n	8005732 <_malloc_r+0x22>
 80057ee:	6025      	str	r5, [r4, #0]
 80057f0:	e7de      	b.n	80057b0 <_malloc_r+0xa0>
 80057f2:	bf00      	nop
 80057f4:	20000760 	.word	0x20000760

080057f8 <__cvt>:
 80057f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	ec55 4b10 	vmov	r4, r5, d0
 8005800:	2d00      	cmp	r5, #0
 8005802:	460e      	mov	r6, r1
 8005804:	4619      	mov	r1, r3
 8005806:	462b      	mov	r3, r5
 8005808:	bfbb      	ittet	lt
 800580a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800580e:	461d      	movlt	r5, r3
 8005810:	2300      	movge	r3, #0
 8005812:	232d      	movlt	r3, #45	; 0x2d
 8005814:	700b      	strb	r3, [r1, #0]
 8005816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800581c:	4691      	mov	r9, r2
 800581e:	f023 0820 	bic.w	r8, r3, #32
 8005822:	bfbc      	itt	lt
 8005824:	4622      	movlt	r2, r4
 8005826:	4614      	movlt	r4, r2
 8005828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582c:	d005      	beq.n	800583a <__cvt+0x42>
 800582e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005832:	d100      	bne.n	8005836 <__cvt+0x3e>
 8005834:	3601      	adds	r6, #1
 8005836:	2102      	movs	r1, #2
 8005838:	e000      	b.n	800583c <__cvt+0x44>
 800583a:	2103      	movs	r1, #3
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	ab02      	add	r3, sp, #8
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	ec45 4b10 	vmov	d0, r4, r5
 8005848:	4653      	mov	r3, sl
 800584a:	4632      	mov	r2, r6
 800584c:	f001 fdbc 	bl	80073c8 <_dtoa_r>
 8005850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005854:	4607      	mov	r7, r0
 8005856:	d102      	bne.n	800585e <__cvt+0x66>
 8005858:	f019 0f01 	tst.w	r9, #1
 800585c:	d022      	beq.n	80058a4 <__cvt+0xac>
 800585e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005862:	eb07 0906 	add.w	r9, r7, r6
 8005866:	d110      	bne.n	800588a <__cvt+0x92>
 8005868:	783b      	ldrb	r3, [r7, #0]
 800586a:	2b30      	cmp	r3, #48	; 0x30
 800586c:	d10a      	bne.n	8005884 <__cvt+0x8c>
 800586e:	2200      	movs	r2, #0
 8005870:	2300      	movs	r3, #0
 8005872:	4620      	mov	r0, r4
 8005874:	4629      	mov	r1, r5
 8005876:	f7fb f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800587a:	b918      	cbnz	r0, 8005884 <__cvt+0x8c>
 800587c:	f1c6 0601 	rsb	r6, r6, #1
 8005880:	f8ca 6000 	str.w	r6, [sl]
 8005884:	f8da 3000 	ldr.w	r3, [sl]
 8005888:	4499      	add	r9, r3
 800588a:	2200      	movs	r2, #0
 800588c:	2300      	movs	r3, #0
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fb f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8005896:	b108      	cbz	r0, 800589c <__cvt+0xa4>
 8005898:	f8cd 900c 	str.w	r9, [sp, #12]
 800589c:	2230      	movs	r2, #48	; 0x30
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	454b      	cmp	r3, r9
 80058a2:	d307      	bcc.n	80058b4 <__cvt+0xbc>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a8:	1bdb      	subs	r3, r3, r7
 80058aa:	4638      	mov	r0, r7
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	b004      	add	sp, #16
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	9103      	str	r1, [sp, #12]
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e7f0      	b.n	800589e <__cvt+0xa6>

080058bc <__exponent>:
 80058bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058be:	4603      	mov	r3, r0
 80058c0:	2900      	cmp	r1, #0
 80058c2:	bfb8      	it	lt
 80058c4:	4249      	neglt	r1, r1
 80058c6:	f803 2b02 	strb.w	r2, [r3], #2
 80058ca:	bfb4      	ite	lt
 80058cc:	222d      	movlt	r2, #45	; 0x2d
 80058ce:	222b      	movge	r2, #43	; 0x2b
 80058d0:	2909      	cmp	r1, #9
 80058d2:	7042      	strb	r2, [r0, #1]
 80058d4:	dd2a      	ble.n	800592c <__exponent+0x70>
 80058d6:	f10d 0407 	add.w	r4, sp, #7
 80058da:	46a4      	mov	ip, r4
 80058dc:	270a      	movs	r7, #10
 80058de:	46a6      	mov	lr, r4
 80058e0:	460a      	mov	r2, r1
 80058e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80058e6:	fb07 1516 	mls	r5, r7, r6, r1
 80058ea:	3530      	adds	r5, #48	; 0x30
 80058ec:	2a63      	cmp	r2, #99	; 0x63
 80058ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80058f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058f6:	4631      	mov	r1, r6
 80058f8:	dcf1      	bgt.n	80058de <__exponent+0x22>
 80058fa:	3130      	adds	r1, #48	; 0x30
 80058fc:	f1ae 0502 	sub.w	r5, lr, #2
 8005900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005904:	1c44      	adds	r4, r0, #1
 8005906:	4629      	mov	r1, r5
 8005908:	4561      	cmp	r1, ip
 800590a:	d30a      	bcc.n	8005922 <__exponent+0x66>
 800590c:	f10d 0209 	add.w	r2, sp, #9
 8005910:	eba2 020e 	sub.w	r2, r2, lr
 8005914:	4565      	cmp	r5, ip
 8005916:	bf88      	it	hi
 8005918:	2200      	movhi	r2, #0
 800591a:	4413      	add	r3, r2
 800591c:	1a18      	subs	r0, r3, r0
 800591e:	b003      	add	sp, #12
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005926:	f804 2f01 	strb.w	r2, [r4, #1]!
 800592a:	e7ed      	b.n	8005908 <__exponent+0x4c>
 800592c:	2330      	movs	r3, #48	; 0x30
 800592e:	3130      	adds	r1, #48	; 0x30
 8005930:	7083      	strb	r3, [r0, #2]
 8005932:	70c1      	strb	r1, [r0, #3]
 8005934:	1d03      	adds	r3, r0, #4
 8005936:	e7f1      	b.n	800591c <__exponent+0x60>

08005938 <_printf_float>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	ed2d 8b02 	vpush	{d8}
 8005940:	b08d      	sub	sp, #52	; 0x34
 8005942:	460c      	mov	r4, r1
 8005944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005948:	4616      	mov	r6, r2
 800594a:	461f      	mov	r7, r3
 800594c:	4605      	mov	r5, r0
 800594e:	f002 fe99 	bl	8008684 <_localeconv_r>
 8005952:	f8d0 a000 	ldr.w	sl, [r0]
 8005956:	4650      	mov	r0, sl
 8005958:	f7fa fc42 	bl	80001e0 <strlen>
 800595c:	2300      	movs	r3, #0
 800595e:	930a      	str	r3, [sp, #40]	; 0x28
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f8d8 3000 	ldr.w	r3, [r8]
 8005968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800596c:	3307      	adds	r3, #7
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	f103 0208 	add.w	r2, r3, #8
 8005976:	f8c8 2000 	str.w	r2, [r8]
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800598a:	9307      	str	r3, [sp, #28]
 800598c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005990:	ee08 0a10 	vmov	s16, r0
 8005994:	4b9f      	ldr	r3, [pc, #636]	; (8005c14 <_printf_float+0x2dc>)
 8005996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800599a:	f04f 32ff 	mov.w	r2, #4294967295
 800599e:	f7fb f8cd 	bl	8000b3c <__aeabi_dcmpun>
 80059a2:	bb88      	cbnz	r0, 8005a08 <_printf_float+0xd0>
 80059a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a8:	4b9a      	ldr	r3, [pc, #616]	; (8005c14 <_printf_float+0x2dc>)
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	f7fb f8a7 	bl	8000b00 <__aeabi_dcmple>
 80059b2:	bb48      	cbnz	r0, 8005a08 <_printf_float+0xd0>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fb f896 	bl	8000aec <__aeabi_dcmplt>
 80059c0:	b110      	cbz	r0, 80059c8 <_printf_float+0x90>
 80059c2:	232d      	movs	r3, #45	; 0x2d
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c8:	4b93      	ldr	r3, [pc, #588]	; (8005c18 <_printf_float+0x2e0>)
 80059ca:	4894      	ldr	r0, [pc, #592]	; (8005c1c <_printf_float+0x2e4>)
 80059cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059d0:	bf94      	ite	ls
 80059d2:	4698      	movls	r8, r3
 80059d4:	4680      	movhi	r8, r0
 80059d6:	2303      	movs	r3, #3
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	9b05      	ldr	r3, [sp, #20]
 80059dc:	f023 0204 	bic.w	r2, r3, #4
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	f04f 0900 	mov.w	r9, #0
 80059e6:	9700      	str	r7, [sp, #0]
 80059e8:	4633      	mov	r3, r6
 80059ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80059ec:	4621      	mov	r1, r4
 80059ee:	4628      	mov	r0, r5
 80059f0:	f000 f9d8 	bl	8005da4 <_printf_common>
 80059f4:	3001      	adds	r0, #1
 80059f6:	f040 8090 	bne.w	8005b1a <_printf_float+0x1e2>
 80059fa:	f04f 30ff 	mov.w	r0, #4294967295
 80059fe:	b00d      	add	sp, #52	; 0x34
 8005a00:	ecbd 8b02 	vpop	{d8}
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fb f894 	bl	8000b3c <__aeabi_dcmpun>
 8005a14:	b140      	cbz	r0, 8005a28 <_printf_float+0xf0>
 8005a16:	464b      	mov	r3, r9
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfbc      	itt	lt
 8005a1c:	232d      	movlt	r3, #45	; 0x2d
 8005a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a22:	487f      	ldr	r0, [pc, #508]	; (8005c20 <_printf_float+0x2e8>)
 8005a24:	4b7f      	ldr	r3, [pc, #508]	; (8005c24 <_printf_float+0x2ec>)
 8005a26:	e7d1      	b.n	80059cc <_printf_float+0x94>
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a2e:	9206      	str	r2, [sp, #24]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	d13f      	bne.n	8005ab4 <_printf_float+0x17c>
 8005a34:	2306      	movs	r3, #6
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	9b05      	ldr	r3, [sp, #20]
 8005a3a:	6861      	ldr	r1, [r4, #4]
 8005a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a40:	2300      	movs	r3, #0
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	ab0a      	add	r3, sp, #40	; 0x28
 8005a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a4a:	ab09      	add	r3, sp, #36	; 0x24
 8005a4c:	ec49 8b10 	vmov	d0, r8, r9
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f7ff fecd 	bl	80057f8 <__cvt>
 8005a5e:	9b06      	ldr	r3, [sp, #24]
 8005a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a62:	2b47      	cmp	r3, #71	; 0x47
 8005a64:	4680      	mov	r8, r0
 8005a66:	d108      	bne.n	8005a7a <_printf_float+0x142>
 8005a68:	1cc8      	adds	r0, r1, #3
 8005a6a:	db02      	blt.n	8005a72 <_printf_float+0x13a>
 8005a6c:	6863      	ldr	r3, [r4, #4]
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	dd41      	ble.n	8005af6 <_printf_float+0x1be>
 8005a72:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a76:	fa5f fb8b 	uxtb.w	fp, fp
 8005a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a7e:	d820      	bhi.n	8005ac2 <_printf_float+0x18a>
 8005a80:	3901      	subs	r1, #1
 8005a82:	465a      	mov	r2, fp
 8005a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a88:	9109      	str	r1, [sp, #36]	; 0x24
 8005a8a:	f7ff ff17 	bl	80058bc <__exponent>
 8005a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a90:	1813      	adds	r3, r2, r0
 8005a92:	2a01      	cmp	r2, #1
 8005a94:	4681      	mov	r9, r0
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	dc02      	bgt.n	8005aa0 <_printf_float+0x168>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d2      	lsls	r2, r2, #31
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_float+0x16c>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d09c      	beq.n	80059e6 <_printf_float+0xae>
 8005aac:	232d      	movs	r3, #45	; 0x2d
 8005aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab2:	e798      	b.n	80059e6 <_printf_float+0xae>
 8005ab4:	9a06      	ldr	r2, [sp, #24]
 8005ab6:	2a47      	cmp	r2, #71	; 0x47
 8005ab8:	d1be      	bne.n	8005a38 <_printf_float+0x100>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1bc      	bne.n	8005a38 <_printf_float+0x100>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7b9      	b.n	8005a36 <_printf_float+0xfe>
 8005ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ac6:	d118      	bne.n	8005afa <_printf_float+0x1c2>
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	dd0b      	ble.n	8005ae6 <_printf_float+0x1ae>
 8005ace:	6121      	str	r1, [r4, #16]
 8005ad0:	b913      	cbnz	r3, 8005ad8 <_printf_float+0x1a0>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	07d0      	lsls	r0, r2, #31
 8005ad6:	d502      	bpl.n	8005ade <_printf_float+0x1a6>
 8005ad8:	3301      	adds	r3, #1
 8005ada:	440b      	add	r3, r1
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ae0:	f04f 0900 	mov.w	r9, #0
 8005ae4:	e7de      	b.n	8005aa4 <_printf_float+0x16c>
 8005ae6:	b913      	cbnz	r3, 8005aee <_printf_float+0x1b6>
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	07d2      	lsls	r2, r2, #31
 8005aec:	d501      	bpl.n	8005af2 <_printf_float+0x1ba>
 8005aee:	3302      	adds	r3, #2
 8005af0:	e7f4      	b.n	8005adc <_printf_float+0x1a4>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e7f2      	b.n	8005adc <_printf_float+0x1a4>
 8005af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afc:	4299      	cmp	r1, r3
 8005afe:	db05      	blt.n	8005b0c <_printf_float+0x1d4>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	6121      	str	r1, [r4, #16]
 8005b04:	07d8      	lsls	r0, r3, #31
 8005b06:	d5ea      	bpl.n	8005ade <_printf_float+0x1a6>
 8005b08:	1c4b      	adds	r3, r1, #1
 8005b0a:	e7e7      	b.n	8005adc <_printf_float+0x1a4>
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	bfd4      	ite	le
 8005b10:	f1c1 0202 	rsble	r2, r1, #2
 8005b14:	2201      	movgt	r2, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	e7e0      	b.n	8005adc <_printf_float+0x1a4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	055a      	lsls	r2, r3, #21
 8005b1e:	d407      	bmi.n	8005b30 <_printf_float+0x1f8>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	4642      	mov	r2, r8
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d12c      	bne.n	8005b88 <_printf_float+0x250>
 8005b2e:	e764      	b.n	80059fa <_printf_float+0xc2>
 8005b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b34:	f240 80e0 	bls.w	8005cf8 <_printf_float+0x3c0>
 8005b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f7fa ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d034      	beq.n	8005bb2 <_printf_float+0x27a>
 8005b48:	4a37      	ldr	r2, [pc, #220]	; (8005c28 <_printf_float+0x2f0>)
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af51 	beq.w	80059fa <_printf_float+0xc2>
 8005b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	db02      	blt.n	8005b66 <_printf_float+0x22e>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	07d8      	lsls	r0, r3, #31
 8005b64:	d510      	bpl.n	8005b88 <_printf_float+0x250>
 8005b66:	ee18 3a10 	vmov	r3, s16
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af41 	beq.w	80059fa <_printf_float+0xc2>
 8005b78:	f04f 0800 	mov.w	r8, #0
 8005b7c:	f104 091a 	add.w	r9, r4, #26
 8005b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4543      	cmp	r3, r8
 8005b86:	dc09      	bgt.n	8005b9c <_printf_float+0x264>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	079b      	lsls	r3, r3, #30
 8005b8c:	f100 8105 	bmi.w	8005d9a <_printf_float+0x462>
 8005b90:	68e0      	ldr	r0, [r4, #12]
 8005b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b94:	4298      	cmp	r0, r3
 8005b96:	bfb8      	it	lt
 8005b98:	4618      	movlt	r0, r3
 8005b9a:	e730      	b.n	80059fe <_printf_float+0xc6>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	464a      	mov	r2, r9
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f af27 	beq.w	80059fa <_printf_float+0xc2>
 8005bac:	f108 0801 	add.w	r8, r8, #1
 8005bb0:	e7e6      	b.n	8005b80 <_printf_float+0x248>
 8005bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dc39      	bgt.n	8005c2c <_printf_float+0x2f4>
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <_printf_float+0x2f0>)
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f af19 	beq.w	80059fa <_printf_float+0xc2>
 8005bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	d102      	bne.n	8005bd6 <_printf_float+0x29e>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07d9      	lsls	r1, r3, #31
 8005bd4:	d5d8      	bpl.n	8005b88 <_printf_float+0x250>
 8005bd6:	ee18 3a10 	vmov	r3, s16
 8005bda:	4652      	mov	r2, sl
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af09 	beq.w	80059fa <_printf_float+0xc2>
 8005be8:	f04f 0900 	mov.w	r9, #0
 8005bec:	f104 0a1a 	add.w	sl, r4, #26
 8005bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf2:	425b      	negs	r3, r3
 8005bf4:	454b      	cmp	r3, r9
 8005bf6:	dc01      	bgt.n	8005bfc <_printf_float+0x2c4>
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfa:	e792      	b.n	8005b22 <_printf_float+0x1ea>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4652      	mov	r2, sl
 8005c00:	4631      	mov	r1, r6
 8005c02:	4628      	mov	r0, r5
 8005c04:	47b8      	blx	r7
 8005c06:	3001      	adds	r0, #1
 8005c08:	f43f aef7 	beq.w	80059fa <_printf_float+0xc2>
 8005c0c:	f109 0901 	add.w	r9, r9, #1
 8005c10:	e7ee      	b.n	8005bf0 <_printf_float+0x2b8>
 8005c12:	bf00      	nop
 8005c14:	7fefffff 	.word	0x7fefffff
 8005c18:	0800a768 	.word	0x0800a768
 8005c1c:	0800a76c 	.word	0x0800a76c
 8005c20:	0800a774 	.word	0x0800a774
 8005c24:	0800a770 	.word	0x0800a770
 8005c28:	0800a778 	.word	0x0800a778
 8005c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bfa8      	it	ge
 8005c34:	461a      	movge	r2, r3
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	4691      	mov	r9, r2
 8005c3a:	dc37      	bgt.n	8005cac <_printf_float+0x374>
 8005c3c:	f04f 0b00 	mov.w	fp, #0
 8005c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c44:	f104 021a 	add.w	r2, r4, #26
 8005c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c4a:	9305      	str	r3, [sp, #20]
 8005c4c:	eba3 0309 	sub.w	r3, r3, r9
 8005c50:	455b      	cmp	r3, fp
 8005c52:	dc33      	bgt.n	8005cbc <_printf_float+0x384>
 8005c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	db3b      	blt.n	8005cd4 <_printf_float+0x39c>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	07da      	lsls	r2, r3, #31
 8005c60:	d438      	bmi.n	8005cd4 <_printf_float+0x39c>
 8005c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c64:	9a05      	ldr	r2, [sp, #20]
 8005c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c68:	1a9a      	subs	r2, r3, r2
 8005c6a:	eba3 0901 	sub.w	r9, r3, r1
 8005c6e:	4591      	cmp	r9, r2
 8005c70:	bfa8      	it	ge
 8005c72:	4691      	movge	r9, r2
 8005c74:	f1b9 0f00 	cmp.w	r9, #0
 8005c78:	dc35      	bgt.n	8005ce6 <_printf_float+0x3ae>
 8005c7a:	f04f 0800 	mov.w	r8, #0
 8005c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c82:	f104 0a1a 	add.w	sl, r4, #26
 8005c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	eba3 0309 	sub.w	r3, r3, r9
 8005c90:	4543      	cmp	r3, r8
 8005c92:	f77f af79 	ble.w	8005b88 <_printf_float+0x250>
 8005c96:	2301      	movs	r3, #1
 8005c98:	4652      	mov	r2, sl
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f aeaa 	beq.w	80059fa <_printf_float+0xc2>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	e7ec      	b.n	8005c86 <_printf_float+0x34e>
 8005cac:	4613      	mov	r3, r2
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d1c0      	bne.n	8005c3c <_printf_float+0x304>
 8005cba:	e69e      	b.n	80059fa <_printf_float+0xc2>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	9205      	str	r2, [sp, #20]
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f ae97 	beq.w	80059fa <_printf_float+0xc2>
 8005ccc:	9a05      	ldr	r2, [sp, #20]
 8005cce:	f10b 0b01 	add.w	fp, fp, #1
 8005cd2:	e7b9      	b.n	8005c48 <_printf_float+0x310>
 8005cd4:	ee18 3a10 	vmov	r3, s16
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d1be      	bne.n	8005c62 <_printf_float+0x32a>
 8005ce4:	e689      	b.n	80059fa <_printf_float+0xc2>
 8005ce6:	9a05      	ldr	r2, [sp, #20]
 8005ce8:	464b      	mov	r3, r9
 8005cea:	4442      	add	r2, r8
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d1c1      	bne.n	8005c7a <_printf_float+0x342>
 8005cf6:	e680      	b.n	80059fa <_printf_float+0xc2>
 8005cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cfa:	2a01      	cmp	r2, #1
 8005cfc:	dc01      	bgt.n	8005d02 <_printf_float+0x3ca>
 8005cfe:	07db      	lsls	r3, r3, #31
 8005d00:	d538      	bpl.n	8005d74 <_printf_float+0x43c>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4642      	mov	r2, r8
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f43f ae74 	beq.w	80059fa <_printf_float+0xc2>
 8005d12:	ee18 3a10 	vmov	r3, s16
 8005d16:	4652      	mov	r2, sl
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f ae6b 	beq.w	80059fa <_printf_float+0xc2>
 8005d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f7fa fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d30:	b9d8      	cbnz	r0, 8005d6a <_printf_float+0x432>
 8005d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d34:	f108 0201 	add.w	r2, r8, #1
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	d10e      	bne.n	8005d62 <_printf_float+0x42a>
 8005d44:	e659      	b.n	80059fa <_printf_float+0xc2>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f ae52 	beq.w	80059fa <_printf_float+0xc2>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	4543      	cmp	r3, r8
 8005d60:	dcf1      	bgt.n	8005d46 <_printf_float+0x40e>
 8005d62:	464b      	mov	r3, r9
 8005d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d68:	e6dc      	b.n	8005b24 <_printf_float+0x1ec>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	f104 0a1a 	add.w	sl, r4, #26
 8005d72:	e7f2      	b.n	8005d5a <_printf_float+0x422>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4642      	mov	r2, r8
 8005d78:	e7df      	b.n	8005d3a <_printf_float+0x402>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	464a      	mov	r2, r9
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae38 	beq.w	80059fa <_printf_float+0xc2>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	4543      	cmp	r3, r8
 8005d96:	dcf0      	bgt.n	8005d7a <_printf_float+0x442>
 8005d98:	e6fa      	b.n	8005b90 <_printf_float+0x258>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	f104 0919 	add.w	r9, r4, #25
 8005da2:	e7f4      	b.n	8005d8e <_printf_float+0x456>

08005da4 <_printf_common>:
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	4616      	mov	r6, r2
 8005daa:	4699      	mov	r9, r3
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bfb8      	it	lt
 8005db8:	4613      	movlt	r3, r2
 8005dba:	6033      	str	r3, [r6, #0]
 8005dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b10a      	cbz	r2, 8005dca <_printf_common+0x26>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	0699      	lsls	r1, r3, #26
 8005dce:	bf42      	ittt	mi
 8005dd0:	6833      	ldrmi	r3, [r6, #0]
 8005dd2:	3302      	addmi	r3, #2
 8005dd4:	6033      	strmi	r3, [r6, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	f015 0506 	ands.w	r5, r5, #6
 8005ddc:	d106      	bne.n	8005dec <_printf_common+0x48>
 8005dde:	f104 0a19 	add.w	sl, r4, #25
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	6832      	ldr	r2, [r6, #0]
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc26      	bgt.n	8005e3a <_printf_common+0x96>
 8005dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005df0:	1e13      	subs	r3, r2, #0
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	bf18      	it	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	0692      	lsls	r2, r2, #26
 8005dfa:	d42b      	bmi.n	8005e54 <_printf_common+0xb0>
 8005dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e00:	4649      	mov	r1, r9
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d01e      	beq.n	8005e48 <_printf_common+0xa4>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	68e5      	ldr	r5, [r4, #12]
 8005e0e:	6832      	ldr	r2, [r6, #0]
 8005e10:	f003 0306 	and.w	r3, r3, #6
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	bf08      	it	eq
 8005e18:	1aad      	subeq	r5, r5, r2
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	6922      	ldr	r2, [r4, #16]
 8005e1e:	bf0c      	ite	eq
 8005e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e24:	2500      	movne	r5, #0
 8005e26:	4293      	cmp	r3, r2
 8005e28:	bfc4      	itt	gt
 8005e2a:	1a9b      	subgt	r3, r3, r2
 8005e2c:	18ed      	addgt	r5, r5, r3
 8005e2e:	2600      	movs	r6, #0
 8005e30:	341a      	adds	r4, #26
 8005e32:	42b5      	cmp	r5, r6
 8005e34:	d11a      	bne.n	8005e6c <_printf_common+0xc8>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e008      	b.n	8005e4c <_printf_common+0xa8>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4638      	mov	r0, r7
 8005e42:	47c0      	blx	r8
 8005e44:	3001      	adds	r0, #1
 8005e46:	d103      	bne.n	8005e50 <_printf_common+0xac>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	3501      	adds	r5, #1
 8005e52:	e7c6      	b.n	8005de2 <_printf_common+0x3e>
 8005e54:	18e1      	adds	r1, r4, r3
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	2030      	movs	r0, #48	; 0x30
 8005e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e5e:	4422      	add	r2, r4
 8005e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e68:	3302      	adds	r3, #2
 8005e6a:	e7c7      	b.n	8005dfc <_printf_common+0x58>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4649      	mov	r1, r9
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c0      	blx	r8
 8005e76:	3001      	adds	r0, #1
 8005e78:	d0e6      	beq.n	8005e48 <_printf_common+0xa4>
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7d9      	b.n	8005e32 <_printf_common+0x8e>
	...

08005e80 <_printf_i>:
 8005e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	7e0f      	ldrb	r7, [r1, #24]
 8005e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e88:	2f78      	cmp	r7, #120	; 0x78
 8005e8a:	4691      	mov	r9, r2
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	469a      	mov	sl, r3
 8005e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e96:	d807      	bhi.n	8005ea8 <_printf_i+0x28>
 8005e98:	2f62      	cmp	r7, #98	; 0x62
 8005e9a:	d80a      	bhi.n	8005eb2 <_printf_i+0x32>
 8005e9c:	2f00      	cmp	r7, #0
 8005e9e:	f000 80d8 	beq.w	8006052 <_printf_i+0x1d2>
 8005ea2:	2f58      	cmp	r7, #88	; 0x58
 8005ea4:	f000 80a3 	beq.w	8005fee <_printf_i+0x16e>
 8005ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eb0:	e03a      	b.n	8005f28 <_printf_i+0xa8>
 8005eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eb6:	2b15      	cmp	r3, #21
 8005eb8:	d8f6      	bhi.n	8005ea8 <_printf_i+0x28>
 8005eba:	a101      	add	r1, pc, #4	; (adr r1, 8005ec0 <_printf_i+0x40>)
 8005ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec0:	08005f19 	.word	0x08005f19
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005ea9 	.word	0x08005ea9
 8005ecc:	08005ea9 	.word	0x08005ea9
 8005ed0:	08005ea9 	.word	0x08005ea9
 8005ed4:	08005ea9 	.word	0x08005ea9
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005ea9 	.word	0x08005ea9
 8005ee0:	08005ea9 	.word	0x08005ea9
 8005ee4:	08005ea9 	.word	0x08005ea9
 8005ee8:	08005ea9 	.word	0x08005ea9
 8005eec:	08006039 	.word	0x08006039
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	0800601b 	.word	0x0800601b
 8005ef8:	08005ea9 	.word	0x08005ea9
 8005efc:	08005ea9 	.word	0x08005ea9
 8005f00:	0800605b 	.word	0x0800605b
 8005f04:	08005ea9 	.word	0x08005ea9
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	08005ea9 	.word	0x08005ea9
 8005f10:	08005ea9 	.word	0x08005ea9
 8005f14:	08006023 	.word	0x08006023
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0a3      	b.n	8006074 <_printf_i+0x1f4>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	6829      	ldr	r1, [r5, #0]
 8005f30:	0606      	lsls	r6, r0, #24
 8005f32:	f101 0304 	add.w	r3, r1, #4
 8005f36:	d50a      	bpl.n	8005f4e <_printf_i+0xce>
 8005f38:	680e      	ldr	r6, [r1, #0]
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	da03      	bge.n	8005f48 <_printf_i+0xc8>
 8005f40:	232d      	movs	r3, #45	; 0x2d
 8005f42:	4276      	negs	r6, r6
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f48:	485e      	ldr	r0, [pc, #376]	; (80060c4 <_printf_i+0x244>)
 8005f4a:	230a      	movs	r3, #10
 8005f4c:	e019      	b.n	8005f82 <_printf_i+0x102>
 8005f4e:	680e      	ldr	r6, [r1, #0]
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f56:	bf18      	it	ne
 8005f58:	b236      	sxthne	r6, r6
 8005f5a:	e7ef      	b.n	8005f3c <_printf_i+0xbc>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	1d19      	adds	r1, r3, #4
 8005f62:	6029      	str	r1, [r5, #0]
 8005f64:	0601      	lsls	r1, r0, #24
 8005f66:	d501      	bpl.n	8005f6c <_printf_i+0xec>
 8005f68:	681e      	ldr	r6, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <_printf_i+0xf2>
 8005f6c:	0646      	lsls	r6, r0, #25
 8005f6e:	d5fb      	bpl.n	8005f68 <_printf_i+0xe8>
 8005f70:	881e      	ldrh	r6, [r3, #0]
 8005f72:	4854      	ldr	r0, [pc, #336]	; (80060c4 <_printf_i+0x244>)
 8005f74:	2f6f      	cmp	r7, #111	; 0x6f
 8005f76:	bf0c      	ite	eq
 8005f78:	2308      	moveq	r3, #8
 8005f7a:	230a      	movne	r3, #10
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f82:	6865      	ldr	r5, [r4, #4]
 8005f84:	60a5      	str	r5, [r4, #8]
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	bfa2      	ittt	ge
 8005f8a:	6821      	ldrge	r1, [r4, #0]
 8005f8c:	f021 0104 	bicge.w	r1, r1, #4
 8005f90:	6021      	strge	r1, [r4, #0]
 8005f92:	b90e      	cbnz	r6, 8005f98 <_printf_i+0x118>
 8005f94:	2d00      	cmp	r5, #0
 8005f96:	d04d      	beq.n	8006034 <_printf_i+0x1b4>
 8005f98:	4615      	mov	r5, r2
 8005f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8005fa2:	5dc7      	ldrb	r7, [r0, r7]
 8005fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fa8:	4637      	mov	r7, r6
 8005faa:	42bb      	cmp	r3, r7
 8005fac:	460e      	mov	r6, r1
 8005fae:	d9f4      	bls.n	8005f9a <_printf_i+0x11a>
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d10b      	bne.n	8005fcc <_printf_i+0x14c>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	07de      	lsls	r6, r3, #31
 8005fb8:	d508      	bpl.n	8005fcc <_printf_i+0x14c>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	6861      	ldr	r1, [r4, #4]
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	bfde      	ittt	le
 8005fc2:	2330      	movle	r3, #48	; 0x30
 8005fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fcc:	1b52      	subs	r2, r2, r5
 8005fce:	6122      	str	r2, [r4, #16]
 8005fd0:	f8cd a000 	str.w	sl, [sp]
 8005fd4:	464b      	mov	r3, r9
 8005fd6:	aa03      	add	r2, sp, #12
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f7ff fee2 	bl	8005da4 <_printf_common>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d14c      	bne.n	800607e <_printf_i+0x1fe>
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	b004      	add	sp, #16
 8005fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fee:	4835      	ldr	r0, [pc, #212]	; (80060c4 <_printf_i+0x244>)
 8005ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ff4:	6829      	ldr	r1, [r5, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ffc:	6029      	str	r1, [r5, #0]
 8005ffe:	061d      	lsls	r5, r3, #24
 8006000:	d514      	bpl.n	800602c <_printf_i+0x1ac>
 8006002:	07df      	lsls	r7, r3, #31
 8006004:	bf44      	itt	mi
 8006006:	f043 0320 	orrmi.w	r3, r3, #32
 800600a:	6023      	strmi	r3, [r4, #0]
 800600c:	b91e      	cbnz	r6, 8006016 <_printf_i+0x196>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	f023 0320 	bic.w	r3, r3, #32
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	2310      	movs	r3, #16
 8006018:	e7b0      	b.n	8005f7c <_printf_i+0xfc>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f043 0320 	orr.w	r3, r3, #32
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	2378      	movs	r3, #120	; 0x78
 8006024:	4828      	ldr	r0, [pc, #160]	; (80060c8 <_printf_i+0x248>)
 8006026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800602a:	e7e3      	b.n	8005ff4 <_printf_i+0x174>
 800602c:	0659      	lsls	r1, r3, #25
 800602e:	bf48      	it	mi
 8006030:	b2b6      	uxthmi	r6, r6
 8006032:	e7e6      	b.n	8006002 <_printf_i+0x182>
 8006034:	4615      	mov	r5, r2
 8006036:	e7bb      	b.n	8005fb0 <_printf_i+0x130>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	6826      	ldr	r6, [r4, #0]
 800603c:	6961      	ldr	r1, [r4, #20]
 800603e:	1d18      	adds	r0, r3, #4
 8006040:	6028      	str	r0, [r5, #0]
 8006042:	0635      	lsls	r5, r6, #24
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	d501      	bpl.n	800604c <_printf_i+0x1cc>
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	e002      	b.n	8006052 <_printf_i+0x1d2>
 800604c:	0670      	lsls	r0, r6, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0x1c8>
 8006050:	8019      	strh	r1, [r3, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	4615      	mov	r5, r2
 8006058:	e7ba      	b.n	8005fd0 <_printf_i+0x150>
 800605a:	682b      	ldr	r3, [r5, #0]
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	602a      	str	r2, [r5, #0]
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	4628      	mov	r0, r5
 8006068:	f7fa f8c2 	bl	80001f0 <memchr>
 800606c:	b108      	cbz	r0, 8006072 <_printf_i+0x1f2>
 800606e:	1b40      	subs	r0, r0, r5
 8006070:	6060      	str	r0, [r4, #4]
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	2300      	movs	r3, #0
 8006078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800607c:	e7a8      	b.n	8005fd0 <_printf_i+0x150>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	462a      	mov	r2, r5
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d0ab      	beq.n	8005fe4 <_printf_i+0x164>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	079b      	lsls	r3, r3, #30
 8006090:	d413      	bmi.n	80060ba <_printf_i+0x23a>
 8006092:	68e0      	ldr	r0, [r4, #12]
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	4298      	cmp	r0, r3
 8006098:	bfb8      	it	lt
 800609a:	4618      	movlt	r0, r3
 800609c:	e7a4      	b.n	8005fe8 <_printf_i+0x168>
 800609e:	2301      	movs	r3, #1
 80060a0:	4632      	mov	r2, r6
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d09b      	beq.n	8005fe4 <_printf_i+0x164>
 80060ac:	3501      	adds	r5, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	9903      	ldr	r1, [sp, #12]
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	dcf2      	bgt.n	800609e <_printf_i+0x21e>
 80060b8:	e7eb      	b.n	8006092 <_printf_i+0x212>
 80060ba:	2500      	movs	r5, #0
 80060bc:	f104 0619 	add.w	r6, r4, #25
 80060c0:	e7f5      	b.n	80060ae <_printf_i+0x22e>
 80060c2:	bf00      	nop
 80060c4:	0800a77a 	.word	0x0800a77a
 80060c8:	0800a78b 	.word	0x0800a78b

080060cc <_scanf_float>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	b087      	sub	sp, #28
 80060d2:	4617      	mov	r7, r2
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	688b      	ldr	r3, [r1, #8]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060de:	bf83      	ittte	hi
 80060e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060e4:	195b      	addhi	r3, r3, r5
 80060e6:	9302      	strhi	r3, [sp, #8]
 80060e8:	2300      	movls	r3, #0
 80060ea:	bf86      	itte	hi
 80060ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060f0:	608b      	strhi	r3, [r1, #8]
 80060f2:	9302      	strls	r3, [sp, #8]
 80060f4:	680b      	ldr	r3, [r1, #0]
 80060f6:	468b      	mov	fp, r1
 80060f8:	2500      	movs	r5, #0
 80060fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80060fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8006102:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006106:	4680      	mov	r8, r0
 8006108:	460c      	mov	r4, r1
 800610a:	465e      	mov	r6, fp
 800610c:	46aa      	mov	sl, r5
 800610e:	46a9      	mov	r9, r5
 8006110:	9501      	str	r5, [sp, #4]
 8006112:	68a2      	ldr	r2, [r4, #8]
 8006114:	b152      	cbz	r2, 800612c <_scanf_float+0x60>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b4e      	cmp	r3, #78	; 0x4e
 800611c:	d864      	bhi.n	80061e8 <_scanf_float+0x11c>
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d83c      	bhi.n	800619c <_scanf_float+0xd0>
 8006122:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006126:	b2c8      	uxtb	r0, r1
 8006128:	280e      	cmp	r0, #14
 800612a:	d93a      	bls.n	80061a2 <_scanf_float+0xd6>
 800612c:	f1b9 0f00 	cmp.w	r9, #0
 8006130:	d003      	beq.n	800613a <_scanf_float+0x6e>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800613e:	f1ba 0f01 	cmp.w	sl, #1
 8006142:	f200 8113 	bhi.w	800636c <_scanf_float+0x2a0>
 8006146:	455e      	cmp	r6, fp
 8006148:	f200 8105 	bhi.w	8006356 <_scanf_float+0x28a>
 800614c:	2501      	movs	r5, #1
 800614e:	4628      	mov	r0, r5
 8006150:	b007      	add	sp, #28
 8006152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006156:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800615a:	2a0d      	cmp	r2, #13
 800615c:	d8e6      	bhi.n	800612c <_scanf_float+0x60>
 800615e:	a101      	add	r1, pc, #4	; (adr r1, 8006164 <_scanf_float+0x98>)
 8006160:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006164:	080062a3 	.word	0x080062a3
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	0800612d 	.word	0x0800612d
 8006174:	08006303 	.word	0x08006303
 8006178:	080062db 	.word	0x080062db
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062b1 	.word	0x080062b1
 8006188:	0800612d 	.word	0x0800612d
 800618c:	0800612d 	.word	0x0800612d
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	08006269 	.word	0x08006269
 800619c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061a0:	e7db      	b.n	800615a <_scanf_float+0x8e>
 80061a2:	290e      	cmp	r1, #14
 80061a4:	d8c2      	bhi.n	800612c <_scanf_float+0x60>
 80061a6:	a001      	add	r0, pc, #4	; (adr r0, 80061ac <_scanf_float+0xe0>)
 80061a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061ac:	0800625b 	.word	0x0800625b
 80061b0:	0800612d 	.word	0x0800612d
 80061b4:	0800625b 	.word	0x0800625b
 80061b8:	080062ef 	.word	0x080062ef
 80061bc:	0800612d 	.word	0x0800612d
 80061c0:	08006209 	.word	0x08006209
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	2b6e      	cmp	r3, #110	; 0x6e
 80061ea:	d809      	bhi.n	8006200 <_scanf_float+0x134>
 80061ec:	2b60      	cmp	r3, #96	; 0x60
 80061ee:	d8b2      	bhi.n	8006156 <_scanf_float+0x8a>
 80061f0:	2b54      	cmp	r3, #84	; 0x54
 80061f2:	d077      	beq.n	80062e4 <_scanf_float+0x218>
 80061f4:	2b59      	cmp	r3, #89	; 0x59
 80061f6:	d199      	bne.n	800612c <_scanf_float+0x60>
 80061f8:	2d07      	cmp	r5, #7
 80061fa:	d197      	bne.n	800612c <_scanf_float+0x60>
 80061fc:	2508      	movs	r5, #8
 80061fe:	e029      	b.n	8006254 <_scanf_float+0x188>
 8006200:	2b74      	cmp	r3, #116	; 0x74
 8006202:	d06f      	beq.n	80062e4 <_scanf_float+0x218>
 8006204:	2b79      	cmp	r3, #121	; 0x79
 8006206:	e7f6      	b.n	80061f6 <_scanf_float+0x12a>
 8006208:	6821      	ldr	r1, [r4, #0]
 800620a:	05c8      	lsls	r0, r1, #23
 800620c:	d51a      	bpl.n	8006244 <_scanf_float+0x178>
 800620e:	9b02      	ldr	r3, [sp, #8]
 8006210:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006214:	6021      	str	r1, [r4, #0]
 8006216:	f109 0901 	add.w	r9, r9, #1
 800621a:	b11b      	cbz	r3, 8006224 <_scanf_float+0x158>
 800621c:	3b01      	subs	r3, #1
 800621e:	3201      	adds	r2, #1
 8006220:	9302      	str	r3, [sp, #8]
 8006222:	60a2      	str	r2, [r4, #8]
 8006224:	68a3      	ldr	r3, [r4, #8]
 8006226:	3b01      	subs	r3, #1
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	3301      	adds	r3, #1
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3b01      	subs	r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	f340 8084 	ble.w	8006344 <_scanf_float+0x278>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	3301      	adds	r3, #1
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	e766      	b.n	8006112 <_scanf_float+0x46>
 8006244:	eb1a 0f05 	cmn.w	sl, r5
 8006248:	f47f af70 	bne.w	800612c <_scanf_float+0x60>
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	f806 3b01 	strb.w	r3, [r6], #1
 8006258:	e7e4      	b.n	8006224 <_scanf_float+0x158>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	0610      	lsls	r0, r2, #24
 800625e:	f57f af65 	bpl.w	800612c <_scanf_float+0x60>
 8006262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006266:	e7f4      	b.n	8006252 <_scanf_float+0x186>
 8006268:	f1ba 0f00 	cmp.w	sl, #0
 800626c:	d10e      	bne.n	800628c <_scanf_float+0x1c0>
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	d10e      	bne.n	8006292 <_scanf_float+0x1c6>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800627a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800627e:	d108      	bne.n	8006292 <_scanf_float+0x1c6>
 8006280:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	f04f 0a01 	mov.w	sl, #1
 800628a:	e7e3      	b.n	8006254 <_scanf_float+0x188>
 800628c:	f1ba 0f02 	cmp.w	sl, #2
 8006290:	d055      	beq.n	800633e <_scanf_float+0x272>
 8006292:	2d01      	cmp	r5, #1
 8006294:	d002      	beq.n	800629c <_scanf_float+0x1d0>
 8006296:	2d04      	cmp	r5, #4
 8006298:	f47f af48 	bne.w	800612c <_scanf_float+0x60>
 800629c:	3501      	adds	r5, #1
 800629e:	b2ed      	uxtb	r5, r5
 80062a0:	e7d8      	b.n	8006254 <_scanf_float+0x188>
 80062a2:	f1ba 0f01 	cmp.w	sl, #1
 80062a6:	f47f af41 	bne.w	800612c <_scanf_float+0x60>
 80062aa:	f04f 0a02 	mov.w	sl, #2
 80062ae:	e7d1      	b.n	8006254 <_scanf_float+0x188>
 80062b0:	b97d      	cbnz	r5, 80062d2 <_scanf_float+0x206>
 80062b2:	f1b9 0f00 	cmp.w	r9, #0
 80062b6:	f47f af3c 	bne.w	8006132 <_scanf_float+0x66>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062c4:	f47f af39 	bne.w	800613a <_scanf_float+0x6e>
 80062c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	2501      	movs	r5, #1
 80062d0:	e7c0      	b.n	8006254 <_scanf_float+0x188>
 80062d2:	2d03      	cmp	r5, #3
 80062d4:	d0e2      	beq.n	800629c <_scanf_float+0x1d0>
 80062d6:	2d05      	cmp	r5, #5
 80062d8:	e7de      	b.n	8006298 <_scanf_float+0x1cc>
 80062da:	2d02      	cmp	r5, #2
 80062dc:	f47f af26 	bne.w	800612c <_scanf_float+0x60>
 80062e0:	2503      	movs	r5, #3
 80062e2:	e7b7      	b.n	8006254 <_scanf_float+0x188>
 80062e4:	2d06      	cmp	r5, #6
 80062e6:	f47f af21 	bne.w	800612c <_scanf_float+0x60>
 80062ea:	2507      	movs	r5, #7
 80062ec:	e7b2      	b.n	8006254 <_scanf_float+0x188>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	0591      	lsls	r1, r2, #22
 80062f2:	f57f af1b 	bpl.w	800612c <_scanf_float+0x60>
 80062f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006300:	e7a8      	b.n	8006254 <_scanf_float+0x188>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006308:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800630c:	d006      	beq.n	800631c <_scanf_float+0x250>
 800630e:	0550      	lsls	r0, r2, #21
 8006310:	f57f af0c 	bpl.w	800612c <_scanf_float+0x60>
 8006314:	f1b9 0f00 	cmp.w	r9, #0
 8006318:	f43f af0f 	beq.w	800613a <_scanf_float+0x6e>
 800631c:	0591      	lsls	r1, r2, #22
 800631e:	bf58      	it	pl
 8006320:	9901      	ldrpl	r1, [sp, #4]
 8006322:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006326:	bf58      	it	pl
 8006328:	eba9 0101 	subpl.w	r1, r9, r1
 800632c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006330:	bf58      	it	pl
 8006332:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	f04f 0900 	mov.w	r9, #0
 800633c:	e78a      	b.n	8006254 <_scanf_float+0x188>
 800633e:	f04f 0a03 	mov.w	sl, #3
 8006342:	e787      	b.n	8006254 <_scanf_float+0x188>
 8006344:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006348:	4639      	mov	r1, r7
 800634a:	4640      	mov	r0, r8
 800634c:	4798      	blx	r3
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aedf 	beq.w	8006112 <_scanf_float+0x46>
 8006354:	e6ea      	b.n	800612c <_scanf_float+0x60>
 8006356:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800635a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800635e:	463a      	mov	r2, r7
 8006360:	4640      	mov	r0, r8
 8006362:	4798      	blx	r3
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	3b01      	subs	r3, #1
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	e6ec      	b.n	8006146 <_scanf_float+0x7a>
 800636c:	1e6b      	subs	r3, r5, #1
 800636e:	2b06      	cmp	r3, #6
 8006370:	d825      	bhi.n	80063be <_scanf_float+0x2f2>
 8006372:	2d02      	cmp	r5, #2
 8006374:	d836      	bhi.n	80063e4 <_scanf_float+0x318>
 8006376:	455e      	cmp	r6, fp
 8006378:	f67f aee8 	bls.w	800614c <_scanf_float+0x80>
 800637c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006380:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006384:	463a      	mov	r2, r7
 8006386:	4640      	mov	r0, r8
 8006388:	4798      	blx	r3
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	3b01      	subs	r3, #1
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	e7f1      	b.n	8006376 <_scanf_float+0x2aa>
 8006392:	9802      	ldr	r0, [sp, #8]
 8006394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006398:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	463a      	mov	r2, r7
 80063a0:	4640      	mov	r0, r8
 80063a2:	4798      	blx	r3
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063ae:	fa5f fa8a 	uxtb.w	sl, sl
 80063b2:	f1ba 0f02 	cmp.w	sl, #2
 80063b6:	d1ec      	bne.n	8006392 <_scanf_float+0x2c6>
 80063b8:	3d03      	subs	r5, #3
 80063ba:	b2ed      	uxtb	r5, r5
 80063bc:	1b76      	subs	r6, r6, r5
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	05da      	lsls	r2, r3, #23
 80063c2:	d52f      	bpl.n	8006424 <_scanf_float+0x358>
 80063c4:	055b      	lsls	r3, r3, #21
 80063c6:	d510      	bpl.n	80063ea <_scanf_float+0x31e>
 80063c8:	455e      	cmp	r6, fp
 80063ca:	f67f aebf 	bls.w	800614c <_scanf_float+0x80>
 80063ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063d6:	463a      	mov	r2, r7
 80063d8:	4640      	mov	r0, r8
 80063da:	4798      	blx	r3
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	3b01      	subs	r3, #1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	e7f1      	b.n	80063c8 <_scanf_float+0x2fc>
 80063e4:	46aa      	mov	sl, r5
 80063e6:	9602      	str	r6, [sp, #8]
 80063e8:	e7df      	b.n	80063aa <_scanf_float+0x2de>
 80063ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	2965      	cmp	r1, #101	; 0x65
 80063f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	d00c      	beq.n	8006418 <_scanf_float+0x34c>
 80063fe:	2945      	cmp	r1, #69	; 0x45
 8006400:	d00a      	beq.n	8006418 <_scanf_float+0x34c>
 8006402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006406:	463a      	mov	r2, r7
 8006408:	4640      	mov	r0, r8
 800640a:	4798      	blx	r3
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006412:	3b01      	subs	r3, #1
 8006414:	1eb5      	subs	r5, r6, #2
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800641c:	463a      	mov	r2, r7
 800641e:	4640      	mov	r0, r8
 8006420:	4798      	blx	r3
 8006422:	462e      	mov	r6, r5
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	f015 0510 	ands.w	r5, r5, #16
 800642a:	d159      	bne.n	80064e0 <_scanf_float+0x414>
 800642c:	7035      	strb	r5, [r6, #0]
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d11b      	bne.n	8006472 <_scanf_float+0x3a6>
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	454b      	cmp	r3, r9
 800643e:	eba3 0209 	sub.w	r2, r3, r9
 8006442:	d123      	bne.n	800648c <_scanf_float+0x3c0>
 8006444:	2200      	movs	r2, #0
 8006446:	4659      	mov	r1, fp
 8006448:	4640      	mov	r0, r8
 800644a:	f000 fea7 	bl	800719c <_strtod_r>
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	f012 0f02 	tst.w	r2, #2
 8006456:	ec57 6b10 	vmov	r6, r7, d0
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	d021      	beq.n	80064a2 <_scanf_float+0x3d6>
 800645e:	9903      	ldr	r1, [sp, #12]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	600a      	str	r2, [r1, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	e9c3 6700 	strd	r6, r7, [r3]
 800646a:	68e3      	ldr	r3, [r4, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60e3      	str	r3, [r4, #12]
 8006470:	e66d      	b.n	800614e <_scanf_float+0x82>
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0e5      	beq.n	8006444 <_scanf_float+0x378>
 8006478:	9905      	ldr	r1, [sp, #20]
 800647a:	230a      	movs	r3, #10
 800647c:	462a      	mov	r2, r5
 800647e:	3101      	adds	r1, #1
 8006480:	4640      	mov	r0, r8
 8006482:	f000 ff13 	bl	80072ac <_strtol_r>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	9e05      	ldr	r6, [sp, #20]
 800648a:	1ac2      	subs	r2, r0, r3
 800648c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006490:	429e      	cmp	r6, r3
 8006492:	bf28      	it	cs
 8006494:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006498:	4912      	ldr	r1, [pc, #72]	; (80064e4 <_scanf_float+0x418>)
 800649a:	4630      	mov	r0, r6
 800649c:	f000 f83c 	bl	8006518 <siprintf>
 80064a0:	e7d0      	b.n	8006444 <_scanf_float+0x378>
 80064a2:	9903      	ldr	r1, [sp, #12]
 80064a4:	f012 0f04 	tst.w	r2, #4
 80064a8:	f103 0204 	add.w	r2, r3, #4
 80064ac:	600a      	str	r2, [r1, #0]
 80064ae:	d1d9      	bne.n	8006464 <_scanf_float+0x398>
 80064b0:	f8d3 8000 	ldr.w	r8, [r3]
 80064b4:	ee10 2a10 	vmov	r2, s0
 80064b8:	ee10 0a10 	vmov	r0, s0
 80064bc:	463b      	mov	r3, r7
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa fb3c 	bl	8000b3c <__aeabi_dcmpun>
 80064c4:	b128      	cbz	r0, 80064d2 <_scanf_float+0x406>
 80064c6:	4808      	ldr	r0, [pc, #32]	; (80064e8 <_scanf_float+0x41c>)
 80064c8:	f000 f820 	bl	800650c <nanf>
 80064cc:	ed88 0a00 	vstr	s0, [r8]
 80064d0:	e7cb      	b.n	800646a <_scanf_float+0x39e>
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7fa fb8f 	bl	8000bf8 <__aeabi_d2f>
 80064da:	f8c8 0000 	str.w	r0, [r8]
 80064de:	e7c4      	b.n	800646a <_scanf_float+0x39e>
 80064e0:	2500      	movs	r5, #0
 80064e2:	e634      	b.n	800614e <_scanf_float+0x82>
 80064e4:	0800a79c 	.word	0x0800a79c
 80064e8:	0800aba8 	.word	0x0800aba8

080064ec <_sbrk_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d06      	ldr	r5, [pc, #24]	; (8006508 <_sbrk_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f7fc ff7a 	bl	80033f0 <_sbrk>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_sbrk_r+0x1a>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	b103      	cbz	r3, 8006506 <_sbrk_r+0x1a>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20000768 	.word	0x20000768

0800650c <nanf>:
 800650c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006514 <nanf+0x8>
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	7fc00000 	.word	0x7fc00000

08006518 <siprintf>:
 8006518:	b40e      	push	{r1, r2, r3}
 800651a:	b500      	push	{lr}
 800651c:	b09c      	sub	sp, #112	; 0x70
 800651e:	ab1d      	add	r3, sp, #116	; 0x74
 8006520:	9002      	str	r0, [sp, #8]
 8006522:	9006      	str	r0, [sp, #24]
 8006524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <siprintf+0x38>)
 800652a:	9107      	str	r1, [sp, #28]
 800652c:	9104      	str	r1, [sp, #16]
 800652e:	4909      	ldr	r1, [pc, #36]	; (8006554 <siprintf+0x3c>)
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	a902      	add	r1, sp, #8
 800653c:	f002 fdf6 	bl	800912c <_svfiprintf_r>
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	b01c      	add	sp, #112	; 0x70
 8006548:	f85d eb04 	ldr.w	lr, [sp], #4
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr
 8006550:	20000014 	.word	0x20000014
 8006554:	ffff0208 	.word	0xffff0208

08006558 <sulp>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	ec45 4b10 	vmov	d0, r4, r5
 8006562:	4616      	mov	r6, r2
 8006564:	f002 fc22 	bl	8008dac <__ulp>
 8006568:	ec51 0b10 	vmov	r0, r1, d0
 800656c:	b17e      	cbz	r6, 800658e <sulp+0x36>
 800656e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd09      	ble.n	800658e <sulp+0x36>
 800657a:	051b      	lsls	r3, r3, #20
 800657c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006580:	2400      	movs	r4, #0
 8006582:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f7fa f83d 	bl	8000608 <__aeabi_dmul>
 800658e:	bd70      	pop	{r4, r5, r6, pc}

08006590 <_strtod_l>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	b09d      	sub	sp, #116	; 0x74
 800659a:	461f      	mov	r7, r3
 800659c:	2300      	movs	r3, #0
 800659e:	9318      	str	r3, [sp, #96]	; 0x60
 80065a0:	4ba2      	ldr	r3, [pc, #648]	; (800682c <_strtod_l+0x29c>)
 80065a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	4604      	mov	r4, r0
 80065aa:	4618      	mov	r0, r3
 80065ac:	4688      	mov	r8, r1
 80065ae:	f7f9 fe17 	bl	80001e0 <strlen>
 80065b2:	f04f 0a00 	mov.w	sl, #0
 80065b6:	4605      	mov	r5, r0
 80065b8:	f04f 0b00 	mov.w	fp, #0
 80065bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	2a2b      	cmp	r2, #43	; 0x2b
 80065c6:	d04e      	beq.n	8006666 <_strtod_l+0xd6>
 80065c8:	d83b      	bhi.n	8006642 <_strtod_l+0xb2>
 80065ca:	2a0d      	cmp	r2, #13
 80065cc:	d834      	bhi.n	8006638 <_strtod_l+0xa8>
 80065ce:	2a08      	cmp	r2, #8
 80065d0:	d834      	bhi.n	800663c <_strtod_l+0xac>
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d03e      	beq.n	8006654 <_strtod_l+0xc4>
 80065d6:	2300      	movs	r3, #0
 80065d8:	930a      	str	r3, [sp, #40]	; 0x28
 80065da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80065dc:	7833      	ldrb	r3, [r6, #0]
 80065de:	2b30      	cmp	r3, #48	; 0x30
 80065e0:	f040 80b0 	bne.w	8006744 <_strtod_l+0x1b4>
 80065e4:	7873      	ldrb	r3, [r6, #1]
 80065e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065ea:	2b58      	cmp	r3, #88	; 0x58
 80065ec:	d168      	bne.n	80066c0 <_strtod_l+0x130>
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	ab18      	add	r3, sp, #96	; 0x60
 80065f4:	9702      	str	r7, [sp, #8]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	4a8d      	ldr	r2, [pc, #564]	; (8006830 <_strtod_l+0x2a0>)
 80065fa:	ab19      	add	r3, sp, #100	; 0x64
 80065fc:	a917      	add	r1, sp, #92	; 0x5c
 80065fe:	4620      	mov	r0, r4
 8006600:	f001 fd38 	bl	8008074 <__gethex>
 8006604:	f010 0707 	ands.w	r7, r0, #7
 8006608:	4605      	mov	r5, r0
 800660a:	d005      	beq.n	8006618 <_strtod_l+0x88>
 800660c:	2f06      	cmp	r7, #6
 800660e:	d12c      	bne.n	800666a <_strtod_l+0xda>
 8006610:	3601      	adds	r6, #1
 8006612:	2300      	movs	r3, #0
 8006614:	9617      	str	r6, [sp, #92]	; 0x5c
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8590 	bne.w	8007140 <_strtod_l+0xbb0>
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	b1eb      	cbz	r3, 8006660 <_strtod_l+0xd0>
 8006624:	4652      	mov	r2, sl
 8006626:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800662a:	ec43 2b10 	vmov	d0, r2, r3
 800662e:	b01d      	add	sp, #116	; 0x74
 8006630:	ecbd 8b02 	vpop	{d8}
 8006634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006638:	2a20      	cmp	r2, #32
 800663a:	d1cc      	bne.n	80065d6 <_strtod_l+0x46>
 800663c:	3301      	adds	r3, #1
 800663e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006640:	e7be      	b.n	80065c0 <_strtod_l+0x30>
 8006642:	2a2d      	cmp	r2, #45	; 0x2d
 8006644:	d1c7      	bne.n	80065d6 <_strtod_l+0x46>
 8006646:	2201      	movs	r2, #1
 8006648:	920a      	str	r2, [sp, #40]	; 0x28
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	9217      	str	r2, [sp, #92]	; 0x5c
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1c2      	bne.n	80065da <_strtod_l+0x4a>
 8006654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006656:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 856e 	bne.w	800713c <_strtod_l+0xbac>
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	e7e1      	b.n	800662a <_strtod_l+0x9a>
 8006666:	2200      	movs	r2, #0
 8006668:	e7ee      	b.n	8006648 <_strtod_l+0xb8>
 800666a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800666c:	b13a      	cbz	r2, 800667e <_strtod_l+0xee>
 800666e:	2135      	movs	r1, #53	; 0x35
 8006670:	a81a      	add	r0, sp, #104	; 0x68
 8006672:	f002 fca6 	bl	8008fc2 <__copybits>
 8006676:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006678:	4620      	mov	r0, r4
 800667a:	f002 f865 	bl	8008748 <_Bfree>
 800667e:	3f01      	subs	r7, #1
 8006680:	2f04      	cmp	r7, #4
 8006682:	d806      	bhi.n	8006692 <_strtod_l+0x102>
 8006684:	e8df f007 	tbb	[pc, r7]
 8006688:	1714030a 	.word	0x1714030a
 800668c:	0a          	.byte	0x0a
 800668d:	00          	.byte	0x00
 800668e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006692:	0728      	lsls	r0, r5, #28
 8006694:	d5c0      	bpl.n	8006618 <_strtod_l+0x88>
 8006696:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800669a:	e7bd      	b.n	8006618 <_strtod_l+0x88>
 800669c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80066a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80066ae:	e7f0      	b.n	8006692 <_strtod_l+0x102>
 80066b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006834 <_strtod_l+0x2a4>
 80066b4:	e7ed      	b.n	8006692 <_strtod_l+0x102>
 80066b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80066ba:	f04f 3aff 	mov.w	sl, #4294967295
 80066be:	e7e8      	b.n	8006692 <_strtod_l+0x102>
 80066c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b30      	cmp	r3, #48	; 0x30
 80066ca:	d0f9      	beq.n	80066c0 <_strtod_l+0x130>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0a3      	beq.n	8006618 <_strtod_l+0x88>
 80066d0:	2301      	movs	r3, #1
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80066e0:	464f      	mov	r7, r9
 80066e2:	220a      	movs	r2, #10
 80066e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066e6:	7806      	ldrb	r6, [r0, #0]
 80066e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066ec:	b2d9      	uxtb	r1, r3
 80066ee:	2909      	cmp	r1, #9
 80066f0:	d92a      	bls.n	8006748 <_strtod_l+0x1b8>
 80066f2:	9905      	ldr	r1, [sp, #20]
 80066f4:	462a      	mov	r2, r5
 80066f6:	f002 fe23 	bl	8009340 <strncmp>
 80066fa:	b398      	cbz	r0, 8006764 <_strtod_l+0x1d4>
 80066fc:	2000      	movs	r0, #0
 80066fe:	4632      	mov	r2, r6
 8006700:	463d      	mov	r5, r7
 8006702:	9005      	str	r0, [sp, #20]
 8006704:	4603      	mov	r3, r0
 8006706:	2a65      	cmp	r2, #101	; 0x65
 8006708:	d001      	beq.n	800670e <_strtod_l+0x17e>
 800670a:	2a45      	cmp	r2, #69	; 0x45
 800670c:	d118      	bne.n	8006740 <_strtod_l+0x1b0>
 800670e:	b91d      	cbnz	r5, 8006718 <_strtod_l+0x188>
 8006710:	9a04      	ldr	r2, [sp, #16]
 8006712:	4302      	orrs	r2, r0
 8006714:	d09e      	beq.n	8006654 <_strtod_l+0xc4>
 8006716:	2500      	movs	r5, #0
 8006718:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800671c:	f108 0201 	add.w	r2, r8, #1
 8006720:	9217      	str	r2, [sp, #92]	; 0x5c
 8006722:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006726:	2a2b      	cmp	r2, #43	; 0x2b
 8006728:	d075      	beq.n	8006816 <_strtod_l+0x286>
 800672a:	2a2d      	cmp	r2, #45	; 0x2d
 800672c:	d07b      	beq.n	8006826 <_strtod_l+0x296>
 800672e:	f04f 0c00 	mov.w	ip, #0
 8006732:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006736:	2909      	cmp	r1, #9
 8006738:	f240 8082 	bls.w	8006840 <_strtod_l+0x2b0>
 800673c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006740:	2600      	movs	r6, #0
 8006742:	e09d      	b.n	8006880 <_strtod_l+0x2f0>
 8006744:	2300      	movs	r3, #0
 8006746:	e7c4      	b.n	80066d2 <_strtod_l+0x142>
 8006748:	2f08      	cmp	r7, #8
 800674a:	bfd8      	it	le
 800674c:	9907      	ldrle	r1, [sp, #28]
 800674e:	f100 0001 	add.w	r0, r0, #1
 8006752:	bfda      	itte	le
 8006754:	fb02 3301 	mlale	r3, r2, r1, r3
 8006758:	9307      	strle	r3, [sp, #28]
 800675a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800675e:	3701      	adds	r7, #1
 8006760:	9017      	str	r0, [sp, #92]	; 0x5c
 8006762:	e7bf      	b.n	80066e4 <_strtod_l+0x154>
 8006764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006766:	195a      	adds	r2, r3, r5
 8006768:	9217      	str	r2, [sp, #92]	; 0x5c
 800676a:	5d5a      	ldrb	r2, [r3, r5]
 800676c:	2f00      	cmp	r7, #0
 800676e:	d037      	beq.n	80067e0 <_strtod_l+0x250>
 8006770:	9005      	str	r0, [sp, #20]
 8006772:	463d      	mov	r5, r7
 8006774:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006778:	2b09      	cmp	r3, #9
 800677a:	d912      	bls.n	80067a2 <_strtod_l+0x212>
 800677c:	2301      	movs	r3, #1
 800677e:	e7c2      	b.n	8006706 <_strtod_l+0x176>
 8006780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	9217      	str	r2, [sp, #92]	; 0x5c
 8006786:	785a      	ldrb	r2, [r3, #1]
 8006788:	3001      	adds	r0, #1
 800678a:	2a30      	cmp	r2, #48	; 0x30
 800678c:	d0f8      	beq.n	8006780 <_strtod_l+0x1f0>
 800678e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006792:	2b08      	cmp	r3, #8
 8006794:	f200 84d9 	bhi.w	800714a <_strtod_l+0xbba>
 8006798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800679a:	9005      	str	r0, [sp, #20]
 800679c:	2000      	movs	r0, #0
 800679e:	9308      	str	r3, [sp, #32]
 80067a0:	4605      	mov	r5, r0
 80067a2:	3a30      	subs	r2, #48	; 0x30
 80067a4:	f100 0301 	add.w	r3, r0, #1
 80067a8:	d014      	beq.n	80067d4 <_strtod_l+0x244>
 80067aa:	9905      	ldr	r1, [sp, #20]
 80067ac:	4419      	add	r1, r3
 80067ae:	9105      	str	r1, [sp, #20]
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb00 0e05 	add.w	lr, r0, r5
 80067b6:	210a      	movs	r1, #10
 80067b8:	4573      	cmp	r3, lr
 80067ba:	d113      	bne.n	80067e4 <_strtod_l+0x254>
 80067bc:	182b      	adds	r3, r5, r0
 80067be:	2b08      	cmp	r3, #8
 80067c0:	f105 0501 	add.w	r5, r5, #1
 80067c4:	4405      	add	r5, r0
 80067c6:	dc1c      	bgt.n	8006802 <_strtod_l+0x272>
 80067c8:	9907      	ldr	r1, [sp, #28]
 80067ca:	230a      	movs	r3, #10
 80067cc:	fb03 2301 	mla	r3, r3, r1, r2
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	2300      	movs	r3, #0
 80067d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067d6:	1c51      	adds	r1, r2, #1
 80067d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80067da:	7852      	ldrb	r2, [r2, #1]
 80067dc:	4618      	mov	r0, r3
 80067de:	e7c9      	b.n	8006774 <_strtod_l+0x1e4>
 80067e0:	4638      	mov	r0, r7
 80067e2:	e7d2      	b.n	800678a <_strtod_l+0x1fa>
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	dc04      	bgt.n	80067f2 <_strtod_l+0x262>
 80067e8:	9e07      	ldr	r6, [sp, #28]
 80067ea:	434e      	muls	r6, r1
 80067ec:	9607      	str	r6, [sp, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	e7e2      	b.n	80067b8 <_strtod_l+0x228>
 80067f2:	f103 0c01 	add.w	ip, r3, #1
 80067f6:	f1bc 0f10 	cmp.w	ip, #16
 80067fa:	bfd8      	it	le
 80067fc:	fb01 f909 	mulle.w	r9, r1, r9
 8006800:	e7f5      	b.n	80067ee <_strtod_l+0x25e>
 8006802:	2d10      	cmp	r5, #16
 8006804:	bfdc      	itt	le
 8006806:	230a      	movle	r3, #10
 8006808:	fb03 2909 	mlale	r9, r3, r9, r2
 800680c:	e7e1      	b.n	80067d2 <_strtod_l+0x242>
 800680e:	2300      	movs	r3, #0
 8006810:	9305      	str	r3, [sp, #20]
 8006812:	2301      	movs	r3, #1
 8006814:	e77c      	b.n	8006710 <_strtod_l+0x180>
 8006816:	f04f 0c00 	mov.w	ip, #0
 800681a:	f108 0202 	add.w	r2, r8, #2
 800681e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006820:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006824:	e785      	b.n	8006732 <_strtod_l+0x1a2>
 8006826:	f04f 0c01 	mov.w	ip, #1
 800682a:	e7f6      	b.n	800681a <_strtod_l+0x28a>
 800682c:	0800a9f0 	.word	0x0800a9f0
 8006830:	0800a7a4 	.word	0x0800a7a4
 8006834:	7ff00000 	.word	0x7ff00000
 8006838:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800683a:	1c51      	adds	r1, r2, #1
 800683c:	9117      	str	r1, [sp, #92]	; 0x5c
 800683e:	7852      	ldrb	r2, [r2, #1]
 8006840:	2a30      	cmp	r2, #48	; 0x30
 8006842:	d0f9      	beq.n	8006838 <_strtod_l+0x2a8>
 8006844:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006848:	2908      	cmp	r1, #8
 800684a:	f63f af79 	bhi.w	8006740 <_strtod_l+0x1b0>
 800684e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006852:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006854:	9206      	str	r2, [sp, #24]
 8006856:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006858:	1c51      	adds	r1, r2, #1
 800685a:	9117      	str	r1, [sp, #92]	; 0x5c
 800685c:	7852      	ldrb	r2, [r2, #1]
 800685e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006862:	2e09      	cmp	r6, #9
 8006864:	d937      	bls.n	80068d6 <_strtod_l+0x346>
 8006866:	9e06      	ldr	r6, [sp, #24]
 8006868:	1b89      	subs	r1, r1, r6
 800686a:	2908      	cmp	r1, #8
 800686c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006870:	dc02      	bgt.n	8006878 <_strtod_l+0x2e8>
 8006872:	4576      	cmp	r6, lr
 8006874:	bfa8      	it	ge
 8006876:	4676      	movge	r6, lr
 8006878:	f1bc 0f00 	cmp.w	ip, #0
 800687c:	d000      	beq.n	8006880 <_strtod_l+0x2f0>
 800687e:	4276      	negs	r6, r6
 8006880:	2d00      	cmp	r5, #0
 8006882:	d14d      	bne.n	8006920 <_strtod_l+0x390>
 8006884:	9904      	ldr	r1, [sp, #16]
 8006886:	4301      	orrs	r1, r0
 8006888:	f47f aec6 	bne.w	8006618 <_strtod_l+0x88>
 800688c:	2b00      	cmp	r3, #0
 800688e:	f47f aee1 	bne.w	8006654 <_strtod_l+0xc4>
 8006892:	2a69      	cmp	r2, #105	; 0x69
 8006894:	d027      	beq.n	80068e6 <_strtod_l+0x356>
 8006896:	dc24      	bgt.n	80068e2 <_strtod_l+0x352>
 8006898:	2a49      	cmp	r2, #73	; 0x49
 800689a:	d024      	beq.n	80068e6 <_strtod_l+0x356>
 800689c:	2a4e      	cmp	r2, #78	; 0x4e
 800689e:	f47f aed9 	bne.w	8006654 <_strtod_l+0xc4>
 80068a2:	499f      	ldr	r1, [pc, #636]	; (8006b20 <_strtod_l+0x590>)
 80068a4:	a817      	add	r0, sp, #92	; 0x5c
 80068a6:	f001 fe3d 	bl	8008524 <__match>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f43f aed2 	beq.w	8006654 <_strtod_l+0xc4>
 80068b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b28      	cmp	r3, #40	; 0x28
 80068b6:	d12d      	bne.n	8006914 <_strtod_l+0x384>
 80068b8:	499a      	ldr	r1, [pc, #616]	; (8006b24 <_strtod_l+0x594>)
 80068ba:	aa1a      	add	r2, sp, #104	; 0x68
 80068bc:	a817      	add	r0, sp, #92	; 0x5c
 80068be:	f001 fe45 	bl	800854c <__hexnan>
 80068c2:	2805      	cmp	r0, #5
 80068c4:	d126      	bne.n	8006914 <_strtod_l+0x384>
 80068c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80068cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80068d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80068d4:	e6a0      	b.n	8006618 <_strtod_l+0x88>
 80068d6:	210a      	movs	r1, #10
 80068d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80068dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80068e0:	e7b9      	b.n	8006856 <_strtod_l+0x2c6>
 80068e2:	2a6e      	cmp	r2, #110	; 0x6e
 80068e4:	e7db      	b.n	800689e <_strtod_l+0x30e>
 80068e6:	4990      	ldr	r1, [pc, #576]	; (8006b28 <_strtod_l+0x598>)
 80068e8:	a817      	add	r0, sp, #92	; 0x5c
 80068ea:	f001 fe1b 	bl	8008524 <__match>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f43f aeb0 	beq.w	8006654 <_strtod_l+0xc4>
 80068f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068f6:	498d      	ldr	r1, [pc, #564]	; (8006b2c <_strtod_l+0x59c>)
 80068f8:	3b01      	subs	r3, #1
 80068fa:	a817      	add	r0, sp, #92	; 0x5c
 80068fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80068fe:	f001 fe11 	bl	8008524 <__match>
 8006902:	b910      	cbnz	r0, 800690a <_strtod_l+0x37a>
 8006904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006906:	3301      	adds	r3, #1
 8006908:	9317      	str	r3, [sp, #92]	; 0x5c
 800690a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006b3c <_strtod_l+0x5ac>
 800690e:	f04f 0a00 	mov.w	sl, #0
 8006912:	e681      	b.n	8006618 <_strtod_l+0x88>
 8006914:	4886      	ldr	r0, [pc, #536]	; (8006b30 <_strtod_l+0x5a0>)
 8006916:	f002 fd0b 	bl	8009330 <nan>
 800691a:	ec5b ab10 	vmov	sl, fp, d0
 800691e:	e67b      	b.n	8006618 <_strtod_l+0x88>
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	9807      	ldr	r0, [sp, #28]
 8006924:	1af3      	subs	r3, r6, r3
 8006926:	2f00      	cmp	r7, #0
 8006928:	bf08      	it	eq
 800692a:	462f      	moveq	r7, r5
 800692c:	2d10      	cmp	r5, #16
 800692e:	9306      	str	r3, [sp, #24]
 8006930:	46a8      	mov	r8, r5
 8006932:	bfa8      	it	ge
 8006934:	f04f 0810 	movge.w	r8, #16
 8006938:	f7f9 fdec 	bl	8000514 <__aeabi_ui2d>
 800693c:	2d09      	cmp	r5, #9
 800693e:	4682      	mov	sl, r0
 8006940:	468b      	mov	fp, r1
 8006942:	dd13      	ble.n	800696c <_strtod_l+0x3dc>
 8006944:	4b7b      	ldr	r3, [pc, #492]	; (8006b34 <_strtod_l+0x5a4>)
 8006946:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800694a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800694e:	f7f9 fe5b 	bl	8000608 <__aeabi_dmul>
 8006952:	4682      	mov	sl, r0
 8006954:	4648      	mov	r0, r9
 8006956:	468b      	mov	fp, r1
 8006958:	f7f9 fddc 	bl	8000514 <__aeabi_ui2d>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 fc9a 	bl	800029c <__adddf3>
 8006968:	4682      	mov	sl, r0
 800696a:	468b      	mov	fp, r1
 800696c:	2d0f      	cmp	r5, #15
 800696e:	dc38      	bgt.n	80069e2 <_strtod_l+0x452>
 8006970:	9b06      	ldr	r3, [sp, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f43f ae50 	beq.w	8006618 <_strtod_l+0x88>
 8006978:	dd24      	ble.n	80069c4 <_strtod_l+0x434>
 800697a:	2b16      	cmp	r3, #22
 800697c:	dc0b      	bgt.n	8006996 <_strtod_l+0x406>
 800697e:	496d      	ldr	r1, [pc, #436]	; (8006b34 <_strtod_l+0x5a4>)
 8006980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006988:	4652      	mov	r2, sl
 800698a:	465b      	mov	r3, fp
 800698c:	f7f9 fe3c 	bl	8000608 <__aeabi_dmul>
 8006990:	4682      	mov	sl, r0
 8006992:	468b      	mov	fp, r1
 8006994:	e640      	b.n	8006618 <_strtod_l+0x88>
 8006996:	9a06      	ldr	r2, [sp, #24]
 8006998:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800699c:	4293      	cmp	r3, r2
 800699e:	db20      	blt.n	80069e2 <_strtod_l+0x452>
 80069a0:	4c64      	ldr	r4, [pc, #400]	; (8006b34 <_strtod_l+0x5a4>)
 80069a2:	f1c5 050f 	rsb	r5, r5, #15
 80069a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b2:	f7f9 fe29 	bl	8000608 <__aeabi_dmul>
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	1b5d      	subs	r5, r3, r5
 80069ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80069be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069c2:	e7e3      	b.n	800698c <_strtod_l+0x3fc>
 80069c4:	9b06      	ldr	r3, [sp, #24]
 80069c6:	3316      	adds	r3, #22
 80069c8:	db0b      	blt.n	80069e2 <_strtod_l+0x452>
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	1b9e      	subs	r6, r3, r6
 80069ce:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <_strtod_l+0x5a4>)
 80069d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80069d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069d8:	4650      	mov	r0, sl
 80069da:	4659      	mov	r1, fp
 80069dc:	f7f9 ff3e 	bl	800085c <__aeabi_ddiv>
 80069e0:	e7d6      	b.n	8006990 <_strtod_l+0x400>
 80069e2:	9b06      	ldr	r3, [sp, #24]
 80069e4:	eba5 0808 	sub.w	r8, r5, r8
 80069e8:	4498      	add	r8, r3
 80069ea:	f1b8 0f00 	cmp.w	r8, #0
 80069ee:	dd74      	ble.n	8006ada <_strtod_l+0x54a>
 80069f0:	f018 030f 	ands.w	r3, r8, #15
 80069f4:	d00a      	beq.n	8006a0c <_strtod_l+0x47c>
 80069f6:	494f      	ldr	r1, [pc, #316]	; (8006b34 <_strtod_l+0x5a4>)
 80069f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069fc:	4652      	mov	r2, sl
 80069fe:	465b      	mov	r3, fp
 8006a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a04:	f7f9 fe00 	bl	8000608 <__aeabi_dmul>
 8006a08:	4682      	mov	sl, r0
 8006a0a:	468b      	mov	fp, r1
 8006a0c:	f038 080f 	bics.w	r8, r8, #15
 8006a10:	d04f      	beq.n	8006ab2 <_strtod_l+0x522>
 8006a12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006a16:	dd22      	ble.n	8006a5e <_strtod_l+0x4ce>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	462e      	mov	r6, r5
 8006a1c:	9507      	str	r5, [sp, #28]
 8006a1e:	9505      	str	r5, [sp, #20]
 8006a20:	2322      	movs	r3, #34	; 0x22
 8006a22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006b3c <_strtod_l+0x5ac>
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	f04f 0a00 	mov.w	sl, #0
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f43f adf2 	beq.w	8006618 <_strtod_l+0x88>
 8006a34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a36:	4620      	mov	r0, r4
 8006a38:	f001 fe86 	bl	8008748 <_Bfree>
 8006a3c:	9905      	ldr	r1, [sp, #20]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f001 fe82 	bl	8008748 <_Bfree>
 8006a44:	4631      	mov	r1, r6
 8006a46:	4620      	mov	r0, r4
 8006a48:	f001 fe7e 	bl	8008748 <_Bfree>
 8006a4c:	9907      	ldr	r1, [sp, #28]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f001 fe7a 	bl	8008748 <_Bfree>
 8006a54:	4629      	mov	r1, r5
 8006a56:	4620      	mov	r0, r4
 8006a58:	f001 fe76 	bl	8008748 <_Bfree>
 8006a5c:	e5dc      	b.n	8006618 <_strtod_l+0x88>
 8006a5e:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <_strtod_l+0x5a8>)
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	2300      	movs	r3, #0
 8006a64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006a68:	4650      	mov	r0, sl
 8006a6a:	4659      	mov	r1, fp
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	f1b8 0f01 	cmp.w	r8, #1
 8006a72:	dc21      	bgt.n	8006ab8 <_strtod_l+0x528>
 8006a74:	b10b      	cbz	r3, 8006a7a <_strtod_l+0x4ea>
 8006a76:	4682      	mov	sl, r0
 8006a78:	468b      	mov	fp, r1
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <_strtod_l+0x5a8>)
 8006a7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a8c:	f7f9 fdbc 	bl	8000608 <__aeabi_dmul>
 8006a90:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <_strtod_l+0x5ac>)
 8006a92:	460a      	mov	r2, r1
 8006a94:	400b      	ands	r3, r1
 8006a96:	492a      	ldr	r1, [pc, #168]	; (8006b40 <_strtod_l+0x5b0>)
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	4682      	mov	sl, r0
 8006a9c:	d8bc      	bhi.n	8006a18 <_strtod_l+0x488>
 8006a9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006aa2:	428b      	cmp	r3, r1
 8006aa4:	bf86      	itte	hi
 8006aa6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006b44 <_strtod_l+0x5b4>
 8006aaa:	f04f 3aff 	movhi.w	sl, #4294967295
 8006aae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	e084      	b.n	8006bc2 <_strtod_l+0x632>
 8006ab8:	f018 0f01 	tst.w	r8, #1
 8006abc:	d005      	beq.n	8006aca <_strtod_l+0x53a>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fda0 	bl	8000608 <__aeabi_dmul>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	9a04      	ldr	r2, [sp, #16]
 8006acc:	3208      	adds	r2, #8
 8006ace:	f109 0901 	add.w	r9, r9, #1
 8006ad2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ad6:	9204      	str	r2, [sp, #16]
 8006ad8:	e7c9      	b.n	8006a6e <_strtod_l+0x4de>
 8006ada:	d0ea      	beq.n	8006ab2 <_strtod_l+0x522>
 8006adc:	f1c8 0800 	rsb	r8, r8, #0
 8006ae0:	f018 020f 	ands.w	r2, r8, #15
 8006ae4:	d00a      	beq.n	8006afc <_strtod_l+0x56c>
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <_strtod_l+0x5a4>)
 8006ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aec:	4650      	mov	r0, sl
 8006aee:	4659      	mov	r1, fp
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f7f9 feb2 	bl	800085c <__aeabi_ddiv>
 8006af8:	4682      	mov	sl, r0
 8006afa:	468b      	mov	fp, r1
 8006afc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b00:	d0d7      	beq.n	8006ab2 <_strtod_l+0x522>
 8006b02:	f1b8 0f1f 	cmp.w	r8, #31
 8006b06:	dd1f      	ble.n	8006b48 <_strtod_l+0x5b8>
 8006b08:	2500      	movs	r5, #0
 8006b0a:	462e      	mov	r6, r5
 8006b0c:	9507      	str	r5, [sp, #28]
 8006b0e:	9505      	str	r5, [sp, #20]
 8006b10:	2322      	movs	r3, #34	; 0x22
 8006b12:	f04f 0a00 	mov.w	sl, #0
 8006b16:	f04f 0b00 	mov.w	fp, #0
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	e786      	b.n	8006a2c <_strtod_l+0x49c>
 8006b1e:	bf00      	nop
 8006b20:	0800a775 	.word	0x0800a775
 8006b24:	0800a7b8 	.word	0x0800a7b8
 8006b28:	0800a76d 	.word	0x0800a76d
 8006b2c:	0800a8fc 	.word	0x0800a8fc
 8006b30:	0800aba8 	.word	0x0800aba8
 8006b34:	0800aa88 	.word	0x0800aa88
 8006b38:	0800aa60 	.word	0x0800aa60
 8006b3c:	7ff00000 	.word	0x7ff00000
 8006b40:	7ca00000 	.word	0x7ca00000
 8006b44:	7fefffff 	.word	0x7fefffff
 8006b48:	f018 0310 	ands.w	r3, r8, #16
 8006b4c:	bf18      	it	ne
 8006b4e:	236a      	movne	r3, #106	; 0x6a
 8006b50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006f00 <_strtod_l+0x970>
 8006b54:	9304      	str	r3, [sp, #16]
 8006b56:	4650      	mov	r0, sl
 8006b58:	4659      	mov	r1, fp
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f018 0f01 	tst.w	r8, #1
 8006b60:	d004      	beq.n	8006b6c <_strtod_l+0x5dc>
 8006b62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006b70:	f109 0908 	add.w	r9, r9, #8
 8006b74:	d1f2      	bne.n	8006b5c <_strtod_l+0x5cc>
 8006b76:	b10b      	cbz	r3, 8006b7c <_strtod_l+0x5ec>
 8006b78:	4682      	mov	sl, r0
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	b1c3      	cbz	r3, 8006bb2 <_strtod_l+0x622>
 8006b80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	dd11      	ble.n	8006bb2 <_strtod_l+0x622>
 8006b8e:	2b1f      	cmp	r3, #31
 8006b90:	f340 8124 	ble.w	8006ddc <_strtod_l+0x84c>
 8006b94:	2b34      	cmp	r3, #52	; 0x34
 8006b96:	bfde      	ittt	le
 8006b98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b9c:	f04f 33ff 	movle.w	r3, #4294967295
 8006ba0:	fa03 f202 	lslle.w	r2, r3, r2
 8006ba4:	f04f 0a00 	mov.w	sl, #0
 8006ba8:	bfcc      	ite	gt
 8006baa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006bae:	ea02 0b01 	andle.w	fp, r2, r1
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4659      	mov	r1, fp
 8006bba:	f7f9 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1a2      	bne.n	8006b08 <_strtod_l+0x578>
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	9908      	ldr	r1, [sp, #32]
 8006bc8:	462b      	mov	r3, r5
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f001 fe23 	bl	8008818 <__s2b>
 8006bd2:	9007      	str	r0, [sp, #28]
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f43f af1f 	beq.w	8006a18 <_strtod_l+0x488>
 8006bda:	9b05      	ldr	r3, [sp, #20]
 8006bdc:	1b9e      	subs	r6, r3, r6
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bfb4      	ite	lt
 8006be4:	4633      	movlt	r3, r6
 8006be6:	2300      	movge	r3, #0
 8006be8:	930c      	str	r3, [sp, #48]	; 0x30
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	2500      	movs	r5, #0
 8006bee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bf2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bf4:	462e      	mov	r6, r5
 8006bf6:	9b07      	ldr	r3, [sp, #28]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	6859      	ldr	r1, [r3, #4]
 8006bfc:	f001 fd64 	bl	80086c8 <_Balloc>
 8006c00:	9005      	str	r0, [sp, #20]
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f af0c 	beq.w	8006a20 <_strtod_l+0x490>
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	3202      	adds	r2, #2
 8006c0e:	f103 010c 	add.w	r1, r3, #12
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	300c      	adds	r0, #12
 8006c16:	f7fe fcf9 	bl	800560c <memcpy>
 8006c1a:	ec4b ab10 	vmov	d0, sl, fp
 8006c1e:	aa1a      	add	r2, sp, #104	; 0x68
 8006c20:	a919      	add	r1, sp, #100	; 0x64
 8006c22:	4620      	mov	r0, r4
 8006c24:	f002 f93e 	bl	8008ea4 <__d2b>
 8006c28:	ec4b ab18 	vmov	d8, sl, fp
 8006c2c:	9018      	str	r0, [sp, #96]	; 0x60
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f aef6 	beq.w	8006a20 <_strtod_l+0x490>
 8006c34:	2101      	movs	r1, #1
 8006c36:	4620      	mov	r0, r4
 8006c38:	f001 fe88 	bl	800894c <__i2b>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f43f aeee 	beq.w	8006a20 <_strtod_l+0x490>
 8006c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c46:	9904      	ldr	r1, [sp, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfab      	itete	ge
 8006c4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006c4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006c50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006c56:	bfac      	ite	ge
 8006c58:	eb03 0902 	addge.w	r9, r3, r2
 8006c5c:	1ad7      	sublt	r7, r2, r3
 8006c5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c60:	eba3 0801 	sub.w	r8, r3, r1
 8006c64:	4490      	add	r8, r2
 8006c66:	4ba1      	ldr	r3, [pc, #644]	; (8006eec <_strtod_l+0x95c>)
 8006c68:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c6c:	4598      	cmp	r8, r3
 8006c6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c72:	f280 80c7 	bge.w	8006e04 <_strtod_l+0x874>
 8006c76:	eba3 0308 	sub.w	r3, r3, r8
 8006c7a:	2b1f      	cmp	r3, #31
 8006c7c:	eba2 0203 	sub.w	r2, r2, r3
 8006c80:	f04f 0101 	mov.w	r1, #1
 8006c84:	f300 80b1 	bgt.w	8006dea <_strtod_l+0x85a>
 8006c88:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	eb09 0802 	add.w	r8, r9, r2
 8006c96:	9b04      	ldr	r3, [sp, #16]
 8006c98:	45c1      	cmp	r9, r8
 8006c9a:	4417      	add	r7, r2
 8006c9c:	441f      	add	r7, r3
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	bfa8      	it	ge
 8006ca2:	4643      	movge	r3, r8
 8006ca4:	42bb      	cmp	r3, r7
 8006ca6:	bfa8      	it	ge
 8006ca8:	463b      	movge	r3, r7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfc2      	ittt	gt
 8006cae:	eba8 0803 	subgt.w	r8, r8, r3
 8006cb2:	1aff      	subgt	r7, r7, r3
 8006cb4:	eba9 0903 	subgt.w	r9, r9, r3
 8006cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd17      	ble.n	8006cee <_strtod_l+0x75e>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f001 ff02 	bl	8008acc <__pow5mult>
 8006cc8:	4606      	mov	r6, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f43f aea8 	beq.w	8006a20 <_strtod_l+0x490>
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f001 fe4f 	bl	8008978 <__multiply>
 8006cda:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f43f ae9f 	beq.w	8006a20 <_strtod_l+0x490>
 8006ce2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f001 fd2f 	bl	8008748 <_Bfree>
 8006cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cec:	9318      	str	r3, [sp, #96]	; 0x60
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	f300 808c 	bgt.w	8006e0e <_strtod_l+0x87e>
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dd08      	ble.n	8006d0e <_strtod_l+0x77e>
 8006cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cfe:	9905      	ldr	r1, [sp, #20]
 8006d00:	4620      	mov	r0, r4
 8006d02:	f001 fee3 	bl	8008acc <__pow5mult>
 8006d06:	9005      	str	r0, [sp, #20]
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f ae89 	beq.w	8006a20 <_strtod_l+0x490>
 8006d0e:	2f00      	cmp	r7, #0
 8006d10:	dd08      	ble.n	8006d24 <_strtod_l+0x794>
 8006d12:	9905      	ldr	r1, [sp, #20]
 8006d14:	463a      	mov	r2, r7
 8006d16:	4620      	mov	r0, r4
 8006d18:	f001 ff32 	bl	8008b80 <__lshift>
 8006d1c:	9005      	str	r0, [sp, #20]
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f ae7e 	beq.w	8006a20 <_strtod_l+0x490>
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	dd08      	ble.n	8006d3c <_strtod_l+0x7ac>
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f001 ff26 	bl	8008b80 <__lshift>
 8006d34:	4606      	mov	r6, r0
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f43f ae72 	beq.w	8006a20 <_strtod_l+0x490>
 8006d3c:	9a05      	ldr	r2, [sp, #20]
 8006d3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d40:	4620      	mov	r0, r4
 8006d42:	f001 ffa9 	bl	8008c98 <__mdiff>
 8006d46:	4605      	mov	r5, r0
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f43f ae69 	beq.w	8006a20 <_strtod_l+0x490>
 8006d4e:	68c3      	ldr	r3, [r0, #12]
 8006d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d52:	2300      	movs	r3, #0
 8006d54:	60c3      	str	r3, [r0, #12]
 8006d56:	4631      	mov	r1, r6
 8006d58:	f001 ff82 	bl	8008c60 <__mcmp>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	da60      	bge.n	8006e22 <_strtod_l+0x892>
 8006d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d62:	ea53 030a 	orrs.w	r3, r3, sl
 8006d66:	f040 8082 	bne.w	8006e6e <_strtod_l+0x8de>
 8006d6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d17d      	bne.n	8006e6e <_strtod_l+0x8de>
 8006d72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d76:	0d1b      	lsrs	r3, r3, #20
 8006d78:	051b      	lsls	r3, r3, #20
 8006d7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d7e:	d976      	bls.n	8006e6e <_strtod_l+0x8de>
 8006d80:	696b      	ldr	r3, [r5, #20]
 8006d82:	b913      	cbnz	r3, 8006d8a <_strtod_l+0x7fa>
 8006d84:	692b      	ldr	r3, [r5, #16]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	dd71      	ble.n	8006e6e <_strtod_l+0x8de>
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 fef6 	bl	8008b80 <__lshift>
 8006d94:	4631      	mov	r1, r6
 8006d96:	4605      	mov	r5, r0
 8006d98:	f001 ff62 	bl	8008c60 <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	dd66      	ble.n	8006e6e <_strtod_l+0x8de>
 8006da0:	9904      	ldr	r1, [sp, #16]
 8006da2:	4a53      	ldr	r2, [pc, #332]	; (8006ef0 <_strtod_l+0x960>)
 8006da4:	465b      	mov	r3, fp
 8006da6:	2900      	cmp	r1, #0
 8006da8:	f000 8081 	beq.w	8006eae <_strtod_l+0x91e>
 8006dac:	ea02 010b 	and.w	r1, r2, fp
 8006db0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006db4:	dc7b      	bgt.n	8006eae <_strtod_l+0x91e>
 8006db6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006dba:	f77f aea9 	ble.w	8006b10 <_strtod_l+0x580>
 8006dbe:	4b4d      	ldr	r3, [pc, #308]	; (8006ef4 <_strtod_l+0x964>)
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f7f9 fc1f 	bl	8000608 <__aeabi_dmul>
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4303      	orrs	r3, r0
 8006dce:	bf08      	it	eq
 8006dd0:	2322      	moveq	r3, #34	; 0x22
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	468b      	mov	fp, r1
 8006dd6:	bf08      	it	eq
 8006dd8:	6023      	streq	r3, [r4, #0]
 8006dda:	e62b      	b.n	8006a34 <_strtod_l+0x4a4>
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	ea03 0a0a 	and.w	sl, r3, sl
 8006de8:	e6e3      	b.n	8006bb2 <_strtod_l+0x622>
 8006dea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006dee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006df2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006df6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006dfa:	fa01 f308 	lsl.w	r3, r1, r8
 8006dfe:	9308      	str	r3, [sp, #32]
 8006e00:	910d      	str	r1, [sp, #52]	; 0x34
 8006e02:	e746      	b.n	8006c92 <_strtod_l+0x702>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9308      	str	r3, [sp, #32]
 8006e08:	2301      	movs	r3, #1
 8006e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e0c:	e741      	b.n	8006c92 <_strtod_l+0x702>
 8006e0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e10:	4642      	mov	r2, r8
 8006e12:	4620      	mov	r0, r4
 8006e14:	f001 feb4 	bl	8008b80 <__lshift>
 8006e18:	9018      	str	r0, [sp, #96]	; 0x60
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f47f af6b 	bne.w	8006cf6 <_strtod_l+0x766>
 8006e20:	e5fe      	b.n	8006a20 <_strtod_l+0x490>
 8006e22:	465f      	mov	r7, fp
 8006e24:	d16e      	bne.n	8006f04 <_strtod_l+0x974>
 8006e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e2c:	b342      	cbz	r2, 8006e80 <_strtod_l+0x8f0>
 8006e2e:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <_strtod_l+0x968>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d128      	bne.n	8006e86 <_strtod_l+0x8f6>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	4651      	mov	r1, sl
 8006e38:	b1eb      	cbz	r3, 8006e76 <_strtod_l+0x8e6>
 8006e3a:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <_strtod_l+0x960>)
 8006e3c:	403b      	ands	r3, r7
 8006e3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e42:	f04f 32ff 	mov.w	r2, #4294967295
 8006e46:	d819      	bhi.n	8006e7c <_strtod_l+0x8ec>
 8006e48:	0d1b      	lsrs	r3, r3, #20
 8006e4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	4299      	cmp	r1, r3
 8006e54:	d117      	bne.n	8006e86 <_strtod_l+0x8f6>
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <_strtod_l+0x96c>)
 8006e58:	429f      	cmp	r7, r3
 8006e5a:	d102      	bne.n	8006e62 <_strtod_l+0x8d2>
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f43f addf 	beq.w	8006a20 <_strtod_l+0x490>
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <_strtod_l+0x960>)
 8006e64:	403b      	ands	r3, r7
 8006e66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006e6a:	f04f 0a00 	mov.w	sl, #0
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1a4      	bne.n	8006dbe <_strtod_l+0x82e>
 8006e74:	e5de      	b.n	8006a34 <_strtod_l+0x4a4>
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	e7ea      	b.n	8006e52 <_strtod_l+0x8c2>
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	e7e8      	b.n	8006e52 <_strtod_l+0x8c2>
 8006e80:	ea53 030a 	orrs.w	r3, r3, sl
 8006e84:	d08c      	beq.n	8006da0 <_strtod_l+0x810>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	b1db      	cbz	r3, 8006ec2 <_strtod_l+0x932>
 8006e8a:	423b      	tst	r3, r7
 8006e8c:	d0ef      	beq.n	8006e6e <_strtod_l+0x8de>
 8006e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e90:	9a04      	ldr	r2, [sp, #16]
 8006e92:	4650      	mov	r0, sl
 8006e94:	4659      	mov	r1, fp
 8006e96:	b1c3      	cbz	r3, 8006eca <_strtod_l+0x93a>
 8006e98:	f7ff fb5e 	bl	8006558 <sulp>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	ec51 0b18 	vmov	r0, r1, d8
 8006ea4:	f7f9 f9fa 	bl	800029c <__adddf3>
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	e7df      	b.n	8006e6e <_strtod_l+0x8de>
 8006eae:	4013      	ands	r3, r2
 8006eb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006eb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006eb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ebc:	f04f 3aff 	mov.w	sl, #4294967295
 8006ec0:	e7d5      	b.n	8006e6e <_strtod_l+0x8de>
 8006ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec4:	ea13 0f0a 	tst.w	r3, sl
 8006ec8:	e7e0      	b.n	8006e8c <_strtod_l+0x8fc>
 8006eca:	f7ff fb45 	bl	8006558 <sulp>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	ec51 0b18 	vmov	r0, r1, d8
 8006ed6:	f7f9 f9df 	bl	8000298 <__aeabi_dsub>
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	4682      	mov	sl, r0
 8006ee0:	468b      	mov	fp, r1
 8006ee2:	f7f9 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d0c1      	beq.n	8006e6e <_strtod_l+0x8de>
 8006eea:	e611      	b.n	8006b10 <_strtod_l+0x580>
 8006eec:	fffffc02 	.word	0xfffffc02
 8006ef0:	7ff00000 	.word	0x7ff00000
 8006ef4:	39500000 	.word	0x39500000
 8006ef8:	000fffff 	.word	0x000fffff
 8006efc:	7fefffff 	.word	0x7fefffff
 8006f00:	0800a7d0 	.word	0x0800a7d0
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	f002 f828 	bl	8008f5c <__ratio>
 8006f0c:	ec59 8b10 	vmov	r8, r9, d0
 8006f10:	ee10 0a10 	vmov	r0, s0
 8006f14:	2200      	movs	r2, #0
 8006f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fdf0 	bl	8000b00 <__aeabi_dcmple>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d07a      	beq.n	800701a <_strtod_l+0xa8a>
 8006f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04a      	beq.n	8006fc0 <_strtod_l+0xa30>
 8006f2a:	4b95      	ldr	r3, [pc, #596]	; (8007180 <_strtod_l+0xbf0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007180 <_strtod_l+0xbf0>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	4b92      	ldr	r3, [pc, #584]	; (8007184 <_strtod_l+0xbf4>)
 8006f3c:	403b      	ands	r3, r7
 8006f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f42:	4b91      	ldr	r3, [pc, #580]	; (8007188 <_strtod_l+0xbf8>)
 8006f44:	429a      	cmp	r2, r3
 8006f46:	f040 80b0 	bne.w	80070aa <_strtod_l+0xb1a>
 8006f4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006f52:	ec4b ab10 	vmov	d0, sl, fp
 8006f56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f5a:	f001 ff27 	bl	8008dac <__ulp>
 8006f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f62:	ec53 2b10 	vmov	r2, r3, d0
 8006f66:	f7f9 fb4f 	bl	8000608 <__aeabi_dmul>
 8006f6a:	4652      	mov	r2, sl
 8006f6c:	465b      	mov	r3, fp
 8006f6e:	f7f9 f995 	bl	800029c <__adddf3>
 8006f72:	460b      	mov	r3, r1
 8006f74:	4983      	ldr	r1, [pc, #524]	; (8007184 <_strtod_l+0xbf4>)
 8006f76:	4a85      	ldr	r2, [pc, #532]	; (800718c <_strtod_l+0xbfc>)
 8006f78:	4019      	ands	r1, r3
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	d960      	bls.n	8007042 <_strtod_l+0xab2>
 8006f80:	ee18 3a90 	vmov	r3, s17
 8006f84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d104      	bne.n	8006f96 <_strtod_l+0xa06>
 8006f8c:	ee18 3a10 	vmov	r3, s16
 8006f90:	3301      	adds	r3, #1
 8006f92:	f43f ad45 	beq.w	8006a20 <_strtod_l+0x490>
 8006f96:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007198 <_strtod_l+0xc08>
 8006f9a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f001 fbd1 	bl	8008748 <_Bfree>
 8006fa6:	9905      	ldr	r1, [sp, #20]
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 fbcd 	bl	8008748 <_Bfree>
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f001 fbc9 	bl	8008748 <_Bfree>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f001 fbc5 	bl	8008748 <_Bfree>
 8006fbe:	e61a      	b.n	8006bf6 <_strtod_l+0x666>
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	d11b      	bne.n	8006ffe <_strtod_l+0xa6e>
 8006fc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fca:	b9f3      	cbnz	r3, 800700a <_strtod_l+0xa7a>
 8006fcc:	4b6c      	ldr	r3, [pc, #432]	; (8007180 <_strtod_l+0xbf0>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7f9 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8006fd8:	b9d0      	cbnz	r0, 8007010 <_strtod_l+0xa80>
 8006fda:	4640      	mov	r0, r8
 8006fdc:	4649      	mov	r1, r9
 8006fde:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <_strtod_l+0xc00>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	4689      	mov	r9, r1
 8006fea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006ff2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ff4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ffc:	e79d      	b.n	8006f3a <_strtod_l+0x9aa>
 8006ffe:	f1ba 0f01 	cmp.w	sl, #1
 8007002:	d102      	bne.n	800700a <_strtod_l+0xa7a>
 8007004:	2f00      	cmp	r7, #0
 8007006:	f43f ad83 	beq.w	8006b10 <_strtod_l+0x580>
 800700a:	4b62      	ldr	r3, [pc, #392]	; (8007194 <_strtod_l+0xc04>)
 800700c:	2200      	movs	r2, #0
 800700e:	e78e      	b.n	8006f2e <_strtod_l+0x99e>
 8007010:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007190 <_strtod_l+0xc00>
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	e7e7      	b.n	8006fea <_strtod_l+0xa5a>
 800701a:	4b5d      	ldr	r3, [pc, #372]	; (8007190 <_strtod_l+0xc00>)
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	2200      	movs	r2, #0
 8007022:	f7f9 faf1 	bl	8000608 <__aeabi_dmul>
 8007026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007028:	4680      	mov	r8, r0
 800702a:	4689      	mov	r9, r1
 800702c:	b933      	cbnz	r3, 800703c <_strtod_l+0xaac>
 800702e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007032:	900e      	str	r0, [sp, #56]	; 0x38
 8007034:	930f      	str	r3, [sp, #60]	; 0x3c
 8007036:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800703a:	e7dd      	b.n	8006ff8 <_strtod_l+0xa68>
 800703c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007040:	e7f9      	b.n	8007036 <_strtod_l+0xaa6>
 8007042:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1a8      	bne.n	8006f9e <_strtod_l+0xa0e>
 800704c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007052:	0d1b      	lsrs	r3, r3, #20
 8007054:	051b      	lsls	r3, r3, #20
 8007056:	429a      	cmp	r2, r3
 8007058:	d1a1      	bne.n	8006f9e <_strtod_l+0xa0e>
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fe83 	bl	8000d68 <__aeabi_d2lz>
 8007062:	f7f9 faa3 	bl	80005ac <__aeabi_l2d>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	f7f9 f913 	bl	8000298 <__aeabi_dsub>
 8007072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007078:	ea43 030a 	orr.w	r3, r3, sl
 800707c:	4313      	orrs	r3, r2
 800707e:	4680      	mov	r8, r0
 8007080:	4689      	mov	r9, r1
 8007082:	d055      	beq.n	8007130 <_strtod_l+0xba0>
 8007084:	a336      	add	r3, pc, #216	; (adr r3, 8007160 <_strtod_l+0xbd0>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800708e:	2800      	cmp	r0, #0
 8007090:	f47f acd0 	bne.w	8006a34 <_strtod_l+0x4a4>
 8007094:	a334      	add	r3, pc, #208	; (adr r3, 8007168 <_strtod_l+0xbd8>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	f7f9 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f af7b 	beq.w	8006f9e <_strtod_l+0xa0e>
 80070a8:	e4c4      	b.n	8006a34 <_strtod_l+0x4a4>
 80070aa:	9b04      	ldr	r3, [sp, #16]
 80070ac:	b333      	cbz	r3, 80070fc <_strtod_l+0xb6c>
 80070ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070b4:	d822      	bhi.n	80070fc <_strtod_l+0xb6c>
 80070b6:	a32e      	add	r3, pc, #184	; (adr r3, 8007170 <_strtod_l+0xbe0>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd1e 	bl	8000b00 <__aeabi_dcmple>
 80070c4:	b1a0      	cbz	r0, 80070f0 <_strtod_l+0xb60>
 80070c6:	4649      	mov	r1, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	f7f9 fd75 	bl	8000bb8 <__aeabi_d2uiz>
 80070ce:	2801      	cmp	r0, #1
 80070d0:	bf38      	it	cc
 80070d2:	2001      	movcc	r0, #1
 80070d4:	f7f9 fa1e 	bl	8000514 <__aeabi_ui2d>
 80070d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070da:	4680      	mov	r8, r0
 80070dc:	4689      	mov	r9, r1
 80070de:	bb23      	cbnz	r3, 800712a <_strtod_l+0xb9a>
 80070e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070e4:	9010      	str	r0, [sp, #64]	; 0x40
 80070e6:	9311      	str	r3, [sp, #68]	; 0x44
 80070e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	9309      	str	r3, [sp, #36]	; 0x24
 80070fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007100:	eeb0 0a48 	vmov.f32	s0, s16
 8007104:	eef0 0a68 	vmov.f32	s1, s17
 8007108:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800710c:	f001 fe4e 	bl	8008dac <__ulp>
 8007110:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007114:	ec53 2b10 	vmov	r2, r3, d0
 8007118:	f7f9 fa76 	bl	8000608 <__aeabi_dmul>
 800711c:	ec53 2b18 	vmov	r2, r3, d8
 8007120:	f7f9 f8bc 	bl	800029c <__adddf3>
 8007124:	4682      	mov	sl, r0
 8007126:	468b      	mov	fp, r1
 8007128:	e78d      	b.n	8007046 <_strtod_l+0xab6>
 800712a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800712e:	e7db      	b.n	80070e8 <_strtod_l+0xb58>
 8007130:	a311      	add	r3, pc, #68	; (adr r3, 8007178 <_strtod_l+0xbe8>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800713a:	e7b2      	b.n	80070a2 <_strtod_l+0xb12>
 800713c:	2300      	movs	r3, #0
 800713e:	930a      	str	r3, [sp, #40]	; 0x28
 8007140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	f7ff ba6b 	b.w	8006620 <_strtod_l+0x90>
 800714a:	2a65      	cmp	r2, #101	; 0x65
 800714c:	f43f ab5f 	beq.w	800680e <_strtod_l+0x27e>
 8007150:	2a45      	cmp	r2, #69	; 0x45
 8007152:	f43f ab5c 	beq.w	800680e <_strtod_l+0x27e>
 8007156:	2301      	movs	r3, #1
 8007158:	f7ff bb94 	b.w	8006884 <_strtod_l+0x2f4>
 800715c:	f3af 8000 	nop.w
 8007160:	94a03595 	.word	0x94a03595
 8007164:	3fdfffff 	.word	0x3fdfffff
 8007168:	35afe535 	.word	0x35afe535
 800716c:	3fe00000 	.word	0x3fe00000
 8007170:	ffc00000 	.word	0xffc00000
 8007174:	41dfffff 	.word	0x41dfffff
 8007178:	94a03595 	.word	0x94a03595
 800717c:	3fcfffff 	.word	0x3fcfffff
 8007180:	3ff00000 	.word	0x3ff00000
 8007184:	7ff00000 	.word	0x7ff00000
 8007188:	7fe00000 	.word	0x7fe00000
 800718c:	7c9fffff 	.word	0x7c9fffff
 8007190:	3fe00000 	.word	0x3fe00000
 8007194:	bff00000 	.word	0xbff00000
 8007198:	7fefffff 	.word	0x7fefffff

0800719c <_strtod_r>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <_strtod_r+0x8>)
 800719e:	f7ff b9f7 	b.w	8006590 <_strtod_l>
 80071a2:	bf00      	nop
 80071a4:	2000007c 	.word	0x2000007c

080071a8 <_strtol_l.constprop.0>:
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ae:	d001      	beq.n	80071b4 <_strtol_l.constprop.0+0xc>
 80071b0:	2b24      	cmp	r3, #36	; 0x24
 80071b2:	d906      	bls.n	80071c2 <_strtol_l.constprop.0+0x1a>
 80071b4:	f7fe f9f0 	bl	8005598 <__errno>
 80071b8:	2316      	movs	r3, #22
 80071ba:	6003      	str	r3, [r0, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072a8 <_strtol_l.constprop.0+0x100>
 80071c6:	460d      	mov	r5, r1
 80071c8:	462e      	mov	r6, r5
 80071ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80071d2:	f017 0708 	ands.w	r7, r7, #8
 80071d6:	d1f7      	bne.n	80071c8 <_strtol_l.constprop.0+0x20>
 80071d8:	2c2d      	cmp	r4, #45	; 0x2d
 80071da:	d132      	bne.n	8007242 <_strtol_l.constprop.0+0x9a>
 80071dc:	782c      	ldrb	r4, [r5, #0]
 80071de:	2701      	movs	r7, #1
 80071e0:	1cb5      	adds	r5, r6, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d05b      	beq.n	800729e <_strtol_l.constprop.0+0xf6>
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d109      	bne.n	80071fe <_strtol_l.constprop.0+0x56>
 80071ea:	2c30      	cmp	r4, #48	; 0x30
 80071ec:	d107      	bne.n	80071fe <_strtol_l.constprop.0+0x56>
 80071ee:	782c      	ldrb	r4, [r5, #0]
 80071f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071f4:	2c58      	cmp	r4, #88	; 0x58
 80071f6:	d14d      	bne.n	8007294 <_strtol_l.constprop.0+0xec>
 80071f8:	786c      	ldrb	r4, [r5, #1]
 80071fa:	2310      	movs	r3, #16
 80071fc:	3502      	adds	r5, #2
 80071fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007202:	f108 38ff 	add.w	r8, r8, #4294967295
 8007206:	f04f 0c00 	mov.w	ip, #0
 800720a:	fbb8 f9f3 	udiv	r9, r8, r3
 800720e:	4666      	mov	r6, ip
 8007210:	fb03 8a19 	mls	sl, r3, r9, r8
 8007214:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007218:	f1be 0f09 	cmp.w	lr, #9
 800721c:	d816      	bhi.n	800724c <_strtol_l.constprop.0+0xa4>
 800721e:	4674      	mov	r4, lr
 8007220:	42a3      	cmp	r3, r4
 8007222:	dd24      	ble.n	800726e <_strtol_l.constprop.0+0xc6>
 8007224:	f1bc 0f00 	cmp.w	ip, #0
 8007228:	db1e      	blt.n	8007268 <_strtol_l.constprop.0+0xc0>
 800722a:	45b1      	cmp	r9, r6
 800722c:	d31c      	bcc.n	8007268 <_strtol_l.constprop.0+0xc0>
 800722e:	d101      	bne.n	8007234 <_strtol_l.constprop.0+0x8c>
 8007230:	45a2      	cmp	sl, r4
 8007232:	db19      	blt.n	8007268 <_strtol_l.constprop.0+0xc0>
 8007234:	fb06 4603 	mla	r6, r6, r3, r4
 8007238:	f04f 0c01 	mov.w	ip, #1
 800723c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007240:	e7e8      	b.n	8007214 <_strtol_l.constprop.0+0x6c>
 8007242:	2c2b      	cmp	r4, #43	; 0x2b
 8007244:	bf04      	itt	eq
 8007246:	782c      	ldrbeq	r4, [r5, #0]
 8007248:	1cb5      	addeq	r5, r6, #2
 800724a:	e7ca      	b.n	80071e2 <_strtol_l.constprop.0+0x3a>
 800724c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007250:	f1be 0f19 	cmp.w	lr, #25
 8007254:	d801      	bhi.n	800725a <_strtol_l.constprop.0+0xb2>
 8007256:	3c37      	subs	r4, #55	; 0x37
 8007258:	e7e2      	b.n	8007220 <_strtol_l.constprop.0+0x78>
 800725a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800725e:	f1be 0f19 	cmp.w	lr, #25
 8007262:	d804      	bhi.n	800726e <_strtol_l.constprop.0+0xc6>
 8007264:	3c57      	subs	r4, #87	; 0x57
 8007266:	e7db      	b.n	8007220 <_strtol_l.constprop.0+0x78>
 8007268:	f04f 3cff 	mov.w	ip, #4294967295
 800726c:	e7e6      	b.n	800723c <_strtol_l.constprop.0+0x94>
 800726e:	f1bc 0f00 	cmp.w	ip, #0
 8007272:	da05      	bge.n	8007280 <_strtol_l.constprop.0+0xd8>
 8007274:	2322      	movs	r3, #34	; 0x22
 8007276:	6003      	str	r3, [r0, #0]
 8007278:	4646      	mov	r6, r8
 800727a:	b942      	cbnz	r2, 800728e <_strtol_l.constprop.0+0xe6>
 800727c:	4630      	mov	r0, r6
 800727e:	e79e      	b.n	80071be <_strtol_l.constprop.0+0x16>
 8007280:	b107      	cbz	r7, 8007284 <_strtol_l.constprop.0+0xdc>
 8007282:	4276      	negs	r6, r6
 8007284:	2a00      	cmp	r2, #0
 8007286:	d0f9      	beq.n	800727c <_strtol_l.constprop.0+0xd4>
 8007288:	f1bc 0f00 	cmp.w	ip, #0
 800728c:	d000      	beq.n	8007290 <_strtol_l.constprop.0+0xe8>
 800728e:	1e69      	subs	r1, r5, #1
 8007290:	6011      	str	r1, [r2, #0]
 8007292:	e7f3      	b.n	800727c <_strtol_l.constprop.0+0xd4>
 8007294:	2430      	movs	r4, #48	; 0x30
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1b1      	bne.n	80071fe <_strtol_l.constprop.0+0x56>
 800729a:	2308      	movs	r3, #8
 800729c:	e7af      	b.n	80071fe <_strtol_l.constprop.0+0x56>
 800729e:	2c30      	cmp	r4, #48	; 0x30
 80072a0:	d0a5      	beq.n	80071ee <_strtol_l.constprop.0+0x46>
 80072a2:	230a      	movs	r3, #10
 80072a4:	e7ab      	b.n	80071fe <_strtol_l.constprop.0+0x56>
 80072a6:	bf00      	nop
 80072a8:	0800a7f9 	.word	0x0800a7f9

080072ac <_strtol_r>:
 80072ac:	f7ff bf7c 	b.w	80071a8 <_strtol_l.constprop.0>

080072b0 <quorem>:
 80072b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	6903      	ldr	r3, [r0, #16]
 80072b6:	690c      	ldr	r4, [r1, #16]
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	4607      	mov	r7, r0
 80072bc:	f2c0 8081 	blt.w	80073c2 <quorem+0x112>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	f101 0814 	add.w	r8, r1, #20
 80072c6:	f100 0514 	add.w	r5, r0, #20
 80072ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d8:	3301      	adds	r3, #1
 80072da:	429a      	cmp	r2, r3
 80072dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e8:	d331      	bcc.n	800734e <quorem+0x9e>
 80072ea:	f04f 0e00 	mov.w	lr, #0
 80072ee:	4640      	mov	r0, r8
 80072f0:	46ac      	mov	ip, r5
 80072f2:	46f2      	mov	sl, lr
 80072f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072f8:	b293      	uxth	r3, r2
 80072fa:	fb06 e303 	mla	r3, r6, r3, lr
 80072fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007302:	b29b      	uxth	r3, r3
 8007304:	ebaa 0303 	sub.w	r3, sl, r3
 8007308:	f8dc a000 	ldr.w	sl, [ip]
 800730c:	0c12      	lsrs	r2, r2, #16
 800730e:	fa13 f38a 	uxtah	r3, r3, sl
 8007312:	fb06 e202 	mla	r2, r6, r2, lr
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800731e:	b292      	uxth	r2, r2
 8007320:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007328:	f8bd 3000 	ldrh.w	r3, [sp]
 800732c:	4581      	cmp	r9, r0
 800732e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007332:	f84c 3b04 	str.w	r3, [ip], #4
 8007336:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800733a:	d2db      	bcs.n	80072f4 <quorem+0x44>
 800733c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007340:	b92b      	cbnz	r3, 800734e <quorem+0x9e>
 8007342:	9b01      	ldr	r3, [sp, #4]
 8007344:	3b04      	subs	r3, #4
 8007346:	429d      	cmp	r5, r3
 8007348:	461a      	mov	r2, r3
 800734a:	d32e      	bcc.n	80073aa <quorem+0xfa>
 800734c:	613c      	str	r4, [r7, #16]
 800734e:	4638      	mov	r0, r7
 8007350:	f001 fc86 	bl	8008c60 <__mcmp>
 8007354:	2800      	cmp	r0, #0
 8007356:	db24      	blt.n	80073a2 <quorem+0xf2>
 8007358:	3601      	adds	r6, #1
 800735a:	4628      	mov	r0, r5
 800735c:	f04f 0c00 	mov.w	ip, #0
 8007360:	f858 2b04 	ldr.w	r2, [r8], #4
 8007364:	f8d0 e000 	ldr.w	lr, [r0]
 8007368:	b293      	uxth	r3, r2
 800736a:	ebac 0303 	sub.w	r3, ip, r3
 800736e:	0c12      	lsrs	r2, r2, #16
 8007370:	fa13 f38e 	uxtah	r3, r3, lr
 8007374:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007382:	45c1      	cmp	r9, r8
 8007384:	f840 3b04 	str.w	r3, [r0], #4
 8007388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800738c:	d2e8      	bcs.n	8007360 <quorem+0xb0>
 800738e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007396:	b922      	cbnz	r2, 80073a2 <quorem+0xf2>
 8007398:	3b04      	subs	r3, #4
 800739a:	429d      	cmp	r5, r3
 800739c:	461a      	mov	r2, r3
 800739e:	d30a      	bcc.n	80073b6 <quorem+0x106>
 80073a0:	613c      	str	r4, [r7, #16]
 80073a2:	4630      	mov	r0, r6
 80073a4:	b003      	add	sp, #12
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	3b04      	subs	r3, #4
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d1cc      	bne.n	800734c <quorem+0x9c>
 80073b2:	3c01      	subs	r4, #1
 80073b4:	e7c7      	b.n	8007346 <quorem+0x96>
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	3b04      	subs	r3, #4
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	d1f0      	bne.n	80073a0 <quorem+0xf0>
 80073be:	3c01      	subs	r4, #1
 80073c0:	e7eb      	b.n	800739a <quorem+0xea>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e7ee      	b.n	80073a4 <quorem+0xf4>
	...

080073c8 <_dtoa_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ed2d 8b04 	vpush	{d8-d9}
 80073d0:	ec57 6b10 	vmov	r6, r7, d0
 80073d4:	b093      	sub	sp, #76	; 0x4c
 80073d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073dc:	9106      	str	r1, [sp, #24]
 80073de:	ee10 aa10 	vmov	sl, s0
 80073e2:	4604      	mov	r4, r0
 80073e4:	9209      	str	r2, [sp, #36]	; 0x24
 80073e6:	930c      	str	r3, [sp, #48]	; 0x30
 80073e8:	46bb      	mov	fp, r7
 80073ea:	b975      	cbnz	r5, 800740a <_dtoa_r+0x42>
 80073ec:	2010      	movs	r0, #16
 80073ee:	f7fe f8fd 	bl	80055ec <malloc>
 80073f2:	4602      	mov	r2, r0
 80073f4:	6260      	str	r0, [r4, #36]	; 0x24
 80073f6:	b920      	cbnz	r0, 8007402 <_dtoa_r+0x3a>
 80073f8:	4ba7      	ldr	r3, [pc, #668]	; (8007698 <_dtoa_r+0x2d0>)
 80073fa:	21ea      	movs	r1, #234	; 0xea
 80073fc:	48a7      	ldr	r0, [pc, #668]	; (800769c <_dtoa_r+0x2d4>)
 80073fe:	f001 ffc1 	bl	8009384 <__assert_func>
 8007402:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007406:	6005      	str	r5, [r0, #0]
 8007408:	60c5      	str	r5, [r0, #12]
 800740a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	b151      	cbz	r1, 8007426 <_dtoa_r+0x5e>
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	604a      	str	r2, [r1, #4]
 8007414:	2301      	movs	r3, #1
 8007416:	4093      	lsls	r3, r2
 8007418:	608b      	str	r3, [r1, #8]
 800741a:	4620      	mov	r0, r4
 800741c:	f001 f994 	bl	8008748 <_Bfree>
 8007420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	1e3b      	subs	r3, r7, #0
 8007428:	bfaa      	itet	ge
 800742a:	2300      	movge	r3, #0
 800742c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007430:	f8c8 3000 	strge.w	r3, [r8]
 8007434:	4b9a      	ldr	r3, [pc, #616]	; (80076a0 <_dtoa_r+0x2d8>)
 8007436:	bfbc      	itt	lt
 8007438:	2201      	movlt	r2, #1
 800743a:	f8c8 2000 	strlt.w	r2, [r8]
 800743e:	ea33 030b 	bics.w	r3, r3, fp
 8007442:	d11b      	bne.n	800747c <_dtoa_r+0xb4>
 8007444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007446:	f242 730f 	movw	r3, #9999	; 0x270f
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007450:	4333      	orrs	r3, r6
 8007452:	f000 8592 	beq.w	8007f7a <_dtoa_r+0xbb2>
 8007456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007458:	b963      	cbnz	r3, 8007474 <_dtoa_r+0xac>
 800745a:	4b92      	ldr	r3, [pc, #584]	; (80076a4 <_dtoa_r+0x2dc>)
 800745c:	e022      	b.n	80074a4 <_dtoa_r+0xdc>
 800745e:	4b92      	ldr	r3, [pc, #584]	; (80076a8 <_dtoa_r+0x2e0>)
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	3308      	adds	r3, #8
 8007464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	9801      	ldr	r0, [sp, #4]
 800746a:	b013      	add	sp, #76	; 0x4c
 800746c:	ecbd 8b04 	vpop	{d8-d9}
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	4b8b      	ldr	r3, [pc, #556]	; (80076a4 <_dtoa_r+0x2dc>)
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	3303      	adds	r3, #3
 800747a:	e7f3      	b.n	8007464 <_dtoa_r+0x9c>
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	4650      	mov	r0, sl
 8007482:	4659      	mov	r1, fp
 8007484:	f7f9 fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8007488:	ec4b ab19 	vmov	d9, sl, fp
 800748c:	4680      	mov	r8, r0
 800748e:	b158      	cbz	r0, 80074a8 <_dtoa_r+0xe0>
 8007490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007492:	2301      	movs	r3, #1
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 856b 	beq.w	8007f74 <_dtoa_r+0xbac>
 800749e:	4883      	ldr	r0, [pc, #524]	; (80076ac <_dtoa_r+0x2e4>)
 80074a0:	6018      	str	r0, [r3, #0]
 80074a2:	1e43      	subs	r3, r0, #1
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	e7df      	b.n	8007468 <_dtoa_r+0xa0>
 80074a8:	ec4b ab10 	vmov	d0, sl, fp
 80074ac:	aa10      	add	r2, sp, #64	; 0x40
 80074ae:	a911      	add	r1, sp, #68	; 0x44
 80074b0:	4620      	mov	r0, r4
 80074b2:	f001 fcf7 	bl	8008ea4 <__d2b>
 80074b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074ba:	ee08 0a10 	vmov	s16, r0
 80074be:	2d00      	cmp	r5, #0
 80074c0:	f000 8084 	beq.w	80075cc <_dtoa_r+0x204>
 80074c4:	ee19 3a90 	vmov	r3, s19
 80074c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074d0:	4656      	mov	r6, sl
 80074d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074de:	4b74      	ldr	r3, [pc, #464]	; (80076b0 <_dtoa_r+0x2e8>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	f7f8 fed7 	bl	8000298 <__aeabi_dsub>
 80074ea:	a365      	add	r3, pc, #404	; (adr r3, 8007680 <_dtoa_r+0x2b8>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f9 f88a 	bl	8000608 <__aeabi_dmul>
 80074f4:	a364      	add	r3, pc, #400	; (adr r3, 8007688 <_dtoa_r+0x2c0>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	f7f8 fecf 	bl	800029c <__adddf3>
 80074fe:	4606      	mov	r6, r0
 8007500:	4628      	mov	r0, r5
 8007502:	460f      	mov	r7, r1
 8007504:	f7f9 f816 	bl	8000534 <__aeabi_i2d>
 8007508:	a361      	add	r3, pc, #388	; (adr r3, 8007690 <_dtoa_r+0x2c8>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 f87b 	bl	8000608 <__aeabi_dmul>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4630      	mov	r0, r6
 8007518:	4639      	mov	r1, r7
 800751a:	f7f8 febf 	bl	800029c <__adddf3>
 800751e:	4606      	mov	r6, r0
 8007520:	460f      	mov	r7, r1
 8007522:	f7f9 fb21 	bl	8000b68 <__aeabi_d2iz>
 8007526:	2200      	movs	r2, #0
 8007528:	9000      	str	r0, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	4630      	mov	r0, r6
 800752e:	4639      	mov	r1, r7
 8007530:	f7f9 fadc 	bl	8000aec <__aeabi_dcmplt>
 8007534:	b150      	cbz	r0, 800754c <_dtoa_r+0x184>
 8007536:	9800      	ldr	r0, [sp, #0]
 8007538:	f7f8 fffc 	bl	8000534 <__aeabi_i2d>
 800753c:	4632      	mov	r2, r6
 800753e:	463b      	mov	r3, r7
 8007540:	f7f9 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007544:	b910      	cbnz	r0, 800754c <_dtoa_r+0x184>
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	3b01      	subs	r3, #1
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	2b16      	cmp	r3, #22
 8007550:	d85a      	bhi.n	8007608 <_dtoa_r+0x240>
 8007552:	9a00      	ldr	r2, [sp, #0]
 8007554:	4b57      	ldr	r3, [pc, #348]	; (80076b4 <_dtoa_r+0x2ec>)
 8007556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	ec51 0b19 	vmov	r0, r1, d9
 8007562:	f7f9 fac3 	bl	8000aec <__aeabi_dcmplt>
 8007566:	2800      	cmp	r0, #0
 8007568:	d050      	beq.n	800760c <_dtoa_r+0x244>
 800756a:	9b00      	ldr	r3, [sp, #0]
 800756c:	3b01      	subs	r3, #1
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2300      	movs	r3, #0
 8007572:	930b      	str	r3, [sp, #44]	; 0x2c
 8007574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007576:	1b5d      	subs	r5, r3, r5
 8007578:	1e6b      	subs	r3, r5, #1
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	bf45      	ittet	mi
 800757e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007582:	9304      	strmi	r3, [sp, #16]
 8007584:	2300      	movpl	r3, #0
 8007586:	2300      	movmi	r3, #0
 8007588:	bf4c      	ite	mi
 800758a:	9305      	strmi	r3, [sp, #20]
 800758c:	9304      	strpl	r3, [sp, #16]
 800758e:	9b00      	ldr	r3, [sp, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	db3d      	blt.n	8007610 <_dtoa_r+0x248>
 8007594:	9b05      	ldr	r3, [sp, #20]
 8007596:	9a00      	ldr	r2, [sp, #0]
 8007598:	920a      	str	r2, [sp, #40]	; 0x28
 800759a:	4413      	add	r3, r2
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	2300      	movs	r3, #0
 80075a0:	9307      	str	r3, [sp, #28]
 80075a2:	9b06      	ldr	r3, [sp, #24]
 80075a4:	2b09      	cmp	r3, #9
 80075a6:	f200 8089 	bhi.w	80076bc <_dtoa_r+0x2f4>
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	bfc4      	itt	gt
 80075ae:	3b04      	subgt	r3, #4
 80075b0:	9306      	strgt	r3, [sp, #24]
 80075b2:	9b06      	ldr	r3, [sp, #24]
 80075b4:	f1a3 0302 	sub.w	r3, r3, #2
 80075b8:	bfcc      	ite	gt
 80075ba:	2500      	movgt	r5, #0
 80075bc:	2501      	movle	r5, #1
 80075be:	2b03      	cmp	r3, #3
 80075c0:	f200 8087 	bhi.w	80076d2 <_dtoa_r+0x30a>
 80075c4:	e8df f003 	tbb	[pc, r3]
 80075c8:	59383a2d 	.word	0x59383a2d
 80075cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075d0:	441d      	add	r5, r3
 80075d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	bfc1      	itttt	gt
 80075da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80075e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075ea:	bfda      	itte	le
 80075ec:	f1c3 0320 	rsble	r3, r3, #32
 80075f0:	fa06 f003 	lslle.w	r0, r6, r3
 80075f4:	4318      	orrgt	r0, r3
 80075f6:	f7f8 ff8d 	bl	8000514 <__aeabi_ui2d>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4606      	mov	r6, r0
 80075fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007602:	3d01      	subs	r5, #1
 8007604:	930e      	str	r3, [sp, #56]	; 0x38
 8007606:	e76a      	b.n	80074de <_dtoa_r+0x116>
 8007608:	2301      	movs	r3, #1
 800760a:	e7b2      	b.n	8007572 <_dtoa_r+0x1aa>
 800760c:	900b      	str	r0, [sp, #44]	; 0x2c
 800760e:	e7b1      	b.n	8007574 <_dtoa_r+0x1ac>
 8007610:	9b04      	ldr	r3, [sp, #16]
 8007612:	9a00      	ldr	r2, [sp, #0]
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	4253      	negs	r3, r2
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	2300      	movs	r3, #0
 800761e:	930a      	str	r3, [sp, #40]	; 0x28
 8007620:	e7bf      	b.n	80075a2 <_dtoa_r+0x1da>
 8007622:	2300      	movs	r3, #0
 8007624:	9308      	str	r3, [sp, #32]
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	dc55      	bgt.n	80076d8 <_dtoa_r+0x310>
 800762c:	2301      	movs	r3, #1
 800762e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007632:	461a      	mov	r2, r3
 8007634:	9209      	str	r2, [sp, #36]	; 0x24
 8007636:	e00c      	b.n	8007652 <_dtoa_r+0x28a>
 8007638:	2301      	movs	r3, #1
 800763a:	e7f3      	b.n	8007624 <_dtoa_r+0x25c>
 800763c:	2300      	movs	r3, #0
 800763e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007640:	9308      	str	r3, [sp, #32]
 8007642:	9b00      	ldr	r3, [sp, #0]
 8007644:	4413      	add	r3, r2
 8007646:	9302      	str	r3, [sp, #8]
 8007648:	3301      	adds	r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	bfb8      	it	lt
 8007650:	2301      	movlt	r3, #1
 8007652:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007654:	2200      	movs	r2, #0
 8007656:	6042      	str	r2, [r0, #4]
 8007658:	2204      	movs	r2, #4
 800765a:	f102 0614 	add.w	r6, r2, #20
 800765e:	429e      	cmp	r6, r3
 8007660:	6841      	ldr	r1, [r0, #4]
 8007662:	d93d      	bls.n	80076e0 <_dtoa_r+0x318>
 8007664:	4620      	mov	r0, r4
 8007666:	f001 f82f 	bl	80086c8 <_Balloc>
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2800      	cmp	r0, #0
 800766e:	d13b      	bne.n	80076e8 <_dtoa_r+0x320>
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <_dtoa_r+0x2f0>)
 8007672:	4602      	mov	r2, r0
 8007674:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007678:	e6c0      	b.n	80073fc <_dtoa_r+0x34>
 800767a:	2301      	movs	r3, #1
 800767c:	e7df      	b.n	800763e <_dtoa_r+0x276>
 800767e:	bf00      	nop
 8007680:	636f4361 	.word	0x636f4361
 8007684:	3fd287a7 	.word	0x3fd287a7
 8007688:	8b60c8b3 	.word	0x8b60c8b3
 800768c:	3fc68a28 	.word	0x3fc68a28
 8007690:	509f79fb 	.word	0x509f79fb
 8007694:	3fd34413 	.word	0x3fd34413
 8007698:	0800a906 	.word	0x0800a906
 800769c:	0800a91d 	.word	0x0800a91d
 80076a0:	7ff00000 	.word	0x7ff00000
 80076a4:	0800a902 	.word	0x0800a902
 80076a8:	0800a8f9 	.word	0x0800a8f9
 80076ac:	0800a779 	.word	0x0800a779
 80076b0:	3ff80000 	.word	0x3ff80000
 80076b4:	0800aa88 	.word	0x0800aa88
 80076b8:	0800a978 	.word	0x0800a978
 80076bc:	2501      	movs	r5, #1
 80076be:	2300      	movs	r3, #0
 80076c0:	9306      	str	r3, [sp, #24]
 80076c2:	9508      	str	r5, [sp, #32]
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	2312      	movs	r3, #18
 80076d0:	e7b0      	b.n	8007634 <_dtoa_r+0x26c>
 80076d2:	2301      	movs	r3, #1
 80076d4:	9308      	str	r3, [sp, #32]
 80076d6:	e7f5      	b.n	80076c4 <_dtoa_r+0x2fc>
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076de:	e7b8      	b.n	8007652 <_dtoa_r+0x28a>
 80076e0:	3101      	adds	r1, #1
 80076e2:	6041      	str	r1, [r0, #4]
 80076e4:	0052      	lsls	r2, r2, #1
 80076e6:	e7b8      	b.n	800765a <_dtoa_r+0x292>
 80076e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ea:	9a01      	ldr	r2, [sp, #4]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	2b0e      	cmp	r3, #14
 80076f2:	f200 809d 	bhi.w	8007830 <_dtoa_r+0x468>
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	f000 809a 	beq.w	8007830 <_dtoa_r+0x468>
 80076fc:	9b00      	ldr	r3, [sp, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd32      	ble.n	8007768 <_dtoa_r+0x3a0>
 8007702:	4ab7      	ldr	r2, [pc, #732]	; (80079e0 <_dtoa_r+0x618>)
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800770c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007710:	9b00      	ldr	r3, [sp, #0]
 8007712:	05d8      	lsls	r0, r3, #23
 8007714:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007718:	d516      	bpl.n	8007748 <_dtoa_r+0x380>
 800771a:	4bb2      	ldr	r3, [pc, #712]	; (80079e4 <_dtoa_r+0x61c>)
 800771c:	ec51 0b19 	vmov	r0, r1, d9
 8007720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007724:	f7f9 f89a 	bl	800085c <__aeabi_ddiv>
 8007728:	f007 070f 	and.w	r7, r7, #15
 800772c:	4682      	mov	sl, r0
 800772e:	468b      	mov	fp, r1
 8007730:	2503      	movs	r5, #3
 8007732:	4eac      	ldr	r6, [pc, #688]	; (80079e4 <_dtoa_r+0x61c>)
 8007734:	b957      	cbnz	r7, 800774c <_dtoa_r+0x384>
 8007736:	4642      	mov	r2, r8
 8007738:	464b      	mov	r3, r9
 800773a:	4650      	mov	r0, sl
 800773c:	4659      	mov	r1, fp
 800773e:	f7f9 f88d 	bl	800085c <__aeabi_ddiv>
 8007742:	4682      	mov	sl, r0
 8007744:	468b      	mov	fp, r1
 8007746:	e028      	b.n	800779a <_dtoa_r+0x3d2>
 8007748:	2502      	movs	r5, #2
 800774a:	e7f2      	b.n	8007732 <_dtoa_r+0x36a>
 800774c:	07f9      	lsls	r1, r7, #31
 800774e:	d508      	bpl.n	8007762 <_dtoa_r+0x39a>
 8007750:	4640      	mov	r0, r8
 8007752:	4649      	mov	r1, r9
 8007754:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007758:	f7f8 ff56 	bl	8000608 <__aeabi_dmul>
 800775c:	3501      	adds	r5, #1
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	107f      	asrs	r7, r7, #1
 8007764:	3608      	adds	r6, #8
 8007766:	e7e5      	b.n	8007734 <_dtoa_r+0x36c>
 8007768:	f000 809b 	beq.w	80078a2 <_dtoa_r+0x4da>
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	4f9d      	ldr	r7, [pc, #628]	; (80079e4 <_dtoa_r+0x61c>)
 8007770:	425e      	negs	r6, r3
 8007772:	4b9b      	ldr	r3, [pc, #620]	; (80079e0 <_dtoa_r+0x618>)
 8007774:	f006 020f 	and.w	r2, r6, #15
 8007778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	ec51 0b19 	vmov	r0, r1, d9
 8007784:	f7f8 ff40 	bl	8000608 <__aeabi_dmul>
 8007788:	1136      	asrs	r6, r6, #4
 800778a:	4682      	mov	sl, r0
 800778c:	468b      	mov	fp, r1
 800778e:	2300      	movs	r3, #0
 8007790:	2502      	movs	r5, #2
 8007792:	2e00      	cmp	r6, #0
 8007794:	d17a      	bne.n	800788c <_dtoa_r+0x4c4>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1d3      	bne.n	8007742 <_dtoa_r+0x37a>
 800779a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8082 	beq.w	80078a6 <_dtoa_r+0x4de>
 80077a2:	4b91      	ldr	r3, [pc, #580]	; (80079e8 <_dtoa_r+0x620>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	4650      	mov	r0, sl
 80077a8:	4659      	mov	r1, fp
 80077aa:	f7f9 f99f 	bl	8000aec <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d079      	beq.n	80078a6 <_dtoa_r+0x4de>
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d076      	beq.n	80078a6 <_dtoa_r+0x4de>
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd36      	ble.n	800782c <_dtoa_r+0x464>
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	4650      	mov	r0, sl
 80077c2:	4659      	mov	r1, fp
 80077c4:	1e5f      	subs	r7, r3, #1
 80077c6:	2200      	movs	r2, #0
 80077c8:	4b88      	ldr	r3, [pc, #544]	; (80079ec <_dtoa_r+0x624>)
 80077ca:	f7f8 ff1d 	bl	8000608 <__aeabi_dmul>
 80077ce:	9e02      	ldr	r6, [sp, #8]
 80077d0:	4682      	mov	sl, r0
 80077d2:	468b      	mov	fp, r1
 80077d4:	3501      	adds	r5, #1
 80077d6:	4628      	mov	r0, r5
 80077d8:	f7f8 feac 	bl	8000534 <__aeabi_i2d>
 80077dc:	4652      	mov	r2, sl
 80077de:	465b      	mov	r3, fp
 80077e0:	f7f8 ff12 	bl	8000608 <__aeabi_dmul>
 80077e4:	4b82      	ldr	r3, [pc, #520]	; (80079f0 <_dtoa_r+0x628>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	f7f8 fd58 	bl	800029c <__adddf3>
 80077ec:	46d0      	mov	r8, sl
 80077ee:	46d9      	mov	r9, fp
 80077f0:	4682      	mov	sl, r0
 80077f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	d158      	bne.n	80078ac <_dtoa_r+0x4e4>
 80077fa:	4b7e      	ldr	r3, [pc, #504]	; (80079f4 <_dtoa_r+0x62c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f8 fd49 	bl	8000298 <__aeabi_dsub>
 8007806:	4652      	mov	r2, sl
 8007808:	465b      	mov	r3, fp
 800780a:	4680      	mov	r8, r0
 800780c:	4689      	mov	r9, r1
 800780e:	f7f9 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 8007812:	2800      	cmp	r0, #0
 8007814:	f040 8295 	bne.w	8007d42 <_dtoa_r+0x97a>
 8007818:	4652      	mov	r2, sl
 800781a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f7f9 f963 	bl	8000aec <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	f040 8289 	bne.w	8007d3e <_dtoa_r+0x976>
 800782c:	ec5b ab19 	vmov	sl, fp, d9
 8007830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007832:	2b00      	cmp	r3, #0
 8007834:	f2c0 8148 	blt.w	8007ac8 <_dtoa_r+0x700>
 8007838:	9a00      	ldr	r2, [sp, #0]
 800783a:	2a0e      	cmp	r2, #14
 800783c:	f300 8144 	bgt.w	8007ac8 <_dtoa_r+0x700>
 8007840:	4b67      	ldr	r3, [pc, #412]	; (80079e0 <_dtoa_r+0x618>)
 8007842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007846:	e9d3 8900 	ldrd	r8, r9, [r3]
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	f280 80d5 	bge.w	80079fc <_dtoa_r+0x634>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f300 80d1 	bgt.w	80079fc <_dtoa_r+0x634>
 800785a:	f040 826f 	bne.w	8007d3c <_dtoa_r+0x974>
 800785e:	4b65      	ldr	r3, [pc, #404]	; (80079f4 <_dtoa_r+0x62c>)
 8007860:	2200      	movs	r2, #0
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 fecf 	bl	8000608 <__aeabi_dmul>
 800786a:	4652      	mov	r2, sl
 800786c:	465b      	mov	r3, fp
 800786e:	f7f9 f951 	bl	8000b14 <__aeabi_dcmpge>
 8007872:	9e03      	ldr	r6, [sp, #12]
 8007874:	4637      	mov	r7, r6
 8007876:	2800      	cmp	r0, #0
 8007878:	f040 8245 	bne.w	8007d06 <_dtoa_r+0x93e>
 800787c:	9d01      	ldr	r5, [sp, #4]
 800787e:	2331      	movs	r3, #49	; 0x31
 8007880:	f805 3b01 	strb.w	r3, [r5], #1
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	e240      	b.n	8007d0e <_dtoa_r+0x946>
 800788c:	07f2      	lsls	r2, r6, #31
 800788e:	d505      	bpl.n	800789c <_dtoa_r+0x4d4>
 8007890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007894:	f7f8 feb8 	bl	8000608 <__aeabi_dmul>
 8007898:	3501      	adds	r5, #1
 800789a:	2301      	movs	r3, #1
 800789c:	1076      	asrs	r6, r6, #1
 800789e:	3708      	adds	r7, #8
 80078a0:	e777      	b.n	8007792 <_dtoa_r+0x3ca>
 80078a2:	2502      	movs	r5, #2
 80078a4:	e779      	b.n	800779a <_dtoa_r+0x3d2>
 80078a6:	9f00      	ldr	r7, [sp, #0]
 80078a8:	9e03      	ldr	r6, [sp, #12]
 80078aa:	e794      	b.n	80077d6 <_dtoa_r+0x40e>
 80078ac:	9901      	ldr	r1, [sp, #4]
 80078ae:	4b4c      	ldr	r3, [pc, #304]	; (80079e0 <_dtoa_r+0x618>)
 80078b0:	4431      	add	r1, r6
 80078b2:	910d      	str	r1, [sp, #52]	; 0x34
 80078b4:	9908      	ldr	r1, [sp, #32]
 80078b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078be:	2900      	cmp	r1, #0
 80078c0:	d043      	beq.n	800794a <_dtoa_r+0x582>
 80078c2:	494d      	ldr	r1, [pc, #308]	; (80079f8 <_dtoa_r+0x630>)
 80078c4:	2000      	movs	r0, #0
 80078c6:	f7f8 ffc9 	bl	800085c <__aeabi_ddiv>
 80078ca:	4652      	mov	r2, sl
 80078cc:	465b      	mov	r3, fp
 80078ce:	f7f8 fce3 	bl	8000298 <__aeabi_dsub>
 80078d2:	9d01      	ldr	r5, [sp, #4]
 80078d4:	4682      	mov	sl, r0
 80078d6:	468b      	mov	fp, r1
 80078d8:	4649      	mov	r1, r9
 80078da:	4640      	mov	r0, r8
 80078dc:	f7f9 f944 	bl	8000b68 <__aeabi_d2iz>
 80078e0:	4606      	mov	r6, r0
 80078e2:	f7f8 fe27 	bl	8000534 <__aeabi_i2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f8 fcd3 	bl	8000298 <__aeabi_dsub>
 80078f2:	3630      	adds	r6, #48	; 0x30
 80078f4:	f805 6b01 	strb.w	r6, [r5], #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	465b      	mov	r3, fp
 80078fc:	4680      	mov	r8, r0
 80078fe:	4689      	mov	r9, r1
 8007900:	f7f9 f8f4 	bl	8000aec <__aeabi_dcmplt>
 8007904:	2800      	cmp	r0, #0
 8007906:	d163      	bne.n	80079d0 <_dtoa_r+0x608>
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	4936      	ldr	r1, [pc, #216]	; (80079e8 <_dtoa_r+0x620>)
 800790e:	2000      	movs	r0, #0
 8007910:	f7f8 fcc2 	bl	8000298 <__aeabi_dsub>
 8007914:	4652      	mov	r2, sl
 8007916:	465b      	mov	r3, fp
 8007918:	f7f9 f8e8 	bl	8000aec <__aeabi_dcmplt>
 800791c:	2800      	cmp	r0, #0
 800791e:	f040 80b5 	bne.w	8007a8c <_dtoa_r+0x6c4>
 8007922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007924:	429d      	cmp	r5, r3
 8007926:	d081      	beq.n	800782c <_dtoa_r+0x464>
 8007928:	4b30      	ldr	r3, [pc, #192]	; (80079ec <_dtoa_r+0x624>)
 800792a:	2200      	movs	r2, #0
 800792c:	4650      	mov	r0, sl
 800792e:	4659      	mov	r1, fp
 8007930:	f7f8 fe6a 	bl	8000608 <__aeabi_dmul>
 8007934:	4b2d      	ldr	r3, [pc, #180]	; (80079ec <_dtoa_r+0x624>)
 8007936:	4682      	mov	sl, r0
 8007938:	468b      	mov	fp, r1
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	2200      	movs	r2, #0
 8007940:	f7f8 fe62 	bl	8000608 <__aeabi_dmul>
 8007944:	4680      	mov	r8, r0
 8007946:	4689      	mov	r9, r1
 8007948:	e7c6      	b.n	80078d8 <_dtoa_r+0x510>
 800794a:	4650      	mov	r0, sl
 800794c:	4659      	mov	r1, fp
 800794e:	f7f8 fe5b 	bl	8000608 <__aeabi_dmul>
 8007952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007954:	9d01      	ldr	r5, [sp, #4]
 8007956:	930f      	str	r3, [sp, #60]	; 0x3c
 8007958:	4682      	mov	sl, r0
 800795a:	468b      	mov	fp, r1
 800795c:	4649      	mov	r1, r9
 800795e:	4640      	mov	r0, r8
 8007960:	f7f9 f902 	bl	8000b68 <__aeabi_d2iz>
 8007964:	4606      	mov	r6, r0
 8007966:	f7f8 fde5 	bl	8000534 <__aeabi_i2d>
 800796a:	3630      	adds	r6, #48	; 0x30
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4640      	mov	r0, r8
 8007972:	4649      	mov	r1, r9
 8007974:	f7f8 fc90 	bl	8000298 <__aeabi_dsub>
 8007978:	f805 6b01 	strb.w	r6, [r5], #1
 800797c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800797e:	429d      	cmp	r5, r3
 8007980:	4680      	mov	r8, r0
 8007982:	4689      	mov	r9, r1
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	d124      	bne.n	80079d4 <_dtoa_r+0x60c>
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <_dtoa_r+0x630>)
 800798c:	4650      	mov	r0, sl
 800798e:	4659      	mov	r1, fp
 8007990:	f7f8 fc84 	bl	800029c <__adddf3>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f7f9 f8c4 	bl	8000b28 <__aeabi_dcmpgt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d173      	bne.n	8007a8c <_dtoa_r+0x6c4>
 80079a4:	4652      	mov	r2, sl
 80079a6:	465b      	mov	r3, fp
 80079a8:	4913      	ldr	r1, [pc, #76]	; (80079f8 <_dtoa_r+0x630>)
 80079aa:	2000      	movs	r0, #0
 80079ac:	f7f8 fc74 	bl	8000298 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f9 f898 	bl	8000aec <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f43f af35 	beq.w	800782c <_dtoa_r+0x464>
 80079c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079c4:	1e6b      	subs	r3, r5, #1
 80079c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079cc:	2b30      	cmp	r3, #48	; 0x30
 80079ce:	d0f8      	beq.n	80079c2 <_dtoa_r+0x5fa>
 80079d0:	9700      	str	r7, [sp, #0]
 80079d2:	e049      	b.n	8007a68 <_dtoa_r+0x6a0>
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <_dtoa_r+0x624>)
 80079d6:	f7f8 fe17 	bl	8000608 <__aeabi_dmul>
 80079da:	4680      	mov	r8, r0
 80079dc:	4689      	mov	r9, r1
 80079de:	e7bd      	b.n	800795c <_dtoa_r+0x594>
 80079e0:	0800aa88 	.word	0x0800aa88
 80079e4:	0800aa60 	.word	0x0800aa60
 80079e8:	3ff00000 	.word	0x3ff00000
 80079ec:	40240000 	.word	0x40240000
 80079f0:	401c0000 	.word	0x401c0000
 80079f4:	40140000 	.word	0x40140000
 80079f8:	3fe00000 	.word	0x3fe00000
 80079fc:	9d01      	ldr	r5, [sp, #4]
 80079fe:	4656      	mov	r6, sl
 8007a00:	465f      	mov	r7, fp
 8007a02:	4642      	mov	r2, r8
 8007a04:	464b      	mov	r3, r9
 8007a06:	4630      	mov	r0, r6
 8007a08:	4639      	mov	r1, r7
 8007a0a:	f7f8 ff27 	bl	800085c <__aeabi_ddiv>
 8007a0e:	f7f9 f8ab 	bl	8000b68 <__aeabi_d2iz>
 8007a12:	4682      	mov	sl, r0
 8007a14:	f7f8 fd8e 	bl	8000534 <__aeabi_i2d>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	f7f8 fdf4 	bl	8000608 <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a2c:	f7f8 fc34 	bl	8000298 <__aeabi_dsub>
 8007a30:	f805 6b01 	strb.w	r6, [r5], #1
 8007a34:	9e01      	ldr	r6, [sp, #4]
 8007a36:	9f03      	ldr	r7, [sp, #12]
 8007a38:	1bae      	subs	r6, r5, r6
 8007a3a:	42b7      	cmp	r7, r6
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	d135      	bne.n	8007aae <_dtoa_r+0x6e6>
 8007a42:	f7f8 fc2b 	bl	800029c <__adddf3>
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	f7f9 f86b 	bl	8000b28 <__aeabi_dcmpgt>
 8007a52:	b9d0      	cbnz	r0, 8007a8a <_dtoa_r+0x6c2>
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f9 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a60:	b110      	cbz	r0, 8007a68 <_dtoa_r+0x6a0>
 8007a62:	f01a 0f01 	tst.w	sl, #1
 8007a66:	d110      	bne.n	8007a8a <_dtoa_r+0x6c2>
 8007a68:	4620      	mov	r0, r4
 8007a6a:	ee18 1a10 	vmov	r1, s16
 8007a6e:	f000 fe6b 	bl	8008748 <_Bfree>
 8007a72:	2300      	movs	r3, #0
 8007a74:	9800      	ldr	r0, [sp, #0]
 8007a76:	702b      	strb	r3, [r5, #0]
 8007a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	6018      	str	r0, [r3, #0]
 8007a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f43f acf1 	beq.w	8007468 <_dtoa_r+0xa0>
 8007a86:	601d      	str	r5, [r3, #0]
 8007a88:	e4ee      	b.n	8007468 <_dtoa_r+0xa0>
 8007a8a:	9f00      	ldr	r7, [sp, #0]
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	461d      	mov	r5, r3
 8007a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a94:	2a39      	cmp	r2, #57	; 0x39
 8007a96:	d106      	bne.n	8007aa6 <_dtoa_r+0x6de>
 8007a98:	9a01      	ldr	r2, [sp, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d1f7      	bne.n	8007a8e <_dtoa_r+0x6c6>
 8007a9e:	9901      	ldr	r1, [sp, #4]
 8007aa0:	2230      	movs	r2, #48	; 0x30
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	700a      	strb	r2, [r1, #0]
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e790      	b.n	80079d0 <_dtoa_r+0x608>
 8007aae:	4ba6      	ldr	r3, [pc, #664]	; (8007d48 <_dtoa_r+0x980>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f7f8 fda9 	bl	8000608 <__aeabi_dmul>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	f7f9 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d09d      	beq.n	8007a02 <_dtoa_r+0x63a>
 8007ac6:	e7cf      	b.n	8007a68 <_dtoa_r+0x6a0>
 8007ac8:	9a08      	ldr	r2, [sp, #32]
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	f000 80d7 	beq.w	8007c7e <_dtoa_r+0x8b6>
 8007ad0:	9a06      	ldr	r2, [sp, #24]
 8007ad2:	2a01      	cmp	r2, #1
 8007ad4:	f300 80ba 	bgt.w	8007c4c <_dtoa_r+0x884>
 8007ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	f000 80b2 	beq.w	8007c44 <_dtoa_r+0x87c>
 8007ae0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ae4:	9e07      	ldr	r6, [sp, #28]
 8007ae6:	9d04      	ldr	r5, [sp, #16]
 8007ae8:	9a04      	ldr	r2, [sp, #16]
 8007aea:	441a      	add	r2, r3
 8007aec:	9204      	str	r2, [sp, #16]
 8007aee:	9a05      	ldr	r2, [sp, #20]
 8007af0:	2101      	movs	r1, #1
 8007af2:	441a      	add	r2, r3
 8007af4:	4620      	mov	r0, r4
 8007af6:	9205      	str	r2, [sp, #20]
 8007af8:	f000 ff28 	bl	800894c <__i2b>
 8007afc:	4607      	mov	r7, r0
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	dd0c      	ble.n	8007b1c <_dtoa_r+0x754>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dd09      	ble.n	8007b1c <_dtoa_r+0x754>
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	9a04      	ldr	r2, [sp, #16]
 8007b0c:	bfa8      	it	ge
 8007b0e:	462b      	movge	r3, r5
 8007b10:	1ad2      	subs	r2, r2, r3
 8007b12:	9204      	str	r2, [sp, #16]
 8007b14:	9a05      	ldr	r2, [sp, #20]
 8007b16:	1aed      	subs	r5, r5, r3
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	9305      	str	r3, [sp, #20]
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	b31b      	cbz	r3, 8007b68 <_dtoa_r+0x7a0>
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80af 	beq.w	8007c86 <_dtoa_r+0x8be>
 8007b28:	2e00      	cmp	r6, #0
 8007b2a:	dd13      	ble.n	8007b54 <_dtoa_r+0x78c>
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4632      	mov	r2, r6
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 ffcb 	bl	8008acc <__pow5mult>
 8007b36:	ee18 2a10 	vmov	r2, s16
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 ff1a 	bl	8008978 <__multiply>
 8007b44:	ee18 1a10 	vmov	r1, s16
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 fdfc 	bl	8008748 <_Bfree>
 8007b50:	ee08 8a10 	vmov	s16, r8
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	1b9a      	subs	r2, r3, r6
 8007b58:	d006      	beq.n	8007b68 <_dtoa_r+0x7a0>
 8007b5a:	ee18 1a10 	vmov	r1, s16
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 ffb4 	bl	8008acc <__pow5mult>
 8007b64:	ee08 0a10 	vmov	s16, r0
 8007b68:	2101      	movs	r1, #1
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 feee 	bl	800894c <__i2b>
 8007b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	4606      	mov	r6, r0
 8007b76:	f340 8088 	ble.w	8007c8a <_dtoa_r+0x8c2>
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 ffa4 	bl	8008acc <__pow5mult>
 8007b84:	9b06      	ldr	r3, [sp, #24]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	4606      	mov	r6, r0
 8007b8a:	f340 8081 	ble.w	8007c90 <_dtoa_r+0x8c8>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	6933      	ldr	r3, [r6, #16]
 8007b94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b98:	6918      	ldr	r0, [r3, #16]
 8007b9a:	f000 fe87 	bl	80088ac <__hi0bits>
 8007b9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ba2:	9b05      	ldr	r3, [sp, #20]
 8007ba4:	4418      	add	r0, r3
 8007ba6:	f010 001f 	ands.w	r0, r0, #31
 8007baa:	f000 8092 	beq.w	8007cd2 <_dtoa_r+0x90a>
 8007bae:	f1c0 0320 	rsb	r3, r0, #32
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	f340 808a 	ble.w	8007ccc <_dtoa_r+0x904>
 8007bb8:	f1c0 001c 	rsb	r0, r0, #28
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	4403      	add	r3, r0
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	4403      	add	r3, r0
 8007bc6:	4405      	add	r5, r0
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd07      	ble.n	8007be0 <_dtoa_r+0x818>
 8007bd0:	ee18 1a10 	vmov	r1, s16
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 ffd2 	bl	8008b80 <__lshift>
 8007bdc:	ee08 0a10 	vmov	s16, r0
 8007be0:	9b05      	ldr	r3, [sp, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd05      	ble.n	8007bf2 <_dtoa_r+0x82a>
 8007be6:	4631      	mov	r1, r6
 8007be8:	461a      	mov	r2, r3
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 ffc8 	bl	8008b80 <__lshift>
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d06e      	beq.n	8007cd6 <_dtoa_r+0x90e>
 8007bf8:	ee18 0a10 	vmov	r0, s16
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	f001 f82f 	bl	8008c60 <__mcmp>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	da67      	bge.n	8007cd6 <_dtoa_r+0x90e>
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	ee18 1a10 	vmov	r1, s16
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	220a      	movs	r2, #10
 8007c12:	2300      	movs	r3, #0
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fdb9 	bl	800878c <__multadd>
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	ee08 0a10 	vmov	s16, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 81b1 	beq.w	8007f88 <_dtoa_r+0xbc0>
 8007c26:	2300      	movs	r3, #0
 8007c28:	4639      	mov	r1, r7
 8007c2a:	220a      	movs	r2, #10
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 fdad 	bl	800878c <__multadd>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	4607      	mov	r7, r0
 8007c38:	f300 808e 	bgt.w	8007d58 <_dtoa_r+0x990>
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	dc51      	bgt.n	8007ce6 <_dtoa_r+0x91e>
 8007c42:	e089      	b.n	8007d58 <_dtoa_r+0x990>
 8007c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c4a:	e74b      	b.n	8007ae4 <_dtoa_r+0x71c>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1e5e      	subs	r6, r3, #1
 8007c50:	9b07      	ldr	r3, [sp, #28]
 8007c52:	42b3      	cmp	r3, r6
 8007c54:	bfbf      	itttt	lt
 8007c56:	9b07      	ldrlt	r3, [sp, #28]
 8007c58:	9607      	strlt	r6, [sp, #28]
 8007c5a:	1af2      	sublt	r2, r6, r3
 8007c5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c5e:	bfb6      	itet	lt
 8007c60:	189b      	addlt	r3, r3, r2
 8007c62:	1b9e      	subge	r6, r3, r6
 8007c64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	bfb8      	it	lt
 8007c6a:	2600      	movlt	r6, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bfb7      	itett	lt
 8007c70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c78:	1a9d      	sublt	r5, r3, r2
 8007c7a:	2300      	movlt	r3, #0
 8007c7c:	e734      	b.n	8007ae8 <_dtoa_r+0x720>
 8007c7e:	9e07      	ldr	r6, [sp, #28]
 8007c80:	9d04      	ldr	r5, [sp, #16]
 8007c82:	9f08      	ldr	r7, [sp, #32]
 8007c84:	e73b      	b.n	8007afe <_dtoa_r+0x736>
 8007c86:	9a07      	ldr	r2, [sp, #28]
 8007c88:	e767      	b.n	8007b5a <_dtoa_r+0x792>
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	dc18      	bgt.n	8007cc2 <_dtoa_r+0x8fa>
 8007c90:	f1ba 0f00 	cmp.w	sl, #0
 8007c94:	d115      	bne.n	8007cc2 <_dtoa_r+0x8fa>
 8007c96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c9a:	b993      	cbnz	r3, 8007cc2 <_dtoa_r+0x8fa>
 8007c9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ca0:	0d1b      	lsrs	r3, r3, #20
 8007ca2:	051b      	lsls	r3, r3, #20
 8007ca4:	b183      	cbz	r3, 8007cc8 <_dtoa_r+0x900>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	9b05      	ldr	r3, [sp, #20]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	f04f 0801 	mov.w	r8, #1
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f af6a 	bne.w	8007b92 <_dtoa_r+0x7ca>
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	e76f      	b.n	8007ba2 <_dtoa_r+0x7da>
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	e7f6      	b.n	8007cb6 <_dtoa_r+0x8ee>
 8007cc8:	4698      	mov	r8, r3
 8007cca:	e7f4      	b.n	8007cb6 <_dtoa_r+0x8ee>
 8007ccc:	f43f af7d 	beq.w	8007bca <_dtoa_r+0x802>
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	301c      	adds	r0, #28
 8007cd4:	e772      	b.n	8007bbc <_dtoa_r+0x7f4>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dc37      	bgt.n	8007d4c <_dtoa_r+0x984>
 8007cdc:	9b06      	ldr	r3, [sp, #24]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	dd34      	ble.n	8007d4c <_dtoa_r+0x984>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	9302      	str	r3, [sp, #8]
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	b96b      	cbnz	r3, 8007d06 <_dtoa_r+0x93e>
 8007cea:	4631      	mov	r1, r6
 8007cec:	2205      	movs	r2, #5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 fd4c 	bl	800878c <__multadd>
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	ee18 0a10 	vmov	r0, s16
 8007cfc:	f000 ffb0 	bl	8008c60 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f73f adbb 	bgt.w	800787c <_dtoa_r+0x4b4>
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	9d01      	ldr	r5, [sp, #4]
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	4631      	mov	r1, r6
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fd17 	bl	8008748 <_Bfree>
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	f43f aea4 	beq.w	8007a68 <_dtoa_r+0x6a0>
 8007d20:	f1b8 0f00 	cmp.w	r8, #0
 8007d24:	d005      	beq.n	8007d32 <_dtoa_r+0x96a>
 8007d26:	45b8      	cmp	r8, r7
 8007d28:	d003      	beq.n	8007d32 <_dtoa_r+0x96a>
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fd0b 	bl	8008748 <_Bfree>
 8007d32:	4639      	mov	r1, r7
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fd07 	bl	8008748 <_Bfree>
 8007d3a:	e695      	b.n	8007a68 <_dtoa_r+0x6a0>
 8007d3c:	2600      	movs	r6, #0
 8007d3e:	4637      	mov	r7, r6
 8007d40:	e7e1      	b.n	8007d06 <_dtoa_r+0x93e>
 8007d42:	9700      	str	r7, [sp, #0]
 8007d44:	4637      	mov	r7, r6
 8007d46:	e599      	b.n	800787c <_dtoa_r+0x4b4>
 8007d48:	40240000 	.word	0x40240000
 8007d4c:	9b08      	ldr	r3, [sp, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80ca 	beq.w	8007ee8 <_dtoa_r+0xb20>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	dd05      	ble.n	8007d68 <_dtoa_r+0x9a0>
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	462a      	mov	r2, r5
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 ff0d 	bl	8008b80 <__lshift>
 8007d66:	4607      	mov	r7, r0
 8007d68:	f1b8 0f00 	cmp.w	r8, #0
 8007d6c:	d05b      	beq.n	8007e26 <_dtoa_r+0xa5e>
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fca9 	bl	80086c8 <_Balloc>
 8007d76:	4605      	mov	r5, r0
 8007d78:	b928      	cbnz	r0, 8007d86 <_dtoa_r+0x9be>
 8007d7a:	4b87      	ldr	r3, [pc, #540]	; (8007f98 <_dtoa_r+0xbd0>)
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d82:	f7ff bb3b 	b.w	80073fc <_dtoa_r+0x34>
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	3202      	adds	r2, #2
 8007d8a:	0092      	lsls	r2, r2, #2
 8007d8c:	f107 010c 	add.w	r1, r7, #12
 8007d90:	300c      	adds	r0, #12
 8007d92:	f7fd fc3b 	bl	800560c <memcpy>
 8007d96:	2201      	movs	r2, #1
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fef0 	bl	8008b80 <__lshift>
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	f103 0901 	add.w	r9, r3, #1
 8007da6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	f00a 0301 	and.w	r3, sl, #1
 8007db2:	46b8      	mov	r8, r7
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	4607      	mov	r7, r0
 8007db8:	4631      	mov	r1, r6
 8007dba:	ee18 0a10 	vmov	r0, s16
 8007dbe:	f7ff fa77 	bl	80072b0 <quorem>
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	9002      	str	r0, [sp, #8]
 8007dc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dca:	ee18 0a10 	vmov	r0, s16
 8007dce:	f000 ff47 	bl	8008c60 <__mcmp>
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	9003      	str	r0, [sp, #12]
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 ff5d 	bl	8008c98 <__mdiff>
 8007dde:	68c2      	ldr	r2, [r0, #12]
 8007de0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007de4:	4605      	mov	r5, r0
 8007de6:	bb02      	cbnz	r2, 8007e2a <_dtoa_r+0xa62>
 8007de8:	4601      	mov	r1, r0
 8007dea:	ee18 0a10 	vmov	r0, s16
 8007dee:	f000 ff37 	bl	8008c60 <__mcmp>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4629      	mov	r1, r5
 8007df6:	4620      	mov	r0, r4
 8007df8:	9207      	str	r2, [sp, #28]
 8007dfa:	f000 fca5 	bl	8008748 <_Bfree>
 8007dfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e02:	ea43 0102 	orr.w	r1, r3, r2
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	464d      	mov	r5, r9
 8007e0c:	d10f      	bne.n	8007e2e <_dtoa_r+0xa66>
 8007e0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e12:	d02a      	beq.n	8007e6a <_dtoa_r+0xaa2>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	dd02      	ble.n	8007e20 <_dtoa_r+0xa58>
 8007e1a:	9b02      	ldr	r3, [sp, #8]
 8007e1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e20:	f88b a000 	strb.w	sl, [fp]
 8007e24:	e775      	b.n	8007d12 <_dtoa_r+0x94a>
 8007e26:	4638      	mov	r0, r7
 8007e28:	e7ba      	b.n	8007da0 <_dtoa_r+0x9d8>
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	e7e2      	b.n	8007df4 <_dtoa_r+0xa2c>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db04      	blt.n	8007e3e <_dtoa_r+0xa76>
 8007e34:	9906      	ldr	r1, [sp, #24]
 8007e36:	430b      	orrs	r3, r1
 8007e38:	9904      	ldr	r1, [sp, #16]
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	d122      	bne.n	8007e84 <_dtoa_r+0xabc>
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	ddee      	ble.n	8007e20 <_dtoa_r+0xa58>
 8007e42:	ee18 1a10 	vmov	r1, s16
 8007e46:	2201      	movs	r2, #1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fe99 	bl	8008b80 <__lshift>
 8007e4e:	4631      	mov	r1, r6
 8007e50:	ee08 0a10 	vmov	s16, r0
 8007e54:	f000 ff04 	bl	8008c60 <__mcmp>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dc03      	bgt.n	8007e64 <_dtoa_r+0xa9c>
 8007e5c:	d1e0      	bne.n	8007e20 <_dtoa_r+0xa58>
 8007e5e:	f01a 0f01 	tst.w	sl, #1
 8007e62:	d0dd      	beq.n	8007e20 <_dtoa_r+0xa58>
 8007e64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e68:	d1d7      	bne.n	8007e1a <_dtoa_r+0xa52>
 8007e6a:	2339      	movs	r3, #57	; 0x39
 8007e6c:	f88b 3000 	strb.w	r3, [fp]
 8007e70:	462b      	mov	r3, r5
 8007e72:	461d      	mov	r5, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e7a:	2a39      	cmp	r2, #57	; 0x39
 8007e7c:	d071      	beq.n	8007f62 <_dtoa_r+0xb9a>
 8007e7e:	3201      	adds	r2, #1
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	e746      	b.n	8007d12 <_dtoa_r+0x94a>
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	dd07      	ble.n	8007e98 <_dtoa_r+0xad0>
 8007e88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e8c:	d0ed      	beq.n	8007e6a <_dtoa_r+0xaa2>
 8007e8e:	f10a 0301 	add.w	r3, sl, #1
 8007e92:	f88b 3000 	strb.w	r3, [fp]
 8007e96:	e73c      	b.n	8007d12 <_dtoa_r+0x94a>
 8007e98:	9b05      	ldr	r3, [sp, #20]
 8007e9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e9e:	4599      	cmp	r9, r3
 8007ea0:	d047      	beq.n	8007f32 <_dtoa_r+0xb6a>
 8007ea2:	ee18 1a10 	vmov	r1, s16
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fc6e 	bl	800878c <__multadd>
 8007eb0:	45b8      	cmp	r8, r7
 8007eb2:	ee08 0a10 	vmov	s16, r0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	f04f 020a 	mov.w	r2, #10
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	d106      	bne.n	8007ed2 <_dtoa_r+0xb0a>
 8007ec4:	f000 fc62 	bl	800878c <__multadd>
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4607      	mov	r7, r0
 8007ecc:	f109 0901 	add.w	r9, r9, #1
 8007ed0:	e772      	b.n	8007db8 <_dtoa_r+0x9f0>
 8007ed2:	f000 fc5b 	bl	800878c <__multadd>
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	4680      	mov	r8, r0
 8007eda:	2300      	movs	r3, #0
 8007edc:	220a      	movs	r2, #10
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fc54 	bl	800878c <__multadd>
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	e7f1      	b.n	8007ecc <_dtoa_r+0xb04>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	9302      	str	r3, [sp, #8]
 8007eec:	9d01      	ldr	r5, [sp, #4]
 8007eee:	ee18 0a10 	vmov	r0, s16
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	f7ff f9dc 	bl	80072b0 <quorem>
 8007ef8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	f805 ab01 	strb.w	sl, [r5], #1
 8007f02:	1aea      	subs	r2, r5, r3
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	4293      	cmp	r3, r2
 8007f08:	dd09      	ble.n	8007f1e <_dtoa_r+0xb56>
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	2300      	movs	r3, #0
 8007f10:	220a      	movs	r2, #10
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fc3a 	bl	800878c <__multadd>
 8007f18:	ee08 0a10 	vmov	s16, r0
 8007f1c:	e7e7      	b.n	8007eee <_dtoa_r+0xb26>
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bfc8      	it	gt
 8007f24:	461d      	movgt	r5, r3
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	bfd8      	it	le
 8007f2a:	2501      	movle	r5, #1
 8007f2c:	441d      	add	r5, r3
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	ee18 1a10 	vmov	r1, s16
 8007f36:	2201      	movs	r2, #1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fe21 	bl	8008b80 <__lshift>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	ee08 0a10 	vmov	s16, r0
 8007f44:	f000 fe8c 	bl	8008c60 <__mcmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dc91      	bgt.n	8007e70 <_dtoa_r+0xaa8>
 8007f4c:	d102      	bne.n	8007f54 <_dtoa_r+0xb8c>
 8007f4e:	f01a 0f01 	tst.w	sl, #1
 8007f52:	d18d      	bne.n	8007e70 <_dtoa_r+0xaa8>
 8007f54:	462b      	mov	r3, r5
 8007f56:	461d      	mov	r5, r3
 8007f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f5c:	2a30      	cmp	r2, #48	; 0x30
 8007f5e:	d0fa      	beq.n	8007f56 <_dtoa_r+0xb8e>
 8007f60:	e6d7      	b.n	8007d12 <_dtoa_r+0x94a>
 8007f62:	9a01      	ldr	r2, [sp, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d184      	bne.n	8007e72 <_dtoa_r+0xaaa>
 8007f68:	9b00      	ldr	r3, [sp, #0]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	2331      	movs	r3, #49	; 0x31
 8007f70:	7013      	strb	r3, [r2, #0]
 8007f72:	e6ce      	b.n	8007d12 <_dtoa_r+0x94a>
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <_dtoa_r+0xbd4>)
 8007f76:	f7ff ba95 	b.w	80074a4 <_dtoa_r+0xdc>
 8007f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f47f aa6e 	bne.w	800745e <_dtoa_r+0x96>
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <_dtoa_r+0xbd8>)
 8007f84:	f7ff ba8e 	b.w	80074a4 <_dtoa_r+0xdc>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dcae      	bgt.n	8007eec <_dtoa_r+0xb24>
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	f73f aea8 	bgt.w	8007ce6 <_dtoa_r+0x91e>
 8007f96:	e7a9      	b.n	8007eec <_dtoa_r+0xb24>
 8007f98:	0800a978 	.word	0x0800a978
 8007f9c:	0800a778 	.word	0x0800a778
 8007fa0:	0800a8f9 	.word	0x0800a8f9

08007fa4 <rshift>:
 8007fa4:	6903      	ldr	r3, [r0, #16]
 8007fa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007faa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007fb2:	f100 0414 	add.w	r4, r0, #20
 8007fb6:	dd45      	ble.n	8008044 <rshift+0xa0>
 8007fb8:	f011 011f 	ands.w	r1, r1, #31
 8007fbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007fc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007fc4:	d10c      	bne.n	8007fe0 <rshift+0x3c>
 8007fc6:	f100 0710 	add.w	r7, r0, #16
 8007fca:	4629      	mov	r1, r5
 8007fcc:	42b1      	cmp	r1, r6
 8007fce:	d334      	bcc.n	800803a <rshift+0x96>
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	1eea      	subs	r2, r5, #3
 8007fd6:	4296      	cmp	r6, r2
 8007fd8:	bf38      	it	cc
 8007fda:	2300      	movcc	r3, #0
 8007fdc:	4423      	add	r3, r4
 8007fde:	e015      	b.n	800800c <rshift+0x68>
 8007fe0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fe4:	f1c1 0820 	rsb	r8, r1, #32
 8007fe8:	40cf      	lsrs	r7, r1
 8007fea:	f105 0e04 	add.w	lr, r5, #4
 8007fee:	46a1      	mov	r9, r4
 8007ff0:	4576      	cmp	r6, lr
 8007ff2:	46f4      	mov	ip, lr
 8007ff4:	d815      	bhi.n	8008022 <rshift+0x7e>
 8007ff6:	1a9a      	subs	r2, r3, r2
 8007ff8:	0092      	lsls	r2, r2, #2
 8007ffa:	3a04      	subs	r2, #4
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	42ae      	cmp	r6, r5
 8008000:	bf38      	it	cc
 8008002:	2200      	movcc	r2, #0
 8008004:	18a3      	adds	r3, r4, r2
 8008006:	50a7      	str	r7, [r4, r2]
 8008008:	b107      	cbz	r7, 800800c <rshift+0x68>
 800800a:	3304      	adds	r3, #4
 800800c:	1b1a      	subs	r2, r3, r4
 800800e:	42a3      	cmp	r3, r4
 8008010:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008014:	bf08      	it	eq
 8008016:	2300      	moveq	r3, #0
 8008018:	6102      	str	r2, [r0, #16]
 800801a:	bf08      	it	eq
 800801c:	6143      	streq	r3, [r0, #20]
 800801e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008022:	f8dc c000 	ldr.w	ip, [ip]
 8008026:	fa0c fc08 	lsl.w	ip, ip, r8
 800802a:	ea4c 0707 	orr.w	r7, ip, r7
 800802e:	f849 7b04 	str.w	r7, [r9], #4
 8008032:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008036:	40cf      	lsrs	r7, r1
 8008038:	e7da      	b.n	8007ff0 <rshift+0x4c>
 800803a:	f851 cb04 	ldr.w	ip, [r1], #4
 800803e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008042:	e7c3      	b.n	8007fcc <rshift+0x28>
 8008044:	4623      	mov	r3, r4
 8008046:	e7e1      	b.n	800800c <rshift+0x68>

08008048 <__hexdig_fun>:
 8008048:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800804c:	2b09      	cmp	r3, #9
 800804e:	d802      	bhi.n	8008056 <__hexdig_fun+0xe>
 8008050:	3820      	subs	r0, #32
 8008052:	b2c0      	uxtb	r0, r0
 8008054:	4770      	bx	lr
 8008056:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800805a:	2b05      	cmp	r3, #5
 800805c:	d801      	bhi.n	8008062 <__hexdig_fun+0x1a>
 800805e:	3847      	subs	r0, #71	; 0x47
 8008060:	e7f7      	b.n	8008052 <__hexdig_fun+0xa>
 8008062:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008066:	2b05      	cmp	r3, #5
 8008068:	d801      	bhi.n	800806e <__hexdig_fun+0x26>
 800806a:	3827      	subs	r0, #39	; 0x27
 800806c:	e7f1      	b.n	8008052 <__hexdig_fun+0xa>
 800806e:	2000      	movs	r0, #0
 8008070:	4770      	bx	lr
	...

08008074 <__gethex>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	ed2d 8b02 	vpush	{d8}
 800807c:	b089      	sub	sp, #36	; 0x24
 800807e:	ee08 0a10 	vmov	s16, r0
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	4bb4      	ldr	r3, [pc, #720]	; (8008358 <__gethex+0x2e4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	4618      	mov	r0, r3
 800808c:	468b      	mov	fp, r1
 800808e:	4690      	mov	r8, r2
 8008090:	f7f8 f8a6 	bl	80001e0 <strlen>
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	f8db 2000 	ldr.w	r2, [fp]
 800809a:	4403      	add	r3, r0
 800809c:	4682      	mov	sl, r0
 800809e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	1c93      	adds	r3, r2, #2
 80080a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80080aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80080ae:	32fe      	adds	r2, #254	; 0xfe
 80080b0:	18d1      	adds	r1, r2, r3
 80080b2:	461f      	mov	r7, r3
 80080b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80080b8:	9100      	str	r1, [sp, #0]
 80080ba:	2830      	cmp	r0, #48	; 0x30
 80080bc:	d0f8      	beq.n	80080b0 <__gethex+0x3c>
 80080be:	f7ff ffc3 	bl	8008048 <__hexdig_fun>
 80080c2:	4604      	mov	r4, r0
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d13a      	bne.n	800813e <__gethex+0xca>
 80080c8:	9901      	ldr	r1, [sp, #4]
 80080ca:	4652      	mov	r2, sl
 80080cc:	4638      	mov	r0, r7
 80080ce:	f001 f937 	bl	8009340 <strncmp>
 80080d2:	4605      	mov	r5, r0
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d168      	bne.n	80081aa <__gethex+0x136>
 80080d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80080dc:	eb07 060a 	add.w	r6, r7, sl
 80080e0:	f7ff ffb2 	bl	8008048 <__hexdig_fun>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d062      	beq.n	80081ae <__gethex+0x13a>
 80080e8:	4633      	mov	r3, r6
 80080ea:	7818      	ldrb	r0, [r3, #0]
 80080ec:	2830      	cmp	r0, #48	; 0x30
 80080ee:	461f      	mov	r7, r3
 80080f0:	f103 0301 	add.w	r3, r3, #1
 80080f4:	d0f9      	beq.n	80080ea <__gethex+0x76>
 80080f6:	f7ff ffa7 	bl	8008048 <__hexdig_fun>
 80080fa:	2301      	movs	r3, #1
 80080fc:	fab0 f480 	clz	r4, r0
 8008100:	0964      	lsrs	r4, r4, #5
 8008102:	4635      	mov	r5, r6
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	463a      	mov	r2, r7
 8008108:	4616      	mov	r6, r2
 800810a:	3201      	adds	r2, #1
 800810c:	7830      	ldrb	r0, [r6, #0]
 800810e:	f7ff ff9b 	bl	8008048 <__hexdig_fun>
 8008112:	2800      	cmp	r0, #0
 8008114:	d1f8      	bne.n	8008108 <__gethex+0x94>
 8008116:	9901      	ldr	r1, [sp, #4]
 8008118:	4652      	mov	r2, sl
 800811a:	4630      	mov	r0, r6
 800811c:	f001 f910 	bl	8009340 <strncmp>
 8008120:	b980      	cbnz	r0, 8008144 <__gethex+0xd0>
 8008122:	b94d      	cbnz	r5, 8008138 <__gethex+0xc4>
 8008124:	eb06 050a 	add.w	r5, r6, sl
 8008128:	462a      	mov	r2, r5
 800812a:	4616      	mov	r6, r2
 800812c:	3201      	adds	r2, #1
 800812e:	7830      	ldrb	r0, [r6, #0]
 8008130:	f7ff ff8a 	bl	8008048 <__hexdig_fun>
 8008134:	2800      	cmp	r0, #0
 8008136:	d1f8      	bne.n	800812a <__gethex+0xb6>
 8008138:	1bad      	subs	r5, r5, r6
 800813a:	00ad      	lsls	r5, r5, #2
 800813c:	e004      	b.n	8008148 <__gethex+0xd4>
 800813e:	2400      	movs	r4, #0
 8008140:	4625      	mov	r5, r4
 8008142:	e7e0      	b.n	8008106 <__gethex+0x92>
 8008144:	2d00      	cmp	r5, #0
 8008146:	d1f7      	bne.n	8008138 <__gethex+0xc4>
 8008148:	7833      	ldrb	r3, [r6, #0]
 800814a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800814e:	2b50      	cmp	r3, #80	; 0x50
 8008150:	d13b      	bne.n	80081ca <__gethex+0x156>
 8008152:	7873      	ldrb	r3, [r6, #1]
 8008154:	2b2b      	cmp	r3, #43	; 0x2b
 8008156:	d02c      	beq.n	80081b2 <__gethex+0x13e>
 8008158:	2b2d      	cmp	r3, #45	; 0x2d
 800815a:	d02e      	beq.n	80081ba <__gethex+0x146>
 800815c:	1c71      	adds	r1, r6, #1
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	7808      	ldrb	r0, [r1, #0]
 8008164:	f7ff ff70 	bl	8008048 <__hexdig_fun>
 8008168:	1e43      	subs	r3, r0, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b18      	cmp	r3, #24
 800816e:	d82c      	bhi.n	80081ca <__gethex+0x156>
 8008170:	f1a0 0210 	sub.w	r2, r0, #16
 8008174:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008178:	f7ff ff66 	bl	8008048 <__hexdig_fun>
 800817c:	1e43      	subs	r3, r0, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b18      	cmp	r3, #24
 8008182:	d91d      	bls.n	80081c0 <__gethex+0x14c>
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	d000      	beq.n	800818c <__gethex+0x118>
 800818a:	4252      	negs	r2, r2
 800818c:	4415      	add	r5, r2
 800818e:	f8cb 1000 	str.w	r1, [fp]
 8008192:	b1e4      	cbz	r4, 80081ce <__gethex+0x15a>
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2700      	movne	r7, #0
 800819c:	2706      	moveq	r7, #6
 800819e:	4638      	mov	r0, r7
 80081a0:	b009      	add	sp, #36	; 0x24
 80081a2:	ecbd 8b02 	vpop	{d8}
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	463e      	mov	r6, r7
 80081ac:	4625      	mov	r5, r4
 80081ae:	2401      	movs	r4, #1
 80081b0:	e7ca      	b.n	8008148 <__gethex+0xd4>
 80081b2:	f04f 0900 	mov.w	r9, #0
 80081b6:	1cb1      	adds	r1, r6, #2
 80081b8:	e7d3      	b.n	8008162 <__gethex+0xee>
 80081ba:	f04f 0901 	mov.w	r9, #1
 80081be:	e7fa      	b.n	80081b6 <__gethex+0x142>
 80081c0:	230a      	movs	r3, #10
 80081c2:	fb03 0202 	mla	r2, r3, r2, r0
 80081c6:	3a10      	subs	r2, #16
 80081c8:	e7d4      	b.n	8008174 <__gethex+0x100>
 80081ca:	4631      	mov	r1, r6
 80081cc:	e7df      	b.n	800818e <__gethex+0x11a>
 80081ce:	1bf3      	subs	r3, r6, r7
 80081d0:	3b01      	subs	r3, #1
 80081d2:	4621      	mov	r1, r4
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	dc0b      	bgt.n	80081f0 <__gethex+0x17c>
 80081d8:	ee18 0a10 	vmov	r0, s16
 80081dc:	f000 fa74 	bl	80086c8 <_Balloc>
 80081e0:	4604      	mov	r4, r0
 80081e2:	b940      	cbnz	r0, 80081f6 <__gethex+0x182>
 80081e4:	4b5d      	ldr	r3, [pc, #372]	; (800835c <__gethex+0x2e8>)
 80081e6:	4602      	mov	r2, r0
 80081e8:	21de      	movs	r1, #222	; 0xde
 80081ea:	485d      	ldr	r0, [pc, #372]	; (8008360 <__gethex+0x2ec>)
 80081ec:	f001 f8ca 	bl	8009384 <__assert_func>
 80081f0:	3101      	adds	r1, #1
 80081f2:	105b      	asrs	r3, r3, #1
 80081f4:	e7ee      	b.n	80081d4 <__gethex+0x160>
 80081f6:	f100 0914 	add.w	r9, r0, #20
 80081fa:	f04f 0b00 	mov.w	fp, #0
 80081fe:	f1ca 0301 	rsb	r3, sl, #1
 8008202:	f8cd 9008 	str.w	r9, [sp, #8]
 8008206:	f8cd b000 	str.w	fp, [sp]
 800820a:	9306      	str	r3, [sp, #24]
 800820c:	42b7      	cmp	r7, r6
 800820e:	d340      	bcc.n	8008292 <__gethex+0x21e>
 8008210:	9802      	ldr	r0, [sp, #8]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	f840 3b04 	str.w	r3, [r0], #4
 8008218:	eba0 0009 	sub.w	r0, r0, r9
 800821c:	1080      	asrs	r0, r0, #2
 800821e:	0146      	lsls	r6, r0, #5
 8008220:	6120      	str	r0, [r4, #16]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fb42 	bl	80088ac <__hi0bits>
 8008228:	1a30      	subs	r0, r6, r0
 800822a:	f8d8 6000 	ldr.w	r6, [r8]
 800822e:	42b0      	cmp	r0, r6
 8008230:	dd63      	ble.n	80082fa <__gethex+0x286>
 8008232:	1b87      	subs	r7, r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fee6 	bl	8009008 <__any_on>
 800823c:	4682      	mov	sl, r0
 800823e:	b1a8      	cbz	r0, 800826c <__gethex+0x1f8>
 8008240:	1e7b      	subs	r3, r7, #1
 8008242:	1159      	asrs	r1, r3, #5
 8008244:	f003 021f 	and.w	r2, r3, #31
 8008248:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800824c:	f04f 0a01 	mov.w	sl, #1
 8008250:	fa0a f202 	lsl.w	r2, sl, r2
 8008254:	420a      	tst	r2, r1
 8008256:	d009      	beq.n	800826c <__gethex+0x1f8>
 8008258:	4553      	cmp	r3, sl
 800825a:	dd05      	ble.n	8008268 <__gethex+0x1f4>
 800825c:	1eb9      	subs	r1, r7, #2
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fed2 	bl	8009008 <__any_on>
 8008264:	2800      	cmp	r0, #0
 8008266:	d145      	bne.n	80082f4 <__gethex+0x280>
 8008268:	f04f 0a02 	mov.w	sl, #2
 800826c:	4639      	mov	r1, r7
 800826e:	4620      	mov	r0, r4
 8008270:	f7ff fe98 	bl	8007fa4 <rshift>
 8008274:	443d      	add	r5, r7
 8008276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800827a:	42ab      	cmp	r3, r5
 800827c:	da4c      	bge.n	8008318 <__gethex+0x2a4>
 800827e:	ee18 0a10 	vmov	r0, s16
 8008282:	4621      	mov	r1, r4
 8008284:	f000 fa60 	bl	8008748 <_Bfree>
 8008288:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800828a:	2300      	movs	r3, #0
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	27a3      	movs	r7, #163	; 0xa3
 8008290:	e785      	b.n	800819e <__gethex+0x12a>
 8008292:	1e73      	subs	r3, r6, #1
 8008294:	9a05      	ldr	r2, [sp, #20]
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800829c:	4293      	cmp	r3, r2
 800829e:	d019      	beq.n	80082d4 <__gethex+0x260>
 80082a0:	f1bb 0f20 	cmp.w	fp, #32
 80082a4:	d107      	bne.n	80082b6 <__gethex+0x242>
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	9a00      	ldr	r2, [sp, #0]
 80082aa:	f843 2b04 	str.w	r2, [r3], #4
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	469b      	mov	fp, r3
 80082b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80082ba:	f7ff fec5 	bl	8008048 <__hexdig_fun>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	f000 000f 	and.w	r0, r0, #15
 80082c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80082c8:	4303      	orrs	r3, r0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	f10b 0b04 	add.w	fp, fp, #4
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	e00d      	b.n	80082f0 <__gethex+0x27c>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	9a06      	ldr	r2, [sp, #24]
 80082d8:	4413      	add	r3, r2
 80082da:	42bb      	cmp	r3, r7
 80082dc:	d3e0      	bcc.n	80082a0 <__gethex+0x22c>
 80082de:	4618      	mov	r0, r3
 80082e0:	9901      	ldr	r1, [sp, #4]
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	4652      	mov	r2, sl
 80082e6:	f001 f82b 	bl	8009340 <strncmp>
 80082ea:	9b07      	ldr	r3, [sp, #28]
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d1d7      	bne.n	80082a0 <__gethex+0x22c>
 80082f0:	461e      	mov	r6, r3
 80082f2:	e78b      	b.n	800820c <__gethex+0x198>
 80082f4:	f04f 0a03 	mov.w	sl, #3
 80082f8:	e7b8      	b.n	800826c <__gethex+0x1f8>
 80082fa:	da0a      	bge.n	8008312 <__gethex+0x29e>
 80082fc:	1a37      	subs	r7, r6, r0
 80082fe:	4621      	mov	r1, r4
 8008300:	ee18 0a10 	vmov	r0, s16
 8008304:	463a      	mov	r2, r7
 8008306:	f000 fc3b 	bl	8008b80 <__lshift>
 800830a:	1bed      	subs	r5, r5, r7
 800830c:	4604      	mov	r4, r0
 800830e:	f100 0914 	add.w	r9, r0, #20
 8008312:	f04f 0a00 	mov.w	sl, #0
 8008316:	e7ae      	b.n	8008276 <__gethex+0x202>
 8008318:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800831c:	42a8      	cmp	r0, r5
 800831e:	dd72      	ble.n	8008406 <__gethex+0x392>
 8008320:	1b45      	subs	r5, r0, r5
 8008322:	42ae      	cmp	r6, r5
 8008324:	dc36      	bgt.n	8008394 <__gethex+0x320>
 8008326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d02a      	beq.n	8008384 <__gethex+0x310>
 800832e:	2b03      	cmp	r3, #3
 8008330:	d02c      	beq.n	800838c <__gethex+0x318>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d11c      	bne.n	8008370 <__gethex+0x2fc>
 8008336:	42ae      	cmp	r6, r5
 8008338:	d11a      	bne.n	8008370 <__gethex+0x2fc>
 800833a:	2e01      	cmp	r6, #1
 800833c:	d112      	bne.n	8008364 <__gethex+0x2f0>
 800833e:	9a04      	ldr	r2, [sp, #16]
 8008340:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	2301      	movs	r3, #1
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	f8c9 3000 	str.w	r3, [r9]
 800834e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008350:	2762      	movs	r7, #98	; 0x62
 8008352:	601c      	str	r4, [r3, #0]
 8008354:	e723      	b.n	800819e <__gethex+0x12a>
 8008356:	bf00      	nop
 8008358:	0800a9f0 	.word	0x0800a9f0
 800835c:	0800a978 	.word	0x0800a978
 8008360:	0800a989 	.word	0x0800a989
 8008364:	1e71      	subs	r1, r6, #1
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fe4e 	bl	8009008 <__any_on>
 800836c:	2800      	cmp	r0, #0
 800836e:	d1e6      	bne.n	800833e <__gethex+0x2ca>
 8008370:	ee18 0a10 	vmov	r0, s16
 8008374:	4621      	mov	r1, r4
 8008376:	f000 f9e7 	bl	8008748 <_Bfree>
 800837a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800837c:	2300      	movs	r3, #0
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	2750      	movs	r7, #80	; 0x50
 8008382:	e70c      	b.n	800819e <__gethex+0x12a>
 8008384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f2      	bne.n	8008370 <__gethex+0x2fc>
 800838a:	e7d8      	b.n	800833e <__gethex+0x2ca>
 800838c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1d5      	bne.n	800833e <__gethex+0x2ca>
 8008392:	e7ed      	b.n	8008370 <__gethex+0x2fc>
 8008394:	1e6f      	subs	r7, r5, #1
 8008396:	f1ba 0f00 	cmp.w	sl, #0
 800839a:	d131      	bne.n	8008400 <__gethex+0x38c>
 800839c:	b127      	cbz	r7, 80083a8 <__gethex+0x334>
 800839e:	4639      	mov	r1, r7
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fe31 	bl	8009008 <__any_on>
 80083a6:	4682      	mov	sl, r0
 80083a8:	117b      	asrs	r3, r7, #5
 80083aa:	2101      	movs	r1, #1
 80083ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80083b0:	f007 071f 	and.w	r7, r7, #31
 80083b4:	fa01 f707 	lsl.w	r7, r1, r7
 80083b8:	421f      	tst	r7, r3
 80083ba:	4629      	mov	r1, r5
 80083bc:	4620      	mov	r0, r4
 80083be:	bf18      	it	ne
 80083c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80083c4:	1b76      	subs	r6, r6, r5
 80083c6:	f7ff fded 	bl	8007fa4 <rshift>
 80083ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80083ce:	2702      	movs	r7, #2
 80083d0:	f1ba 0f00 	cmp.w	sl, #0
 80083d4:	d048      	beq.n	8008468 <__gethex+0x3f4>
 80083d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d015      	beq.n	800840a <__gethex+0x396>
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d017      	beq.n	8008412 <__gethex+0x39e>
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d109      	bne.n	80083fa <__gethex+0x386>
 80083e6:	f01a 0f02 	tst.w	sl, #2
 80083ea:	d006      	beq.n	80083fa <__gethex+0x386>
 80083ec:	f8d9 0000 	ldr.w	r0, [r9]
 80083f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80083f4:	f01a 0f01 	tst.w	sl, #1
 80083f8:	d10e      	bne.n	8008418 <__gethex+0x3a4>
 80083fa:	f047 0710 	orr.w	r7, r7, #16
 80083fe:	e033      	b.n	8008468 <__gethex+0x3f4>
 8008400:	f04f 0a01 	mov.w	sl, #1
 8008404:	e7d0      	b.n	80083a8 <__gethex+0x334>
 8008406:	2701      	movs	r7, #1
 8008408:	e7e2      	b.n	80083d0 <__gethex+0x35c>
 800840a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800840c:	f1c3 0301 	rsb	r3, r3, #1
 8008410:	9315      	str	r3, [sp, #84]	; 0x54
 8008412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <__gethex+0x386>
 8008418:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800841c:	f104 0314 	add.w	r3, r4, #20
 8008420:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008424:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008428:	f04f 0c00 	mov.w	ip, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008432:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008436:	d01c      	beq.n	8008472 <__gethex+0x3fe>
 8008438:	3201      	adds	r2, #1
 800843a:	6002      	str	r2, [r0, #0]
 800843c:	2f02      	cmp	r7, #2
 800843e:	f104 0314 	add.w	r3, r4, #20
 8008442:	d13f      	bne.n	80084c4 <__gethex+0x450>
 8008444:	f8d8 2000 	ldr.w	r2, [r8]
 8008448:	3a01      	subs	r2, #1
 800844a:	42b2      	cmp	r2, r6
 800844c:	d10a      	bne.n	8008464 <__gethex+0x3f0>
 800844e:	1171      	asrs	r1, r6, #5
 8008450:	2201      	movs	r2, #1
 8008452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008456:	f006 061f 	and.w	r6, r6, #31
 800845a:	fa02 f606 	lsl.w	r6, r2, r6
 800845e:	421e      	tst	r6, r3
 8008460:	bf18      	it	ne
 8008462:	4617      	movne	r7, r2
 8008464:	f047 0720 	orr.w	r7, r7, #32
 8008468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800846a:	601c      	str	r4, [r3, #0]
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	601d      	str	r5, [r3, #0]
 8008470:	e695      	b.n	800819e <__gethex+0x12a>
 8008472:	4299      	cmp	r1, r3
 8008474:	f843 cc04 	str.w	ip, [r3, #-4]
 8008478:	d8d8      	bhi.n	800842c <__gethex+0x3b8>
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	459b      	cmp	fp, r3
 800847e:	db19      	blt.n	80084b4 <__gethex+0x440>
 8008480:	6861      	ldr	r1, [r4, #4]
 8008482:	ee18 0a10 	vmov	r0, s16
 8008486:	3101      	adds	r1, #1
 8008488:	f000 f91e 	bl	80086c8 <_Balloc>
 800848c:	4681      	mov	r9, r0
 800848e:	b918      	cbnz	r0, 8008498 <__gethex+0x424>
 8008490:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <__gethex+0x488>)
 8008492:	4602      	mov	r2, r0
 8008494:	2184      	movs	r1, #132	; 0x84
 8008496:	e6a8      	b.n	80081ea <__gethex+0x176>
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	3202      	adds	r2, #2
 800849c:	f104 010c 	add.w	r1, r4, #12
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	300c      	adds	r0, #12
 80084a4:	f7fd f8b2 	bl	800560c <memcpy>
 80084a8:	4621      	mov	r1, r4
 80084aa:	ee18 0a10 	vmov	r0, s16
 80084ae:	f000 f94b 	bl	8008748 <_Bfree>
 80084b2:	464c      	mov	r4, r9
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084bc:	6122      	str	r2, [r4, #16]
 80084be:	2201      	movs	r2, #1
 80084c0:	615a      	str	r2, [r3, #20]
 80084c2:	e7bb      	b.n	800843c <__gethex+0x3c8>
 80084c4:	6922      	ldr	r2, [r4, #16]
 80084c6:	455a      	cmp	r2, fp
 80084c8:	dd0b      	ble.n	80084e2 <__gethex+0x46e>
 80084ca:	2101      	movs	r1, #1
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7ff fd69 	bl	8007fa4 <rshift>
 80084d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084d6:	3501      	adds	r5, #1
 80084d8:	42ab      	cmp	r3, r5
 80084da:	f6ff aed0 	blt.w	800827e <__gethex+0x20a>
 80084de:	2701      	movs	r7, #1
 80084e0:	e7c0      	b.n	8008464 <__gethex+0x3f0>
 80084e2:	f016 061f 	ands.w	r6, r6, #31
 80084e6:	d0fa      	beq.n	80084de <__gethex+0x46a>
 80084e8:	4453      	add	r3, sl
 80084ea:	f1c6 0620 	rsb	r6, r6, #32
 80084ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80084f2:	f000 f9db 	bl	80088ac <__hi0bits>
 80084f6:	42b0      	cmp	r0, r6
 80084f8:	dbe7      	blt.n	80084ca <__gethex+0x456>
 80084fa:	e7f0      	b.n	80084de <__gethex+0x46a>
 80084fc:	0800a978 	.word	0x0800a978

08008500 <L_shift>:
 8008500:	f1c2 0208 	rsb	r2, r2, #8
 8008504:	0092      	lsls	r2, r2, #2
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	f1c2 0620 	rsb	r6, r2, #32
 800850c:	6843      	ldr	r3, [r0, #4]
 800850e:	6804      	ldr	r4, [r0, #0]
 8008510:	fa03 f506 	lsl.w	r5, r3, r6
 8008514:	432c      	orrs	r4, r5
 8008516:	40d3      	lsrs	r3, r2
 8008518:	6004      	str	r4, [r0, #0]
 800851a:	f840 3f04 	str.w	r3, [r0, #4]!
 800851e:	4288      	cmp	r0, r1
 8008520:	d3f4      	bcc.n	800850c <L_shift+0xc>
 8008522:	bd70      	pop	{r4, r5, r6, pc}

08008524 <__match>:
 8008524:	b530      	push	{r4, r5, lr}
 8008526:	6803      	ldr	r3, [r0, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800852e:	b914      	cbnz	r4, 8008536 <__match+0x12>
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	2001      	movs	r0, #1
 8008534:	bd30      	pop	{r4, r5, pc}
 8008536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800853e:	2d19      	cmp	r5, #25
 8008540:	bf98      	it	ls
 8008542:	3220      	addls	r2, #32
 8008544:	42a2      	cmp	r2, r4
 8008546:	d0f0      	beq.n	800852a <__match+0x6>
 8008548:	2000      	movs	r0, #0
 800854a:	e7f3      	b.n	8008534 <__match+0x10>

0800854c <__hexnan>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	680b      	ldr	r3, [r1, #0]
 8008552:	115e      	asrs	r6, r3, #5
 8008554:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008558:	f013 031f 	ands.w	r3, r3, #31
 800855c:	b087      	sub	sp, #28
 800855e:	bf18      	it	ne
 8008560:	3604      	addne	r6, #4
 8008562:	2500      	movs	r5, #0
 8008564:	1f37      	subs	r7, r6, #4
 8008566:	4690      	mov	r8, r2
 8008568:	6802      	ldr	r2, [r0, #0]
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	4682      	mov	sl, r0
 800856e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008572:	46b9      	mov	r9, r7
 8008574:	463c      	mov	r4, r7
 8008576:	9502      	str	r5, [sp, #8]
 8008578:	46ab      	mov	fp, r5
 800857a:	7851      	ldrb	r1, [r2, #1]
 800857c:	1c53      	adds	r3, r2, #1
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	b341      	cbz	r1, 80085d4 <__hexnan+0x88>
 8008582:	4608      	mov	r0, r1
 8008584:	9205      	str	r2, [sp, #20]
 8008586:	9104      	str	r1, [sp, #16]
 8008588:	f7ff fd5e 	bl	8008048 <__hexdig_fun>
 800858c:	2800      	cmp	r0, #0
 800858e:	d14f      	bne.n	8008630 <__hexnan+0xe4>
 8008590:	9904      	ldr	r1, [sp, #16]
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	2920      	cmp	r1, #32
 8008596:	d818      	bhi.n	80085ca <__hexnan+0x7e>
 8008598:	9b02      	ldr	r3, [sp, #8]
 800859a:	459b      	cmp	fp, r3
 800859c:	dd13      	ble.n	80085c6 <__hexnan+0x7a>
 800859e:	454c      	cmp	r4, r9
 80085a0:	d206      	bcs.n	80085b0 <__hexnan+0x64>
 80085a2:	2d07      	cmp	r5, #7
 80085a4:	dc04      	bgt.n	80085b0 <__hexnan+0x64>
 80085a6:	462a      	mov	r2, r5
 80085a8:	4649      	mov	r1, r9
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7ff ffa8 	bl	8008500 <L_shift>
 80085b0:	4544      	cmp	r4, r8
 80085b2:	d950      	bls.n	8008656 <__hexnan+0x10a>
 80085b4:	2300      	movs	r3, #0
 80085b6:	f1a4 0904 	sub.w	r9, r4, #4
 80085ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80085be:	f8cd b008 	str.w	fp, [sp, #8]
 80085c2:	464c      	mov	r4, r9
 80085c4:	461d      	mov	r5, r3
 80085c6:	9a03      	ldr	r2, [sp, #12]
 80085c8:	e7d7      	b.n	800857a <__hexnan+0x2e>
 80085ca:	2929      	cmp	r1, #41	; 0x29
 80085cc:	d156      	bne.n	800867c <__hexnan+0x130>
 80085ce:	3202      	adds	r2, #2
 80085d0:	f8ca 2000 	str.w	r2, [sl]
 80085d4:	f1bb 0f00 	cmp.w	fp, #0
 80085d8:	d050      	beq.n	800867c <__hexnan+0x130>
 80085da:	454c      	cmp	r4, r9
 80085dc:	d206      	bcs.n	80085ec <__hexnan+0xa0>
 80085de:	2d07      	cmp	r5, #7
 80085e0:	dc04      	bgt.n	80085ec <__hexnan+0xa0>
 80085e2:	462a      	mov	r2, r5
 80085e4:	4649      	mov	r1, r9
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff ff8a 	bl	8008500 <L_shift>
 80085ec:	4544      	cmp	r4, r8
 80085ee:	d934      	bls.n	800865a <__hexnan+0x10e>
 80085f0:	f1a8 0204 	sub.w	r2, r8, #4
 80085f4:	4623      	mov	r3, r4
 80085f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80085fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80085fe:	429f      	cmp	r7, r3
 8008600:	d2f9      	bcs.n	80085f6 <__hexnan+0xaa>
 8008602:	1b3b      	subs	r3, r7, r4
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	3304      	adds	r3, #4
 800860a:	3401      	adds	r4, #1
 800860c:	3e03      	subs	r6, #3
 800860e:	42b4      	cmp	r4, r6
 8008610:	bf88      	it	hi
 8008612:	2304      	movhi	r3, #4
 8008614:	4443      	add	r3, r8
 8008616:	2200      	movs	r2, #0
 8008618:	f843 2b04 	str.w	r2, [r3], #4
 800861c:	429f      	cmp	r7, r3
 800861e:	d2fb      	bcs.n	8008618 <__hexnan+0xcc>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	b91b      	cbnz	r3, 800862c <__hexnan+0xe0>
 8008624:	4547      	cmp	r7, r8
 8008626:	d127      	bne.n	8008678 <__hexnan+0x12c>
 8008628:	2301      	movs	r3, #1
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	2005      	movs	r0, #5
 800862e:	e026      	b.n	800867e <__hexnan+0x132>
 8008630:	3501      	adds	r5, #1
 8008632:	2d08      	cmp	r5, #8
 8008634:	f10b 0b01 	add.w	fp, fp, #1
 8008638:	dd06      	ble.n	8008648 <__hexnan+0xfc>
 800863a:	4544      	cmp	r4, r8
 800863c:	d9c3      	bls.n	80085c6 <__hexnan+0x7a>
 800863e:	2300      	movs	r3, #0
 8008640:	f844 3c04 	str.w	r3, [r4, #-4]
 8008644:	2501      	movs	r5, #1
 8008646:	3c04      	subs	r4, #4
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	f000 000f 	and.w	r0, r0, #15
 800864e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008652:	6022      	str	r2, [r4, #0]
 8008654:	e7b7      	b.n	80085c6 <__hexnan+0x7a>
 8008656:	2508      	movs	r5, #8
 8008658:	e7b5      	b.n	80085c6 <__hexnan+0x7a>
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0df      	beq.n	8008620 <__hexnan+0xd4>
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	f1c3 0320 	rsb	r3, r3, #32
 8008668:	fa22 f303 	lsr.w	r3, r2, r3
 800866c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008670:	401a      	ands	r2, r3
 8008672:	f846 2c04 	str.w	r2, [r6, #-4]
 8008676:	e7d3      	b.n	8008620 <__hexnan+0xd4>
 8008678:	3f04      	subs	r7, #4
 800867a:	e7d1      	b.n	8008620 <__hexnan+0xd4>
 800867c:	2004      	movs	r0, #4
 800867e:	b007      	add	sp, #28
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008684 <_localeconv_r>:
 8008684:	4800      	ldr	r0, [pc, #0]	; (8008688 <_localeconv_r+0x4>)
 8008686:	4770      	bx	lr
 8008688:	2000016c 	.word	0x2000016c

0800868c <__ascii_mbtowc>:
 800868c:	b082      	sub	sp, #8
 800868e:	b901      	cbnz	r1, 8008692 <__ascii_mbtowc+0x6>
 8008690:	a901      	add	r1, sp, #4
 8008692:	b142      	cbz	r2, 80086a6 <__ascii_mbtowc+0x1a>
 8008694:	b14b      	cbz	r3, 80086aa <__ascii_mbtowc+0x1e>
 8008696:	7813      	ldrb	r3, [r2, #0]
 8008698:	600b      	str	r3, [r1, #0]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	1e10      	subs	r0, r2, #0
 800869e:	bf18      	it	ne
 80086a0:	2001      	movne	r0, #1
 80086a2:	b002      	add	sp, #8
 80086a4:	4770      	bx	lr
 80086a6:	4610      	mov	r0, r2
 80086a8:	e7fb      	b.n	80086a2 <__ascii_mbtowc+0x16>
 80086aa:	f06f 0001 	mvn.w	r0, #1
 80086ae:	e7f8      	b.n	80086a2 <__ascii_mbtowc+0x16>

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_lock+0x8>)
 80086b2:	f000 be98 	b.w	80093e6 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	2000076c 	.word	0x2000076c

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_unlock+0x8>)
 80086be:	f000 be93 	b.w	80093e8 <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	2000076c 	.word	0x2000076c

080086c8 <_Balloc>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	b976      	cbnz	r6, 80086f0 <_Balloc+0x28>
 80086d2:	2010      	movs	r0, #16
 80086d4:	f7fc ff8a 	bl	80055ec <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	6260      	str	r0, [r4, #36]	; 0x24
 80086dc:	b920      	cbnz	r0, 80086e8 <_Balloc+0x20>
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <_Balloc+0x78>)
 80086e0:	4818      	ldr	r0, [pc, #96]	; (8008744 <_Balloc+0x7c>)
 80086e2:	2166      	movs	r1, #102	; 0x66
 80086e4:	f000 fe4e 	bl	8009384 <__assert_func>
 80086e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ec:	6006      	str	r6, [r0, #0]
 80086ee:	60c6      	str	r6, [r0, #12]
 80086f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f2:	68f3      	ldr	r3, [r6, #12]
 80086f4:	b183      	cbz	r3, 8008718 <_Balloc+0x50>
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fe:	b9b8      	cbnz	r0, 8008730 <_Balloc+0x68>
 8008700:	2101      	movs	r1, #1
 8008702:	fa01 f605 	lsl.w	r6, r1, r5
 8008706:	1d72      	adds	r2, r6, #5
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fc9d 	bl	800904a <_calloc_r>
 8008710:	b160      	cbz	r0, 800872c <_Balloc+0x64>
 8008712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008716:	e00e      	b.n	8008736 <_Balloc+0x6e>
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fc94 	bl	800904a <_calloc_r>
 8008722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008724:	60f0      	str	r0, [r6, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <_Balloc+0x2e>
 800872c:	2000      	movs	r0, #0
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6802      	ldr	r2, [r0, #0]
 8008732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008736:	2300      	movs	r3, #0
 8008738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800873c:	e7f7      	b.n	800872e <_Balloc+0x66>
 800873e:	bf00      	nop
 8008740:	0800a906 	.word	0x0800a906
 8008744:	0800aa04 	.word	0x0800aa04

08008748 <_Bfree>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Bfree+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7fc ff4a 	bl	80055ec <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6268      	str	r0, [r5, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_Bfree+0x20>
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_Bfree+0x3c>)
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_Bfree+0x40>)
 8008762:	218a      	movs	r1, #138	; 0x8a
 8008764:	f000 fe0e 	bl	8009384 <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	b13c      	cbz	r4, 8008782 <_Bfree+0x3a>
 8008772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	0800a906 	.word	0x0800a906
 8008788:	0800aa04 	.word	0x0800aa04

0800878c <__multadd>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	690d      	ldr	r5, [r1, #16]
 8008792:	4607      	mov	r7, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461e      	mov	r6, r3
 8008798:	f101 0c14 	add.w	ip, r1, #20
 800879c:	2000      	movs	r0, #0
 800879e:	f8dc 3000 	ldr.w	r3, [ip]
 80087a2:	b299      	uxth	r1, r3
 80087a4:	fb02 6101 	mla	r1, r2, r1, r6
 80087a8:	0c1e      	lsrs	r6, r3, #16
 80087aa:	0c0b      	lsrs	r3, r1, #16
 80087ac:	fb02 3306 	mla	r3, r2, r6, r3
 80087b0:	b289      	uxth	r1, r1
 80087b2:	3001      	adds	r0, #1
 80087b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087b8:	4285      	cmp	r5, r0
 80087ba:	f84c 1b04 	str.w	r1, [ip], #4
 80087be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087c2:	dcec      	bgt.n	800879e <__multadd+0x12>
 80087c4:	b30e      	cbz	r6, 800880a <__multadd+0x7e>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc19      	bgt.n	8008800 <__multadd+0x74>
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4638      	mov	r0, r7
 80087d0:	3101      	adds	r1, #1
 80087d2:	f7ff ff79 	bl	80086c8 <_Balloc>
 80087d6:	4680      	mov	r8, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__multadd+0x5a>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <__multadd+0x84>)
 80087de:	480d      	ldr	r0, [pc, #52]	; (8008814 <__multadd+0x88>)
 80087e0:	21b5      	movs	r1, #181	; 0xb5
 80087e2:	f000 fdcf 	bl	8009384 <__assert_func>
 80087e6:	6922      	ldr	r2, [r4, #16]
 80087e8:	3202      	adds	r2, #2
 80087ea:	f104 010c 	add.w	r1, r4, #12
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	300c      	adds	r0, #12
 80087f2:	f7fc ff0b 	bl	800560c <memcpy>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ffa5 	bl	8008748 <_Bfree>
 80087fe:	4644      	mov	r4, r8
 8008800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008804:	3501      	adds	r5, #1
 8008806:	615e      	str	r6, [r3, #20]
 8008808:	6125      	str	r5, [r4, #16]
 800880a:	4620      	mov	r0, r4
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008810:	0800a978 	.word	0x0800a978
 8008814:	0800aa04 	.word	0x0800aa04

08008818 <__s2b>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	460c      	mov	r4, r1
 800881e:	4615      	mov	r5, r2
 8008820:	461f      	mov	r7, r3
 8008822:	2209      	movs	r2, #9
 8008824:	3308      	adds	r3, #8
 8008826:	4606      	mov	r6, r0
 8008828:	fb93 f3f2 	sdiv	r3, r3, r2
 800882c:	2100      	movs	r1, #0
 800882e:	2201      	movs	r2, #1
 8008830:	429a      	cmp	r2, r3
 8008832:	db09      	blt.n	8008848 <__s2b+0x30>
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff ff47 	bl	80086c8 <_Balloc>
 800883a:	b940      	cbnz	r0, 800884e <__s2b+0x36>
 800883c:	4602      	mov	r2, r0
 800883e:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <__s2b+0x8c>)
 8008840:	4819      	ldr	r0, [pc, #100]	; (80088a8 <__s2b+0x90>)
 8008842:	21ce      	movs	r1, #206	; 0xce
 8008844:	f000 fd9e 	bl	8009384 <__assert_func>
 8008848:	0052      	lsls	r2, r2, #1
 800884a:	3101      	adds	r1, #1
 800884c:	e7f0      	b.n	8008830 <__s2b+0x18>
 800884e:	9b08      	ldr	r3, [sp, #32]
 8008850:	6143      	str	r3, [r0, #20]
 8008852:	2d09      	cmp	r5, #9
 8008854:	f04f 0301 	mov.w	r3, #1
 8008858:	6103      	str	r3, [r0, #16]
 800885a:	dd16      	ble.n	800888a <__s2b+0x72>
 800885c:	f104 0909 	add.w	r9, r4, #9
 8008860:	46c8      	mov	r8, r9
 8008862:	442c      	add	r4, r5
 8008864:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008868:	4601      	mov	r1, r0
 800886a:	3b30      	subs	r3, #48	; 0x30
 800886c:	220a      	movs	r2, #10
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ff8c 	bl	800878c <__multadd>
 8008874:	45a0      	cmp	r8, r4
 8008876:	d1f5      	bne.n	8008864 <__s2b+0x4c>
 8008878:	f1a5 0408 	sub.w	r4, r5, #8
 800887c:	444c      	add	r4, r9
 800887e:	1b2d      	subs	r5, r5, r4
 8008880:	1963      	adds	r3, r4, r5
 8008882:	42bb      	cmp	r3, r7
 8008884:	db04      	blt.n	8008890 <__s2b+0x78>
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888a:	340a      	adds	r4, #10
 800888c:	2509      	movs	r5, #9
 800888e:	e7f6      	b.n	800887e <__s2b+0x66>
 8008890:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008894:	4601      	mov	r1, r0
 8008896:	3b30      	subs	r3, #48	; 0x30
 8008898:	220a      	movs	r2, #10
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ff76 	bl	800878c <__multadd>
 80088a0:	e7ee      	b.n	8008880 <__s2b+0x68>
 80088a2:	bf00      	nop
 80088a4:	0800a978 	.word	0x0800a978
 80088a8:	0800aa04 	.word	0x0800aa04

080088ac <__hi0bits>:
 80088ac:	0c03      	lsrs	r3, r0, #16
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	b9d3      	cbnz	r3, 80088e8 <__hi0bits+0x3c>
 80088b2:	0400      	lsls	r0, r0, #16
 80088b4:	2310      	movs	r3, #16
 80088b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088ba:	bf04      	itt	eq
 80088bc:	0200      	lsleq	r0, r0, #8
 80088be:	3308      	addeq	r3, #8
 80088c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088c4:	bf04      	itt	eq
 80088c6:	0100      	lsleq	r0, r0, #4
 80088c8:	3304      	addeq	r3, #4
 80088ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088ce:	bf04      	itt	eq
 80088d0:	0080      	lsleq	r0, r0, #2
 80088d2:	3302      	addeq	r3, #2
 80088d4:	2800      	cmp	r0, #0
 80088d6:	db05      	blt.n	80088e4 <__hi0bits+0x38>
 80088d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088dc:	f103 0301 	add.w	r3, r3, #1
 80088e0:	bf08      	it	eq
 80088e2:	2320      	moveq	r3, #32
 80088e4:	4618      	mov	r0, r3
 80088e6:	4770      	bx	lr
 80088e8:	2300      	movs	r3, #0
 80088ea:	e7e4      	b.n	80088b6 <__hi0bits+0xa>

080088ec <__lo0bits>:
 80088ec:	6803      	ldr	r3, [r0, #0]
 80088ee:	f013 0207 	ands.w	r2, r3, #7
 80088f2:	4601      	mov	r1, r0
 80088f4:	d00b      	beq.n	800890e <__lo0bits+0x22>
 80088f6:	07da      	lsls	r2, r3, #31
 80088f8:	d423      	bmi.n	8008942 <__lo0bits+0x56>
 80088fa:	0798      	lsls	r0, r3, #30
 80088fc:	bf49      	itett	mi
 80088fe:	085b      	lsrmi	r3, r3, #1
 8008900:	089b      	lsrpl	r3, r3, #2
 8008902:	2001      	movmi	r0, #1
 8008904:	600b      	strmi	r3, [r1, #0]
 8008906:	bf5c      	itt	pl
 8008908:	600b      	strpl	r3, [r1, #0]
 800890a:	2002      	movpl	r0, #2
 800890c:	4770      	bx	lr
 800890e:	b298      	uxth	r0, r3
 8008910:	b9a8      	cbnz	r0, 800893e <__lo0bits+0x52>
 8008912:	0c1b      	lsrs	r3, r3, #16
 8008914:	2010      	movs	r0, #16
 8008916:	b2da      	uxtb	r2, r3
 8008918:	b90a      	cbnz	r2, 800891e <__lo0bits+0x32>
 800891a:	3008      	adds	r0, #8
 800891c:	0a1b      	lsrs	r3, r3, #8
 800891e:	071a      	lsls	r2, r3, #28
 8008920:	bf04      	itt	eq
 8008922:	091b      	lsreq	r3, r3, #4
 8008924:	3004      	addeq	r0, #4
 8008926:	079a      	lsls	r2, r3, #30
 8008928:	bf04      	itt	eq
 800892a:	089b      	lsreq	r3, r3, #2
 800892c:	3002      	addeq	r0, #2
 800892e:	07da      	lsls	r2, r3, #31
 8008930:	d403      	bmi.n	800893a <__lo0bits+0x4e>
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	f100 0001 	add.w	r0, r0, #1
 8008938:	d005      	beq.n	8008946 <__lo0bits+0x5a>
 800893a:	600b      	str	r3, [r1, #0]
 800893c:	4770      	bx	lr
 800893e:	4610      	mov	r0, r2
 8008940:	e7e9      	b.n	8008916 <__lo0bits+0x2a>
 8008942:	2000      	movs	r0, #0
 8008944:	4770      	bx	lr
 8008946:	2020      	movs	r0, #32
 8008948:	4770      	bx	lr
	...

0800894c <__i2b>:
 800894c:	b510      	push	{r4, lr}
 800894e:	460c      	mov	r4, r1
 8008950:	2101      	movs	r1, #1
 8008952:	f7ff feb9 	bl	80086c8 <_Balloc>
 8008956:	4602      	mov	r2, r0
 8008958:	b928      	cbnz	r0, 8008966 <__i2b+0x1a>
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <__i2b+0x24>)
 800895c:	4805      	ldr	r0, [pc, #20]	; (8008974 <__i2b+0x28>)
 800895e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008962:	f000 fd0f 	bl	8009384 <__assert_func>
 8008966:	2301      	movs	r3, #1
 8008968:	6144      	str	r4, [r0, #20]
 800896a:	6103      	str	r3, [r0, #16]
 800896c:	bd10      	pop	{r4, pc}
 800896e:	bf00      	nop
 8008970:	0800a978 	.word	0x0800a978
 8008974:	0800aa04 	.word	0x0800aa04

08008978 <__multiply>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4691      	mov	r9, r2
 800897e:	690a      	ldr	r2, [r1, #16]
 8008980:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008984:	429a      	cmp	r2, r3
 8008986:	bfb8      	it	lt
 8008988:	460b      	movlt	r3, r1
 800898a:	460c      	mov	r4, r1
 800898c:	bfbc      	itt	lt
 800898e:	464c      	movlt	r4, r9
 8008990:	4699      	movlt	r9, r3
 8008992:	6927      	ldr	r7, [r4, #16]
 8008994:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	6861      	ldr	r1, [r4, #4]
 800899c:	eb07 060a 	add.w	r6, r7, sl
 80089a0:	42b3      	cmp	r3, r6
 80089a2:	b085      	sub	sp, #20
 80089a4:	bfb8      	it	lt
 80089a6:	3101      	addlt	r1, #1
 80089a8:	f7ff fe8e 	bl	80086c8 <_Balloc>
 80089ac:	b930      	cbnz	r0, 80089bc <__multiply+0x44>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b44      	ldr	r3, [pc, #272]	; (8008ac4 <__multiply+0x14c>)
 80089b2:	4845      	ldr	r0, [pc, #276]	; (8008ac8 <__multiply+0x150>)
 80089b4:	f240 115d 	movw	r1, #349	; 0x15d
 80089b8:	f000 fce4 	bl	8009384 <__assert_func>
 80089bc:	f100 0514 	add.w	r5, r0, #20
 80089c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089c4:	462b      	mov	r3, r5
 80089c6:	2200      	movs	r2, #0
 80089c8:	4543      	cmp	r3, r8
 80089ca:	d321      	bcc.n	8008a10 <__multiply+0x98>
 80089cc:	f104 0314 	add.w	r3, r4, #20
 80089d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089d4:	f109 0314 	add.w	r3, r9, #20
 80089d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089dc:	9202      	str	r2, [sp, #8]
 80089de:	1b3a      	subs	r2, r7, r4
 80089e0:	3a15      	subs	r2, #21
 80089e2:	f022 0203 	bic.w	r2, r2, #3
 80089e6:	3204      	adds	r2, #4
 80089e8:	f104 0115 	add.w	r1, r4, #21
 80089ec:	428f      	cmp	r7, r1
 80089ee:	bf38      	it	cc
 80089f0:	2204      	movcc	r2, #4
 80089f2:	9201      	str	r2, [sp, #4]
 80089f4:	9a02      	ldr	r2, [sp, #8]
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d80c      	bhi.n	8008a16 <__multiply+0x9e>
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	dd03      	ble.n	8008a08 <__multiply+0x90>
 8008a00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05a      	beq.n	8008abe <__multiply+0x146>
 8008a08:	6106      	str	r6, [r0, #16]
 8008a0a:	b005      	add	sp, #20
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	f843 2b04 	str.w	r2, [r3], #4
 8008a14:	e7d8      	b.n	80089c8 <__multiply+0x50>
 8008a16:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a1a:	f1ba 0f00 	cmp.w	sl, #0
 8008a1e:	d024      	beq.n	8008a6a <__multiply+0xf2>
 8008a20:	f104 0e14 	add.w	lr, r4, #20
 8008a24:	46a9      	mov	r9, r5
 8008a26:	f04f 0c00 	mov.w	ip, #0
 8008a2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a2e:	f8d9 1000 	ldr.w	r1, [r9]
 8008a32:	fa1f fb82 	uxth.w	fp, r2
 8008a36:	b289      	uxth	r1, r1
 8008a38:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a40:	f8d9 2000 	ldr.w	r2, [r9]
 8008a44:	4461      	add	r1, ip
 8008a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a52:	b289      	uxth	r1, r1
 8008a54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a58:	4577      	cmp	r7, lr
 8008a5a:	f849 1b04 	str.w	r1, [r9], #4
 8008a5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a62:	d8e2      	bhi.n	8008a2a <__multiply+0xb2>
 8008a64:	9a01      	ldr	r2, [sp, #4]
 8008a66:	f845 c002 	str.w	ip, [r5, r2]
 8008a6a:	9a03      	ldr	r2, [sp, #12]
 8008a6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a70:	3304      	adds	r3, #4
 8008a72:	f1b9 0f00 	cmp.w	r9, #0
 8008a76:	d020      	beq.n	8008aba <__multiply+0x142>
 8008a78:	6829      	ldr	r1, [r5, #0]
 8008a7a:	f104 0c14 	add.w	ip, r4, #20
 8008a7e:	46ae      	mov	lr, r5
 8008a80:	f04f 0a00 	mov.w	sl, #0
 8008a84:	f8bc b000 	ldrh.w	fp, [ip]
 8008a88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a8c:	fb09 220b 	mla	r2, r9, fp, r2
 8008a90:	4492      	add	sl, r2
 8008a92:	b289      	uxth	r1, r1
 8008a94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a98:	f84e 1b04 	str.w	r1, [lr], #4
 8008a9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008aa0:	f8be 1000 	ldrh.w	r1, [lr]
 8008aa4:	0c12      	lsrs	r2, r2, #16
 8008aa6:	fb09 1102 	mla	r1, r9, r2, r1
 8008aaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008aae:	4567      	cmp	r7, ip
 8008ab0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ab4:	d8e6      	bhi.n	8008a84 <__multiply+0x10c>
 8008ab6:	9a01      	ldr	r2, [sp, #4]
 8008ab8:	50a9      	str	r1, [r5, r2]
 8008aba:	3504      	adds	r5, #4
 8008abc:	e79a      	b.n	80089f4 <__multiply+0x7c>
 8008abe:	3e01      	subs	r6, #1
 8008ac0:	e79c      	b.n	80089fc <__multiply+0x84>
 8008ac2:	bf00      	nop
 8008ac4:	0800a978 	.word	0x0800a978
 8008ac8:	0800aa04 	.word	0x0800aa04

08008acc <__pow5mult>:
 8008acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	f012 0203 	ands.w	r2, r2, #3
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	d007      	beq.n	8008aec <__pow5mult+0x20>
 8008adc:	4c25      	ldr	r4, [pc, #148]	; (8008b74 <__pow5mult+0xa8>)
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ae6:	f7ff fe51 	bl	800878c <__multadd>
 8008aea:	4607      	mov	r7, r0
 8008aec:	10ad      	asrs	r5, r5, #2
 8008aee:	d03d      	beq.n	8008b6c <__pow5mult+0xa0>
 8008af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008af2:	b97c      	cbnz	r4, 8008b14 <__pow5mult+0x48>
 8008af4:	2010      	movs	r0, #16
 8008af6:	f7fc fd79 	bl	80055ec <malloc>
 8008afa:	4602      	mov	r2, r0
 8008afc:	6270      	str	r0, [r6, #36]	; 0x24
 8008afe:	b928      	cbnz	r0, 8008b0c <__pow5mult+0x40>
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <__pow5mult+0xac>)
 8008b02:	481e      	ldr	r0, [pc, #120]	; (8008b7c <__pow5mult+0xb0>)
 8008b04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b08:	f000 fc3c 	bl	8009384 <__assert_func>
 8008b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b10:	6004      	str	r4, [r0, #0]
 8008b12:	60c4      	str	r4, [r0, #12]
 8008b14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b1c:	b94c      	cbnz	r4, 8008b32 <__pow5mult+0x66>
 8008b1e:	f240 2171 	movw	r1, #625	; 0x271
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ff12 	bl	800894c <__i2b>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	6003      	str	r3, [r0, #0]
 8008b32:	f04f 0900 	mov.w	r9, #0
 8008b36:	07eb      	lsls	r3, r5, #31
 8008b38:	d50a      	bpl.n	8008b50 <__pow5mult+0x84>
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ff1a 	bl	8008978 <__multiply>
 8008b44:	4639      	mov	r1, r7
 8008b46:	4680      	mov	r8, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff fdfd 	bl	8008748 <_Bfree>
 8008b4e:	4647      	mov	r7, r8
 8008b50:	106d      	asrs	r5, r5, #1
 8008b52:	d00b      	beq.n	8008b6c <__pow5mult+0xa0>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	b938      	cbnz	r0, 8008b68 <__pow5mult+0x9c>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ff0b 	bl	8008978 <__multiply>
 8008b62:	6020      	str	r0, [r4, #0]
 8008b64:	f8c0 9000 	str.w	r9, [r0]
 8008b68:	4604      	mov	r4, r0
 8008b6a:	e7e4      	b.n	8008b36 <__pow5mult+0x6a>
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b72:	bf00      	nop
 8008b74:	0800ab50 	.word	0x0800ab50
 8008b78:	0800a906 	.word	0x0800a906
 8008b7c:	0800aa04 	.word	0x0800aa04

08008b80 <__lshift>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	460c      	mov	r4, r1
 8008b86:	6849      	ldr	r1, [r1, #4]
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	4607      	mov	r7, r0
 8008b92:	4691      	mov	r9, r2
 8008b94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b98:	f108 0601 	add.w	r6, r8, #1
 8008b9c:	42b3      	cmp	r3, r6
 8008b9e:	db0b      	blt.n	8008bb8 <__lshift+0x38>
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7ff fd91 	bl	80086c8 <_Balloc>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	b948      	cbnz	r0, 8008bbe <__lshift+0x3e>
 8008baa:	4602      	mov	r2, r0
 8008bac:	4b2a      	ldr	r3, [pc, #168]	; (8008c58 <__lshift+0xd8>)
 8008bae:	482b      	ldr	r0, [pc, #172]	; (8008c5c <__lshift+0xdc>)
 8008bb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008bb4:	f000 fbe6 	bl	8009384 <__assert_func>
 8008bb8:	3101      	adds	r1, #1
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	e7ee      	b.n	8008b9c <__lshift+0x1c>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f100 0114 	add.w	r1, r0, #20
 8008bc4:	f100 0210 	add.w	r2, r0, #16
 8008bc8:	4618      	mov	r0, r3
 8008bca:	4553      	cmp	r3, sl
 8008bcc:	db37      	blt.n	8008c3e <__lshift+0xbe>
 8008bce:	6920      	ldr	r0, [r4, #16]
 8008bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bd4:	f104 0314 	add.w	r3, r4, #20
 8008bd8:	f019 091f 	ands.w	r9, r9, #31
 8008bdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008be0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008be4:	d02f      	beq.n	8008c46 <__lshift+0xc6>
 8008be6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bea:	468a      	mov	sl, r1
 8008bec:	f04f 0c00 	mov.w	ip, #0
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	fa02 f209 	lsl.w	r2, r2, r9
 8008bf6:	ea42 020c 	orr.w	r2, r2, ip
 8008bfa:	f84a 2b04 	str.w	r2, [sl], #4
 8008bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c02:	4298      	cmp	r0, r3
 8008c04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c08:	d8f2      	bhi.n	8008bf0 <__lshift+0x70>
 8008c0a:	1b03      	subs	r3, r0, r4
 8008c0c:	3b15      	subs	r3, #21
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	3304      	adds	r3, #4
 8008c14:	f104 0215 	add.w	r2, r4, #21
 8008c18:	4290      	cmp	r0, r2
 8008c1a:	bf38      	it	cc
 8008c1c:	2304      	movcc	r3, #4
 8008c1e:	f841 c003 	str.w	ip, [r1, r3]
 8008c22:	f1bc 0f00 	cmp.w	ip, #0
 8008c26:	d001      	beq.n	8008c2c <__lshift+0xac>
 8008c28:	f108 0602 	add.w	r6, r8, #2
 8008c2c:	3e01      	subs	r6, #1
 8008c2e:	4638      	mov	r0, r7
 8008c30:	612e      	str	r6, [r5, #16]
 8008c32:	4621      	mov	r1, r4
 8008c34:	f7ff fd88 	bl	8008748 <_Bfree>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c42:	3301      	adds	r3, #1
 8008c44:	e7c1      	b.n	8008bca <__lshift+0x4a>
 8008c46:	3904      	subs	r1, #4
 8008c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c50:	4298      	cmp	r0, r3
 8008c52:	d8f9      	bhi.n	8008c48 <__lshift+0xc8>
 8008c54:	e7ea      	b.n	8008c2c <__lshift+0xac>
 8008c56:	bf00      	nop
 8008c58:	0800a978 	.word	0x0800a978
 8008c5c:	0800aa04 	.word	0x0800aa04

08008c60 <__mcmp>:
 8008c60:	b530      	push	{r4, r5, lr}
 8008c62:	6902      	ldr	r2, [r0, #16]
 8008c64:	690c      	ldr	r4, [r1, #16]
 8008c66:	1b12      	subs	r2, r2, r4
 8008c68:	d10e      	bne.n	8008c88 <__mcmp+0x28>
 8008c6a:	f100 0314 	add.w	r3, r0, #20
 8008c6e:	3114      	adds	r1, #20
 8008c70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c80:	42a5      	cmp	r5, r4
 8008c82:	d003      	beq.n	8008c8c <__mcmp+0x2c>
 8008c84:	d305      	bcc.n	8008c92 <__mcmp+0x32>
 8008c86:	2201      	movs	r2, #1
 8008c88:	4610      	mov	r0, r2
 8008c8a:	bd30      	pop	{r4, r5, pc}
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	d3f3      	bcc.n	8008c78 <__mcmp+0x18>
 8008c90:	e7fa      	b.n	8008c88 <__mcmp+0x28>
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	e7f7      	b.n	8008c88 <__mcmp+0x28>

08008c98 <__mdiff>:
 8008c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4690      	mov	r8, r2
 8008ca6:	f7ff ffdb 	bl	8008c60 <__mcmp>
 8008caa:	1e05      	subs	r5, r0, #0
 8008cac:	d110      	bne.n	8008cd0 <__mdiff+0x38>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff fd09 	bl	80086c8 <_Balloc>
 8008cb6:	b930      	cbnz	r0, 8008cc6 <__mdiff+0x2e>
 8008cb8:	4b3a      	ldr	r3, [pc, #232]	; (8008da4 <__mdiff+0x10c>)
 8008cba:	4602      	mov	r2, r0
 8008cbc:	f240 2132 	movw	r1, #562	; 0x232
 8008cc0:	4839      	ldr	r0, [pc, #228]	; (8008da8 <__mdiff+0x110>)
 8008cc2:	f000 fb5f 	bl	8009384 <__assert_func>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd0:	bfa4      	itt	ge
 8008cd2:	4643      	movge	r3, r8
 8008cd4:	46a0      	movge	r8, r4
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cdc:	bfa6      	itte	ge
 8008cde:	461c      	movge	r4, r3
 8008ce0:	2500      	movge	r5, #0
 8008ce2:	2501      	movlt	r5, #1
 8008ce4:	f7ff fcf0 	bl	80086c8 <_Balloc>
 8008ce8:	b920      	cbnz	r0, 8008cf4 <__mdiff+0x5c>
 8008cea:	4b2e      	ldr	r3, [pc, #184]	; (8008da4 <__mdiff+0x10c>)
 8008cec:	4602      	mov	r2, r0
 8008cee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cf2:	e7e5      	b.n	8008cc0 <__mdiff+0x28>
 8008cf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cf8:	6926      	ldr	r6, [r4, #16]
 8008cfa:	60c5      	str	r5, [r0, #12]
 8008cfc:	f104 0914 	add.w	r9, r4, #20
 8008d00:	f108 0514 	add.w	r5, r8, #20
 8008d04:	f100 0e14 	add.w	lr, r0, #20
 8008d08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d10:	f108 0210 	add.w	r2, r8, #16
 8008d14:	46f2      	mov	sl, lr
 8008d16:	2100      	movs	r1, #0
 8008d18:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d20:	fa1f f883 	uxth.w	r8, r3
 8008d24:	fa11 f18b 	uxtah	r1, r1, fp
 8008d28:	0c1b      	lsrs	r3, r3, #16
 8008d2a:	eba1 0808 	sub.w	r8, r1, r8
 8008d2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d36:	fa1f f888 	uxth.w	r8, r8
 8008d3a:	1419      	asrs	r1, r3, #16
 8008d3c:	454e      	cmp	r6, r9
 8008d3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d42:	f84a 3b04 	str.w	r3, [sl], #4
 8008d46:	d8e7      	bhi.n	8008d18 <__mdiff+0x80>
 8008d48:	1b33      	subs	r3, r6, r4
 8008d4a:	3b15      	subs	r3, #21
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	3304      	adds	r3, #4
 8008d52:	3415      	adds	r4, #21
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	bf38      	it	cc
 8008d58:	2304      	movcc	r3, #4
 8008d5a:	441d      	add	r5, r3
 8008d5c:	4473      	add	r3, lr
 8008d5e:	469e      	mov	lr, r3
 8008d60:	462e      	mov	r6, r5
 8008d62:	4566      	cmp	r6, ip
 8008d64:	d30e      	bcc.n	8008d84 <__mdiff+0xec>
 8008d66:	f10c 0203 	add.w	r2, ip, #3
 8008d6a:	1b52      	subs	r2, r2, r5
 8008d6c:	f022 0203 	bic.w	r2, r2, #3
 8008d70:	3d03      	subs	r5, #3
 8008d72:	45ac      	cmp	ip, r5
 8008d74:	bf38      	it	cc
 8008d76:	2200      	movcc	r2, #0
 8008d78:	441a      	add	r2, r3
 8008d7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d7e:	b17b      	cbz	r3, 8008da0 <__mdiff+0x108>
 8008d80:	6107      	str	r7, [r0, #16]
 8008d82:	e7a3      	b.n	8008ccc <__mdiff+0x34>
 8008d84:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d88:	fa11 f288 	uxtah	r2, r1, r8
 8008d8c:	1414      	asrs	r4, r2, #16
 8008d8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d92:	b292      	uxth	r2, r2
 8008d94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d98:	f84e 2b04 	str.w	r2, [lr], #4
 8008d9c:	1421      	asrs	r1, r4, #16
 8008d9e:	e7e0      	b.n	8008d62 <__mdiff+0xca>
 8008da0:	3f01      	subs	r7, #1
 8008da2:	e7ea      	b.n	8008d7a <__mdiff+0xe2>
 8008da4:	0800a978 	.word	0x0800a978
 8008da8:	0800aa04 	.word	0x0800aa04

08008dac <__ulp>:
 8008dac:	b082      	sub	sp, #8
 8008dae:	ed8d 0b00 	vstr	d0, [sp]
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	4912      	ldr	r1, [pc, #72]	; (8008e00 <__ulp+0x54>)
 8008db6:	4019      	ands	r1, r3
 8008db8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	dd05      	ble.n	8008dcc <__ulp+0x20>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	ec43 2b10 	vmov	d0, r2, r3
 8008dc8:	b002      	add	sp, #8
 8008dca:	4770      	bx	lr
 8008dcc:	4249      	negs	r1, r1
 8008dce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008dd2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	da04      	bge.n	8008dea <__ulp+0x3e>
 8008de0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008de4:	fa41 f300 	asr.w	r3, r1, r0
 8008de8:	e7ec      	b.n	8008dc4 <__ulp+0x18>
 8008dea:	f1a0 0114 	sub.w	r1, r0, #20
 8008dee:	291e      	cmp	r1, #30
 8008df0:	bfda      	itte	le
 8008df2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008df6:	fa20 f101 	lsrle.w	r1, r0, r1
 8008dfa:	2101      	movgt	r1, #1
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	e7e1      	b.n	8008dc4 <__ulp+0x18>
 8008e00:	7ff00000 	.word	0x7ff00000

08008e04 <__b2d>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	6905      	ldr	r5, [r0, #16]
 8008e08:	f100 0714 	add.w	r7, r0, #20
 8008e0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e10:	1f2e      	subs	r6, r5, #4
 8008e12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff fd48 	bl	80088ac <__hi0bits>
 8008e1c:	f1c0 0320 	rsb	r3, r0, #32
 8008e20:	280a      	cmp	r0, #10
 8008e22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008ea0 <__b2d+0x9c>
 8008e26:	600b      	str	r3, [r1, #0]
 8008e28:	dc14      	bgt.n	8008e54 <__b2d+0x50>
 8008e2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e32:	42b7      	cmp	r7, r6
 8008e34:	ea41 030c 	orr.w	r3, r1, ip
 8008e38:	bf34      	ite	cc
 8008e3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e3e:	2100      	movcs	r1, #0
 8008e40:	3015      	adds	r0, #21
 8008e42:	fa04 f000 	lsl.w	r0, r4, r0
 8008e46:	fa21 f10e 	lsr.w	r1, r1, lr
 8008e4a:	ea40 0201 	orr.w	r2, r0, r1
 8008e4e:	ec43 2b10 	vmov	d0, r2, r3
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	42b7      	cmp	r7, r6
 8008e56:	bf3a      	itte	cc
 8008e58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008e60:	2100      	movcs	r1, #0
 8008e62:	380b      	subs	r0, #11
 8008e64:	d017      	beq.n	8008e96 <__b2d+0x92>
 8008e66:	f1c0 0c20 	rsb	ip, r0, #32
 8008e6a:	fa04 f500 	lsl.w	r5, r4, r0
 8008e6e:	42be      	cmp	r6, r7
 8008e70:	fa21 f40c 	lsr.w	r4, r1, ip
 8008e74:	ea45 0504 	orr.w	r5, r5, r4
 8008e78:	bf8c      	ite	hi
 8008e7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e7e:	2400      	movls	r4, #0
 8008e80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008e84:	fa01 f000 	lsl.w	r0, r1, r0
 8008e88:	fa24 f40c 	lsr.w	r4, r4, ip
 8008e8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e90:	ea40 0204 	orr.w	r2, r0, r4
 8008e94:	e7db      	b.n	8008e4e <__b2d+0x4a>
 8008e96:	ea44 030c 	orr.w	r3, r4, ip
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	e7d7      	b.n	8008e4e <__b2d+0x4a>
 8008e9e:	bf00      	nop
 8008ea0:	3ff00000 	.word	0x3ff00000

08008ea4 <__d2b>:
 8008ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	4689      	mov	r9, r1
 8008eaa:	2101      	movs	r1, #1
 8008eac:	ec57 6b10 	vmov	r6, r7, d0
 8008eb0:	4690      	mov	r8, r2
 8008eb2:	f7ff fc09 	bl	80086c8 <_Balloc>
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	b930      	cbnz	r0, 8008ec8 <__d2b+0x24>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <__d2b+0xb0>)
 8008ebe:	4826      	ldr	r0, [pc, #152]	; (8008f58 <__d2b+0xb4>)
 8008ec0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ec4:	f000 fa5e 	bl	8009384 <__assert_func>
 8008ec8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ecc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ed0:	bb35      	cbnz	r5, 8008f20 <__d2b+0x7c>
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	d028      	beq.n	8008f2a <__d2b+0x86>
 8008ed8:	4668      	mov	r0, sp
 8008eda:	9600      	str	r6, [sp, #0]
 8008edc:	f7ff fd06 	bl	80088ec <__lo0bits>
 8008ee0:	9900      	ldr	r1, [sp, #0]
 8008ee2:	b300      	cbz	r0, 8008f26 <__d2b+0x82>
 8008ee4:	9a01      	ldr	r2, [sp, #4]
 8008ee6:	f1c0 0320 	rsb	r3, r0, #32
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	40c2      	lsrs	r2, r0
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	61a3      	str	r3, [r4, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bf14      	ite	ne
 8008efe:	2202      	movne	r2, #2
 8008f00:	2201      	moveq	r2, #1
 8008f02:	6122      	str	r2, [r4, #16]
 8008f04:	b1d5      	cbz	r5, 8008f3c <__d2b+0x98>
 8008f06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f0a:	4405      	add	r5, r0
 8008f0c:	f8c9 5000 	str.w	r5, [r9]
 8008f10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f14:	f8c8 0000 	str.w	r0, [r8]
 8008f18:	4620      	mov	r0, r4
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f24:	e7d5      	b.n	8008ed2 <__d2b+0x2e>
 8008f26:	6161      	str	r1, [r4, #20]
 8008f28:	e7e5      	b.n	8008ef6 <__d2b+0x52>
 8008f2a:	a801      	add	r0, sp, #4
 8008f2c:	f7ff fcde 	bl	80088ec <__lo0bits>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	2201      	movs	r2, #1
 8008f36:	6122      	str	r2, [r4, #16]
 8008f38:	3020      	adds	r0, #32
 8008f3a:	e7e3      	b.n	8008f04 <__d2b+0x60>
 8008f3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f44:	f8c9 0000 	str.w	r0, [r9]
 8008f48:	6918      	ldr	r0, [r3, #16]
 8008f4a:	f7ff fcaf 	bl	80088ac <__hi0bits>
 8008f4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f52:	e7df      	b.n	8008f14 <__d2b+0x70>
 8008f54:	0800a978 	.word	0x0800a978
 8008f58:	0800aa04 	.word	0x0800aa04

08008f5c <__ratio>:
 8008f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	4688      	mov	r8, r1
 8008f62:	4669      	mov	r1, sp
 8008f64:	4681      	mov	r9, r0
 8008f66:	f7ff ff4d 	bl	8008e04 <__b2d>
 8008f6a:	a901      	add	r1, sp, #4
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	ec55 4b10 	vmov	r4, r5, d0
 8008f72:	f7ff ff47 	bl	8008e04 <__b2d>
 8008f76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f7e:	eba3 0c02 	sub.w	ip, r3, r2
 8008f82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f8c:	ec51 0b10 	vmov	r0, r1, d0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfd6      	itet	le
 8008f94:	460a      	movle	r2, r1
 8008f96:	462a      	movgt	r2, r5
 8008f98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	462f      	mov	r7, r5
 8008fa0:	bfd4      	ite	le
 8008fa2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008fa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008faa:	4620      	mov	r0, r4
 8008fac:	ee10 2a10 	vmov	r2, s0
 8008fb0:	465b      	mov	r3, fp
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	f7f7 fc52 	bl	800085c <__aeabi_ddiv>
 8008fb8:	ec41 0b10 	vmov	d0, r0, r1
 8008fbc:	b003      	add	sp, #12
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fc2 <__copybits>:
 8008fc2:	3901      	subs	r1, #1
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	1149      	asrs	r1, r1, #5
 8008fc8:	6914      	ldr	r4, [r2, #16]
 8008fca:	3101      	adds	r1, #1
 8008fcc:	f102 0314 	add.w	r3, r2, #20
 8008fd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fd8:	1f05      	subs	r5, r0, #4
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	d30c      	bcc.n	8008ff8 <__copybits+0x36>
 8008fde:	1aa3      	subs	r3, r4, r2
 8008fe0:	3b11      	subs	r3, #17
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	3211      	adds	r2, #17
 8008fe8:	42a2      	cmp	r2, r4
 8008fea:	bf88      	it	hi
 8008fec:	2300      	movhi	r3, #0
 8008fee:	4418      	add	r0, r3
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4288      	cmp	r0, r1
 8008ff4:	d305      	bcc.n	8009002 <__copybits+0x40>
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ffc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009000:	e7eb      	b.n	8008fda <__copybits+0x18>
 8009002:	f840 3b04 	str.w	r3, [r0], #4
 8009006:	e7f4      	b.n	8008ff2 <__copybits+0x30>

08009008 <__any_on>:
 8009008:	f100 0214 	add.w	r2, r0, #20
 800900c:	6900      	ldr	r0, [r0, #16]
 800900e:	114b      	asrs	r3, r1, #5
 8009010:	4298      	cmp	r0, r3
 8009012:	b510      	push	{r4, lr}
 8009014:	db11      	blt.n	800903a <__any_on+0x32>
 8009016:	dd0a      	ble.n	800902e <__any_on+0x26>
 8009018:	f011 011f 	ands.w	r1, r1, #31
 800901c:	d007      	beq.n	800902e <__any_on+0x26>
 800901e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009022:	fa24 f001 	lsr.w	r0, r4, r1
 8009026:	fa00 f101 	lsl.w	r1, r0, r1
 800902a:	428c      	cmp	r4, r1
 800902c:	d10b      	bne.n	8009046 <__any_on+0x3e>
 800902e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009032:	4293      	cmp	r3, r2
 8009034:	d803      	bhi.n	800903e <__any_on+0x36>
 8009036:	2000      	movs	r0, #0
 8009038:	bd10      	pop	{r4, pc}
 800903a:	4603      	mov	r3, r0
 800903c:	e7f7      	b.n	800902e <__any_on+0x26>
 800903e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009042:	2900      	cmp	r1, #0
 8009044:	d0f5      	beq.n	8009032 <__any_on+0x2a>
 8009046:	2001      	movs	r0, #1
 8009048:	e7f6      	b.n	8009038 <__any_on+0x30>

0800904a <_calloc_r>:
 800904a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800904c:	fba1 2402 	umull	r2, r4, r1, r2
 8009050:	b94c      	cbnz	r4, 8009066 <_calloc_r+0x1c>
 8009052:	4611      	mov	r1, r2
 8009054:	9201      	str	r2, [sp, #4]
 8009056:	f7fc fb5b 	bl	8005710 <_malloc_r>
 800905a:	9a01      	ldr	r2, [sp, #4]
 800905c:	4605      	mov	r5, r0
 800905e:	b930      	cbnz	r0, 800906e <_calloc_r+0x24>
 8009060:	4628      	mov	r0, r5
 8009062:	b003      	add	sp, #12
 8009064:	bd30      	pop	{r4, r5, pc}
 8009066:	220c      	movs	r2, #12
 8009068:	6002      	str	r2, [r0, #0]
 800906a:	2500      	movs	r5, #0
 800906c:	e7f8      	b.n	8009060 <_calloc_r+0x16>
 800906e:	4621      	mov	r1, r4
 8009070:	f7fc fada 	bl	8005628 <memset>
 8009074:	e7f4      	b.n	8009060 <_calloc_r+0x16>

08009076 <__ssputs_r>:
 8009076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907a:	688e      	ldr	r6, [r1, #8]
 800907c:	429e      	cmp	r6, r3
 800907e:	4682      	mov	sl, r0
 8009080:	460c      	mov	r4, r1
 8009082:	4690      	mov	r8, r2
 8009084:	461f      	mov	r7, r3
 8009086:	d838      	bhi.n	80090fa <__ssputs_r+0x84>
 8009088:	898a      	ldrh	r2, [r1, #12]
 800908a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800908e:	d032      	beq.n	80090f6 <__ssputs_r+0x80>
 8009090:	6825      	ldr	r5, [r4, #0]
 8009092:	6909      	ldr	r1, [r1, #16]
 8009094:	eba5 0901 	sub.w	r9, r5, r1
 8009098:	6965      	ldr	r5, [r4, #20]
 800909a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800909e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a2:	3301      	adds	r3, #1
 80090a4:	444b      	add	r3, r9
 80090a6:	106d      	asrs	r5, r5, #1
 80090a8:	429d      	cmp	r5, r3
 80090aa:	bf38      	it	cc
 80090ac:	461d      	movcc	r5, r3
 80090ae:	0553      	lsls	r3, r2, #21
 80090b0:	d531      	bpl.n	8009116 <__ssputs_r+0xa0>
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7fc fb2c 	bl	8005710 <_malloc_r>
 80090b8:	4606      	mov	r6, r0
 80090ba:	b950      	cbnz	r0, 80090d2 <__ssputs_r+0x5c>
 80090bc:	230c      	movs	r3, #12
 80090be:	f8ca 3000 	str.w	r3, [sl]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	6921      	ldr	r1, [r4, #16]
 80090d4:	464a      	mov	r2, r9
 80090d6:	f7fc fa99 	bl	800560c <memcpy>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	6126      	str	r6, [r4, #16]
 80090e8:	6165      	str	r5, [r4, #20]
 80090ea:	444e      	add	r6, r9
 80090ec:	eba5 0509 	sub.w	r5, r5, r9
 80090f0:	6026      	str	r6, [r4, #0]
 80090f2:	60a5      	str	r5, [r4, #8]
 80090f4:	463e      	mov	r6, r7
 80090f6:	42be      	cmp	r6, r7
 80090f8:	d900      	bls.n	80090fc <__ssputs_r+0x86>
 80090fa:	463e      	mov	r6, r7
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	4632      	mov	r2, r6
 8009100:	4641      	mov	r1, r8
 8009102:	f000 f972 	bl	80093ea <memmove>
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	1b9b      	subs	r3, r3, r6
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	4433      	add	r3, r6
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	2000      	movs	r0, #0
 8009114:	e7db      	b.n	80090ce <__ssputs_r+0x58>
 8009116:	462a      	mov	r2, r5
 8009118:	f000 f981 	bl	800941e <_realloc_r>
 800911c:	4606      	mov	r6, r0
 800911e:	2800      	cmp	r0, #0
 8009120:	d1e1      	bne.n	80090e6 <__ssputs_r+0x70>
 8009122:	6921      	ldr	r1, [r4, #16]
 8009124:	4650      	mov	r0, sl
 8009126:	f7fc fa87 	bl	8005638 <_free_r>
 800912a:	e7c7      	b.n	80090bc <__ssputs_r+0x46>

0800912c <_svfiprintf_r>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4698      	mov	r8, r3
 8009132:	898b      	ldrh	r3, [r1, #12]
 8009134:	061b      	lsls	r3, r3, #24
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4607      	mov	r7, r0
 800913a:	460d      	mov	r5, r1
 800913c:	4614      	mov	r4, r2
 800913e:	d50e      	bpl.n	800915e <_svfiprintf_r+0x32>
 8009140:	690b      	ldr	r3, [r1, #16]
 8009142:	b963      	cbnz	r3, 800915e <_svfiprintf_r+0x32>
 8009144:	2140      	movs	r1, #64	; 0x40
 8009146:	f7fc fae3 	bl	8005710 <_malloc_r>
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	6128      	str	r0, [r5, #16]
 800914e:	b920      	cbnz	r0, 800915a <_svfiprintf_r+0x2e>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e0d1      	b.n	80092fe <_svfiprintf_r+0x1d2>
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	616b      	str	r3, [r5, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	2320      	movs	r3, #32
 8009164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009168:	f8cd 800c 	str.w	r8, [sp, #12]
 800916c:	2330      	movs	r3, #48	; 0x30
 800916e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009318 <_svfiprintf_r+0x1ec>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009176:	f04f 0901 	mov.w	r9, #1
 800917a:	4623      	mov	r3, r4
 800917c:	469a      	mov	sl, r3
 800917e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009182:	b10a      	cbz	r2, 8009188 <_svfiprintf_r+0x5c>
 8009184:	2a25      	cmp	r2, #37	; 0x25
 8009186:	d1f9      	bne.n	800917c <_svfiprintf_r+0x50>
 8009188:	ebba 0b04 	subs.w	fp, sl, r4
 800918c:	d00b      	beq.n	80091a6 <_svfiprintf_r+0x7a>
 800918e:	465b      	mov	r3, fp
 8009190:	4622      	mov	r2, r4
 8009192:	4629      	mov	r1, r5
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ff6e 	bl	8009076 <__ssputs_r>
 800919a:	3001      	adds	r0, #1
 800919c:	f000 80aa 	beq.w	80092f4 <_svfiprintf_r+0x1c8>
 80091a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a2:	445a      	add	r2, fp
 80091a4:	9209      	str	r2, [sp, #36]	; 0x24
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 80a2 	beq.w	80092f4 <_svfiprintf_r+0x1c8>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ba:	f10a 0a01 	add.w	sl, sl, #1
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c6:	931a      	str	r3, [sp, #104]	; 0x68
 80091c8:	4654      	mov	r4, sl
 80091ca:	2205      	movs	r2, #5
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	4851      	ldr	r0, [pc, #324]	; (8009318 <_svfiprintf_r+0x1ec>)
 80091d2:	f7f7 f80d 	bl	80001f0 <memchr>
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	b9d8      	cbnz	r0, 8009212 <_svfiprintf_r+0xe6>
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	bf44      	itt	mi
 80091de:	2320      	movmi	r3, #32
 80091e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e4:	0711      	lsls	r1, r2, #28
 80091e6:	bf44      	itt	mi
 80091e8:	232b      	movmi	r3, #43	; 0x2b
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ee:	f89a 3000 	ldrb.w	r3, [sl]
 80091f2:	2b2a      	cmp	r3, #42	; 0x2a
 80091f4:	d015      	beq.n	8009222 <_svfiprintf_r+0xf6>
 80091f6:	9a07      	ldr	r2, [sp, #28]
 80091f8:	4654      	mov	r4, sl
 80091fa:	2000      	movs	r0, #0
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	4621      	mov	r1, r4
 8009202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009206:	3b30      	subs	r3, #48	; 0x30
 8009208:	2b09      	cmp	r3, #9
 800920a:	d94e      	bls.n	80092aa <_svfiprintf_r+0x17e>
 800920c:	b1b0      	cbz	r0, 800923c <_svfiprintf_r+0x110>
 800920e:	9207      	str	r2, [sp, #28]
 8009210:	e014      	b.n	800923c <_svfiprintf_r+0x110>
 8009212:	eba0 0308 	sub.w	r3, r0, r8
 8009216:	fa09 f303 	lsl.w	r3, r9, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	46a2      	mov	sl, r4
 8009220:	e7d2      	b.n	80091c8 <_svfiprintf_r+0x9c>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	1d19      	adds	r1, r3, #4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	9103      	str	r1, [sp, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbb      	ittet	lt
 800922e:	425b      	neglt	r3, r3
 8009230:	f042 0202 	orrlt.w	r2, r2, #2
 8009234:	9307      	strge	r3, [sp, #28]
 8009236:	9307      	strlt	r3, [sp, #28]
 8009238:	bfb8      	it	lt
 800923a:	9204      	strlt	r2, [sp, #16]
 800923c:	7823      	ldrb	r3, [r4, #0]
 800923e:	2b2e      	cmp	r3, #46	; 0x2e
 8009240:	d10c      	bne.n	800925c <_svfiprintf_r+0x130>
 8009242:	7863      	ldrb	r3, [r4, #1]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d135      	bne.n	80092b4 <_svfiprintf_r+0x188>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d1a      	adds	r2, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9203      	str	r2, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfb8      	it	lt
 8009254:	f04f 33ff 	movlt.w	r3, #4294967295
 8009258:	3402      	adds	r4, #2
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009328 <_svfiprintf_r+0x1fc>
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	2203      	movs	r2, #3
 8009264:	4650      	mov	r0, sl
 8009266:	f7f6 ffc3 	bl	80001f0 <memchr>
 800926a:	b140      	cbz	r0, 800927e <_svfiprintf_r+0x152>
 800926c:	2340      	movs	r3, #64	; 0x40
 800926e:	eba0 000a 	sub.w	r0, r0, sl
 8009272:	fa03 f000 	lsl.w	r0, r3, r0
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	4303      	orrs	r3, r0
 800927a:	3401      	adds	r4, #1
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009282:	4826      	ldr	r0, [pc, #152]	; (800931c <_svfiprintf_r+0x1f0>)
 8009284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009288:	2206      	movs	r2, #6
 800928a:	f7f6 ffb1 	bl	80001f0 <memchr>
 800928e:	2800      	cmp	r0, #0
 8009290:	d038      	beq.n	8009304 <_svfiprintf_r+0x1d8>
 8009292:	4b23      	ldr	r3, [pc, #140]	; (8009320 <_svfiprintf_r+0x1f4>)
 8009294:	bb1b      	cbnz	r3, 80092de <_svfiprintf_r+0x1b2>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	3307      	adds	r3, #7
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	3308      	adds	r3, #8
 80092a0:	9303      	str	r3, [sp, #12]
 80092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a4:	4433      	add	r3, r6
 80092a6:	9309      	str	r3, [sp, #36]	; 0x24
 80092a8:	e767      	b.n	800917a <_svfiprintf_r+0x4e>
 80092aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ae:	460c      	mov	r4, r1
 80092b0:	2001      	movs	r0, #1
 80092b2:	e7a5      	b.n	8009200 <_svfiprintf_r+0xd4>
 80092b4:	2300      	movs	r3, #0
 80092b6:	3401      	adds	r4, #1
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	4619      	mov	r1, r3
 80092bc:	f04f 0c0a 	mov.w	ip, #10
 80092c0:	4620      	mov	r0, r4
 80092c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c6:	3a30      	subs	r2, #48	; 0x30
 80092c8:	2a09      	cmp	r2, #9
 80092ca:	d903      	bls.n	80092d4 <_svfiprintf_r+0x1a8>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0c5      	beq.n	800925c <_svfiprintf_r+0x130>
 80092d0:	9105      	str	r1, [sp, #20]
 80092d2:	e7c3      	b.n	800925c <_svfiprintf_r+0x130>
 80092d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d8:	4604      	mov	r4, r0
 80092da:	2301      	movs	r3, #1
 80092dc:	e7f0      	b.n	80092c0 <_svfiprintf_r+0x194>
 80092de:	ab03      	add	r3, sp, #12
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	462a      	mov	r2, r5
 80092e4:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <_svfiprintf_r+0x1f8>)
 80092e6:	a904      	add	r1, sp, #16
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7fc fb25 	bl	8005938 <_printf_float>
 80092ee:	1c42      	adds	r2, r0, #1
 80092f0:	4606      	mov	r6, r0
 80092f2:	d1d6      	bne.n	80092a2 <_svfiprintf_r+0x176>
 80092f4:	89ab      	ldrh	r3, [r5, #12]
 80092f6:	065b      	lsls	r3, r3, #25
 80092f8:	f53f af2c 	bmi.w	8009154 <_svfiprintf_r+0x28>
 80092fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092fe:	b01d      	add	sp, #116	; 0x74
 8009300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	ab03      	add	r3, sp, #12
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	462a      	mov	r2, r5
 800930a:	4b06      	ldr	r3, [pc, #24]	; (8009324 <_svfiprintf_r+0x1f8>)
 800930c:	a904      	add	r1, sp, #16
 800930e:	4638      	mov	r0, r7
 8009310:	f7fc fdb6 	bl	8005e80 <_printf_i>
 8009314:	e7eb      	b.n	80092ee <_svfiprintf_r+0x1c2>
 8009316:	bf00      	nop
 8009318:	0800ab5c 	.word	0x0800ab5c
 800931c:	0800ab66 	.word	0x0800ab66
 8009320:	08005939 	.word	0x08005939
 8009324:	08009077 	.word	0x08009077
 8009328:	0800ab62 	.word	0x0800ab62
 800932c:	00000000 	.word	0x00000000

08009330 <nan>:
 8009330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009338 <nan+0x8>
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	00000000 	.word	0x00000000
 800933c:	7ff80000 	.word	0x7ff80000

08009340 <strncmp>:
 8009340:	b510      	push	{r4, lr}
 8009342:	b17a      	cbz	r2, 8009364 <strncmp+0x24>
 8009344:	4603      	mov	r3, r0
 8009346:	3901      	subs	r1, #1
 8009348:	1884      	adds	r4, r0, r2
 800934a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800934e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009352:	4290      	cmp	r0, r2
 8009354:	d101      	bne.n	800935a <strncmp+0x1a>
 8009356:	42a3      	cmp	r3, r4
 8009358:	d101      	bne.n	800935e <strncmp+0x1e>
 800935a:	1a80      	subs	r0, r0, r2
 800935c:	bd10      	pop	{r4, pc}
 800935e:	2800      	cmp	r0, #0
 8009360:	d1f3      	bne.n	800934a <strncmp+0xa>
 8009362:	e7fa      	b.n	800935a <strncmp+0x1a>
 8009364:	4610      	mov	r0, r2
 8009366:	e7f9      	b.n	800935c <strncmp+0x1c>

08009368 <__ascii_wctomb>:
 8009368:	b149      	cbz	r1, 800937e <__ascii_wctomb+0x16>
 800936a:	2aff      	cmp	r2, #255	; 0xff
 800936c:	bf85      	ittet	hi
 800936e:	238a      	movhi	r3, #138	; 0x8a
 8009370:	6003      	strhi	r3, [r0, #0]
 8009372:	700a      	strbls	r2, [r1, #0]
 8009374:	f04f 30ff 	movhi.w	r0, #4294967295
 8009378:	bf98      	it	ls
 800937a:	2001      	movls	r0, #1
 800937c:	4770      	bx	lr
 800937e:	4608      	mov	r0, r1
 8009380:	4770      	bx	lr
	...

08009384 <__assert_func>:
 8009384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009386:	4614      	mov	r4, r2
 8009388:	461a      	mov	r2, r3
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <__assert_func+0x2c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4605      	mov	r5, r0
 8009390:	68d8      	ldr	r0, [r3, #12]
 8009392:	b14c      	cbz	r4, 80093a8 <__assert_func+0x24>
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <__assert_func+0x30>)
 8009396:	9100      	str	r1, [sp, #0]
 8009398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800939c:	4906      	ldr	r1, [pc, #24]	; (80093b8 <__assert_func+0x34>)
 800939e:	462b      	mov	r3, r5
 80093a0:	f000 f80e 	bl	80093c0 <fiprintf>
 80093a4:	f000 fa84 	bl	80098b0 <abort>
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <__assert_func+0x38>)
 80093aa:	461c      	mov	r4, r3
 80093ac:	e7f3      	b.n	8009396 <__assert_func+0x12>
 80093ae:	bf00      	nop
 80093b0:	20000014 	.word	0x20000014
 80093b4:	0800ab6d 	.word	0x0800ab6d
 80093b8:	0800ab7a 	.word	0x0800ab7a
 80093bc:	0800aba8 	.word	0x0800aba8

080093c0 <fiprintf>:
 80093c0:	b40e      	push	{r1, r2, r3}
 80093c2:	b503      	push	{r0, r1, lr}
 80093c4:	4601      	mov	r1, r0
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	4805      	ldr	r0, [pc, #20]	; (80093e0 <fiprintf+0x20>)
 80093ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ce:	6800      	ldr	r0, [r0, #0]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f000 f87d 	bl	80094d0 <_vfiprintf_r>
 80093d6:	b002      	add	sp, #8
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b003      	add	sp, #12
 80093de:	4770      	bx	lr
 80093e0:	20000014 	.word	0x20000014

080093e4 <__retarget_lock_init_recursive>:
 80093e4:	4770      	bx	lr

080093e6 <__retarget_lock_acquire_recursive>:
 80093e6:	4770      	bx	lr

080093e8 <__retarget_lock_release_recursive>:
 80093e8:	4770      	bx	lr

080093ea <memmove>:
 80093ea:	4288      	cmp	r0, r1
 80093ec:	b510      	push	{r4, lr}
 80093ee:	eb01 0402 	add.w	r4, r1, r2
 80093f2:	d902      	bls.n	80093fa <memmove+0x10>
 80093f4:	4284      	cmp	r4, r0
 80093f6:	4623      	mov	r3, r4
 80093f8:	d807      	bhi.n	800940a <memmove+0x20>
 80093fa:	1e43      	subs	r3, r0, #1
 80093fc:	42a1      	cmp	r1, r4
 80093fe:	d008      	beq.n	8009412 <memmove+0x28>
 8009400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009404:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009408:	e7f8      	b.n	80093fc <memmove+0x12>
 800940a:	4402      	add	r2, r0
 800940c:	4601      	mov	r1, r0
 800940e:	428a      	cmp	r2, r1
 8009410:	d100      	bne.n	8009414 <memmove+0x2a>
 8009412:	bd10      	pop	{r4, pc}
 8009414:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009418:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800941c:	e7f7      	b.n	800940e <memmove+0x24>

0800941e <_realloc_r>:
 800941e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009422:	4680      	mov	r8, r0
 8009424:	4614      	mov	r4, r2
 8009426:	460e      	mov	r6, r1
 8009428:	b921      	cbnz	r1, 8009434 <_realloc_r+0x16>
 800942a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	4611      	mov	r1, r2
 8009430:	f7fc b96e 	b.w	8005710 <_malloc_r>
 8009434:	b92a      	cbnz	r2, 8009442 <_realloc_r+0x24>
 8009436:	f7fc f8ff 	bl	8005638 <_free_r>
 800943a:	4625      	mov	r5, r4
 800943c:	4628      	mov	r0, r5
 800943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009442:	f000 fc59 	bl	8009cf8 <_malloc_usable_size_r>
 8009446:	4284      	cmp	r4, r0
 8009448:	4607      	mov	r7, r0
 800944a:	d802      	bhi.n	8009452 <_realloc_r+0x34>
 800944c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009450:	d812      	bhi.n	8009478 <_realloc_r+0x5a>
 8009452:	4621      	mov	r1, r4
 8009454:	4640      	mov	r0, r8
 8009456:	f7fc f95b 	bl	8005710 <_malloc_r>
 800945a:	4605      	mov	r5, r0
 800945c:	2800      	cmp	r0, #0
 800945e:	d0ed      	beq.n	800943c <_realloc_r+0x1e>
 8009460:	42bc      	cmp	r4, r7
 8009462:	4622      	mov	r2, r4
 8009464:	4631      	mov	r1, r6
 8009466:	bf28      	it	cs
 8009468:	463a      	movcs	r2, r7
 800946a:	f7fc f8cf 	bl	800560c <memcpy>
 800946e:	4631      	mov	r1, r6
 8009470:	4640      	mov	r0, r8
 8009472:	f7fc f8e1 	bl	8005638 <_free_r>
 8009476:	e7e1      	b.n	800943c <_realloc_r+0x1e>
 8009478:	4635      	mov	r5, r6
 800947a:	e7df      	b.n	800943c <_realloc_r+0x1e>

0800947c <__sfputc_r>:
 800947c:	6893      	ldr	r3, [r2, #8]
 800947e:	3b01      	subs	r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	b410      	push	{r4}
 8009484:	6093      	str	r3, [r2, #8]
 8009486:	da08      	bge.n	800949a <__sfputc_r+0x1e>
 8009488:	6994      	ldr	r4, [r2, #24]
 800948a:	42a3      	cmp	r3, r4
 800948c:	db01      	blt.n	8009492 <__sfputc_r+0x16>
 800948e:	290a      	cmp	r1, #10
 8009490:	d103      	bne.n	800949a <__sfputc_r+0x1e>
 8009492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009496:	f000 b94b 	b.w	8009730 <__swbuf_r>
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	1c58      	adds	r0, r3, #1
 800949e:	6010      	str	r0, [r2, #0]
 80094a0:	7019      	strb	r1, [r3, #0]
 80094a2:	4608      	mov	r0, r1
 80094a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <__sfputs_r>:
 80094aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	18d5      	adds	r5, r2, r3
 80094b4:	42ac      	cmp	r4, r5
 80094b6:	d101      	bne.n	80094bc <__sfputs_r+0x12>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e007      	b.n	80094cc <__sfputs_r+0x22>
 80094bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c0:	463a      	mov	r2, r7
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ffda 	bl	800947c <__sfputc_r>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d1f3      	bne.n	80094b4 <__sfputs_r+0xa>
 80094cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094d0 <_vfiprintf_r>:
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	460d      	mov	r5, r1
 80094d6:	b09d      	sub	sp, #116	; 0x74
 80094d8:	4614      	mov	r4, r2
 80094da:	4698      	mov	r8, r3
 80094dc:	4606      	mov	r6, r0
 80094de:	b118      	cbz	r0, 80094e8 <_vfiprintf_r+0x18>
 80094e0:	6983      	ldr	r3, [r0, #24]
 80094e2:	b90b      	cbnz	r3, 80094e8 <_vfiprintf_r+0x18>
 80094e4:	f000 fb06 	bl	8009af4 <__sinit>
 80094e8:	4b89      	ldr	r3, [pc, #548]	; (8009710 <_vfiprintf_r+0x240>)
 80094ea:	429d      	cmp	r5, r3
 80094ec:	d11b      	bne.n	8009526 <_vfiprintf_r+0x56>
 80094ee:	6875      	ldr	r5, [r6, #4]
 80094f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	d405      	bmi.n	8009502 <_vfiprintf_r+0x32>
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	059a      	lsls	r2, r3, #22
 80094fa:	d402      	bmi.n	8009502 <_vfiprintf_r+0x32>
 80094fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094fe:	f7ff ff72 	bl	80093e6 <__retarget_lock_acquire_recursive>
 8009502:	89ab      	ldrh	r3, [r5, #12]
 8009504:	071b      	lsls	r3, r3, #28
 8009506:	d501      	bpl.n	800950c <_vfiprintf_r+0x3c>
 8009508:	692b      	ldr	r3, [r5, #16]
 800950a:	b9eb      	cbnz	r3, 8009548 <_vfiprintf_r+0x78>
 800950c:	4629      	mov	r1, r5
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f960 	bl	80097d4 <__swsetup_r>
 8009514:	b1c0      	cbz	r0, 8009548 <_vfiprintf_r+0x78>
 8009516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009518:	07dc      	lsls	r4, r3, #31
 800951a:	d50e      	bpl.n	800953a <_vfiprintf_r+0x6a>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	b01d      	add	sp, #116	; 0x74
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	4b7b      	ldr	r3, [pc, #492]	; (8009714 <_vfiprintf_r+0x244>)
 8009528:	429d      	cmp	r5, r3
 800952a:	d101      	bne.n	8009530 <_vfiprintf_r+0x60>
 800952c:	68b5      	ldr	r5, [r6, #8]
 800952e:	e7df      	b.n	80094f0 <_vfiprintf_r+0x20>
 8009530:	4b79      	ldr	r3, [pc, #484]	; (8009718 <_vfiprintf_r+0x248>)
 8009532:	429d      	cmp	r5, r3
 8009534:	bf08      	it	eq
 8009536:	68f5      	ldreq	r5, [r6, #12]
 8009538:	e7da      	b.n	80094f0 <_vfiprintf_r+0x20>
 800953a:	89ab      	ldrh	r3, [r5, #12]
 800953c:	0598      	lsls	r0, r3, #22
 800953e:	d4ed      	bmi.n	800951c <_vfiprintf_r+0x4c>
 8009540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009542:	f7ff ff51 	bl	80093e8 <__retarget_lock_release_recursive>
 8009546:	e7e9      	b.n	800951c <_vfiprintf_r+0x4c>
 8009548:	2300      	movs	r3, #0
 800954a:	9309      	str	r3, [sp, #36]	; 0x24
 800954c:	2320      	movs	r3, #32
 800954e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009552:	f8cd 800c 	str.w	r8, [sp, #12]
 8009556:	2330      	movs	r3, #48	; 0x30
 8009558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800971c <_vfiprintf_r+0x24c>
 800955c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009560:	f04f 0901 	mov.w	r9, #1
 8009564:	4623      	mov	r3, r4
 8009566:	469a      	mov	sl, r3
 8009568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800956c:	b10a      	cbz	r2, 8009572 <_vfiprintf_r+0xa2>
 800956e:	2a25      	cmp	r2, #37	; 0x25
 8009570:	d1f9      	bne.n	8009566 <_vfiprintf_r+0x96>
 8009572:	ebba 0b04 	subs.w	fp, sl, r4
 8009576:	d00b      	beq.n	8009590 <_vfiprintf_r+0xc0>
 8009578:	465b      	mov	r3, fp
 800957a:	4622      	mov	r2, r4
 800957c:	4629      	mov	r1, r5
 800957e:	4630      	mov	r0, r6
 8009580:	f7ff ff93 	bl	80094aa <__sfputs_r>
 8009584:	3001      	adds	r0, #1
 8009586:	f000 80aa 	beq.w	80096de <_vfiprintf_r+0x20e>
 800958a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800958c:	445a      	add	r2, fp
 800958e:	9209      	str	r2, [sp, #36]	; 0x24
 8009590:	f89a 3000 	ldrb.w	r3, [sl]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 80a2 	beq.w	80096de <_vfiprintf_r+0x20e>
 800959a:	2300      	movs	r3, #0
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095a4:	f10a 0a01 	add.w	sl, sl, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b0:	931a      	str	r3, [sp, #104]	; 0x68
 80095b2:	4654      	mov	r4, sl
 80095b4:	2205      	movs	r2, #5
 80095b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ba:	4858      	ldr	r0, [pc, #352]	; (800971c <_vfiprintf_r+0x24c>)
 80095bc:	f7f6 fe18 	bl	80001f0 <memchr>
 80095c0:	9a04      	ldr	r2, [sp, #16]
 80095c2:	b9d8      	cbnz	r0, 80095fc <_vfiprintf_r+0x12c>
 80095c4:	06d1      	lsls	r1, r2, #27
 80095c6:	bf44      	itt	mi
 80095c8:	2320      	movmi	r3, #32
 80095ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ce:	0713      	lsls	r3, r2, #28
 80095d0:	bf44      	itt	mi
 80095d2:	232b      	movmi	r3, #43	; 0x2b
 80095d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d8:	f89a 3000 	ldrb.w	r3, [sl]
 80095dc:	2b2a      	cmp	r3, #42	; 0x2a
 80095de:	d015      	beq.n	800960c <_vfiprintf_r+0x13c>
 80095e0:	9a07      	ldr	r2, [sp, #28]
 80095e2:	4654      	mov	r4, sl
 80095e4:	2000      	movs	r0, #0
 80095e6:	f04f 0c0a 	mov.w	ip, #10
 80095ea:	4621      	mov	r1, r4
 80095ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f0:	3b30      	subs	r3, #48	; 0x30
 80095f2:	2b09      	cmp	r3, #9
 80095f4:	d94e      	bls.n	8009694 <_vfiprintf_r+0x1c4>
 80095f6:	b1b0      	cbz	r0, 8009626 <_vfiprintf_r+0x156>
 80095f8:	9207      	str	r2, [sp, #28]
 80095fa:	e014      	b.n	8009626 <_vfiprintf_r+0x156>
 80095fc:	eba0 0308 	sub.w	r3, r0, r8
 8009600:	fa09 f303 	lsl.w	r3, r9, r3
 8009604:	4313      	orrs	r3, r2
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	46a2      	mov	sl, r4
 800960a:	e7d2      	b.n	80095b2 <_vfiprintf_r+0xe2>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	1d19      	adds	r1, r3, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	9103      	str	r1, [sp, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfbb      	ittet	lt
 8009618:	425b      	neglt	r3, r3
 800961a:	f042 0202 	orrlt.w	r2, r2, #2
 800961e:	9307      	strge	r3, [sp, #28]
 8009620:	9307      	strlt	r3, [sp, #28]
 8009622:	bfb8      	it	lt
 8009624:	9204      	strlt	r2, [sp, #16]
 8009626:	7823      	ldrb	r3, [r4, #0]
 8009628:	2b2e      	cmp	r3, #46	; 0x2e
 800962a:	d10c      	bne.n	8009646 <_vfiprintf_r+0x176>
 800962c:	7863      	ldrb	r3, [r4, #1]
 800962e:	2b2a      	cmp	r3, #42	; 0x2a
 8009630:	d135      	bne.n	800969e <_vfiprintf_r+0x1ce>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	1d1a      	adds	r2, r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	9203      	str	r2, [sp, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfb8      	it	lt
 800963e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009642:	3402      	adds	r4, #2
 8009644:	9305      	str	r3, [sp, #20]
 8009646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800972c <_vfiprintf_r+0x25c>
 800964a:	7821      	ldrb	r1, [r4, #0]
 800964c:	2203      	movs	r2, #3
 800964e:	4650      	mov	r0, sl
 8009650:	f7f6 fdce 	bl	80001f0 <memchr>
 8009654:	b140      	cbz	r0, 8009668 <_vfiprintf_r+0x198>
 8009656:	2340      	movs	r3, #64	; 0x40
 8009658:	eba0 000a 	sub.w	r0, r0, sl
 800965c:	fa03 f000 	lsl.w	r0, r3, r0
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	4303      	orrs	r3, r0
 8009664:	3401      	adds	r4, #1
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966c:	482c      	ldr	r0, [pc, #176]	; (8009720 <_vfiprintf_r+0x250>)
 800966e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009672:	2206      	movs	r2, #6
 8009674:	f7f6 fdbc 	bl	80001f0 <memchr>
 8009678:	2800      	cmp	r0, #0
 800967a:	d03f      	beq.n	80096fc <_vfiprintf_r+0x22c>
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <_vfiprintf_r+0x254>)
 800967e:	bb1b      	cbnz	r3, 80096c8 <_vfiprintf_r+0x1f8>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	3307      	adds	r3, #7
 8009684:	f023 0307 	bic.w	r3, r3, #7
 8009688:	3308      	adds	r3, #8
 800968a:	9303      	str	r3, [sp, #12]
 800968c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968e:	443b      	add	r3, r7
 8009690:	9309      	str	r3, [sp, #36]	; 0x24
 8009692:	e767      	b.n	8009564 <_vfiprintf_r+0x94>
 8009694:	fb0c 3202 	mla	r2, ip, r2, r3
 8009698:	460c      	mov	r4, r1
 800969a:	2001      	movs	r0, #1
 800969c:	e7a5      	b.n	80095ea <_vfiprintf_r+0x11a>
 800969e:	2300      	movs	r3, #0
 80096a0:	3401      	adds	r4, #1
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f04f 0c0a 	mov.w	ip, #10
 80096aa:	4620      	mov	r0, r4
 80096ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b0:	3a30      	subs	r2, #48	; 0x30
 80096b2:	2a09      	cmp	r2, #9
 80096b4:	d903      	bls.n	80096be <_vfiprintf_r+0x1ee>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c5      	beq.n	8009646 <_vfiprintf_r+0x176>
 80096ba:	9105      	str	r1, [sp, #20]
 80096bc:	e7c3      	b.n	8009646 <_vfiprintf_r+0x176>
 80096be:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c2:	4604      	mov	r4, r0
 80096c4:	2301      	movs	r3, #1
 80096c6:	e7f0      	b.n	80096aa <_vfiprintf_r+0x1da>
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	462a      	mov	r2, r5
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <_vfiprintf_r+0x258>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7fc f930 	bl	8005938 <_printf_float>
 80096d8:	4607      	mov	r7, r0
 80096da:	1c78      	adds	r0, r7, #1
 80096dc:	d1d6      	bne.n	800968c <_vfiprintf_r+0x1bc>
 80096de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e0:	07d9      	lsls	r1, r3, #31
 80096e2:	d405      	bmi.n	80096f0 <_vfiprintf_r+0x220>
 80096e4:	89ab      	ldrh	r3, [r5, #12]
 80096e6:	059a      	lsls	r2, r3, #22
 80096e8:	d402      	bmi.n	80096f0 <_vfiprintf_r+0x220>
 80096ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ec:	f7ff fe7c 	bl	80093e8 <__retarget_lock_release_recursive>
 80096f0:	89ab      	ldrh	r3, [r5, #12]
 80096f2:	065b      	lsls	r3, r3, #25
 80096f4:	f53f af12 	bmi.w	800951c <_vfiprintf_r+0x4c>
 80096f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096fa:	e711      	b.n	8009520 <_vfiprintf_r+0x50>
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	462a      	mov	r2, r5
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <_vfiprintf_r+0x258>)
 8009704:	a904      	add	r1, sp, #16
 8009706:	4630      	mov	r0, r6
 8009708:	f7fc fbba 	bl	8005e80 <_printf_i>
 800970c:	e7e4      	b.n	80096d8 <_vfiprintf_r+0x208>
 800970e:	bf00      	nop
 8009710:	0800abcc 	.word	0x0800abcc
 8009714:	0800abec 	.word	0x0800abec
 8009718:	0800abac 	.word	0x0800abac
 800971c:	0800ab5c 	.word	0x0800ab5c
 8009720:	0800ab66 	.word	0x0800ab66
 8009724:	08005939 	.word	0x08005939
 8009728:	080094ab 	.word	0x080094ab
 800972c:	0800ab62 	.word	0x0800ab62

08009730 <__swbuf_r>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	460e      	mov	r6, r1
 8009734:	4614      	mov	r4, r2
 8009736:	4605      	mov	r5, r0
 8009738:	b118      	cbz	r0, 8009742 <__swbuf_r+0x12>
 800973a:	6983      	ldr	r3, [r0, #24]
 800973c:	b90b      	cbnz	r3, 8009742 <__swbuf_r+0x12>
 800973e:	f000 f9d9 	bl	8009af4 <__sinit>
 8009742:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <__swbuf_r+0x98>)
 8009744:	429c      	cmp	r4, r3
 8009746:	d12b      	bne.n	80097a0 <__swbuf_r+0x70>
 8009748:	686c      	ldr	r4, [r5, #4]
 800974a:	69a3      	ldr	r3, [r4, #24]
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	071a      	lsls	r2, r3, #28
 8009752:	d52f      	bpl.n	80097b4 <__swbuf_r+0x84>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b36b      	cbz	r3, 80097b4 <__swbuf_r+0x84>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6963      	ldr	r3, [r4, #20]
 8009760:	b2f6      	uxtb	r6, r6
 8009762:	4283      	cmp	r3, r0
 8009764:	4637      	mov	r7, r6
 8009766:	dc04      	bgt.n	8009772 <__swbuf_r+0x42>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f92e 	bl	80099cc <_fflush_r>
 8009770:	bb30      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	701e      	strb	r6, [r3, #0]
 8009780:	6963      	ldr	r3, [r4, #20]
 8009782:	3001      	adds	r0, #1
 8009784:	4283      	cmp	r3, r0
 8009786:	d004      	beq.n	8009792 <__swbuf_r+0x62>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d506      	bpl.n	800979c <__swbuf_r+0x6c>
 800978e:	2e0a      	cmp	r6, #10
 8009790:	d104      	bne.n	800979c <__swbuf_r+0x6c>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f919 	bl	80099cc <_fflush_r>
 800979a:	b988      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 800979c:	4638      	mov	r0, r7
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <__swbuf_r+0x9c>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <__swbuf_r+0x7a>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7cf      	b.n	800974a <__swbuf_r+0x1a>
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <__swbuf_r+0xa0>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7ca      	b.n	800974a <__swbuf_r+0x1a>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f80c 	bl	80097d4 <__swsetup_r>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0cb      	beq.n	8009758 <__swbuf_r+0x28>
 80097c0:	f04f 37ff 	mov.w	r7, #4294967295
 80097c4:	e7ea      	b.n	800979c <__swbuf_r+0x6c>
 80097c6:	bf00      	nop
 80097c8:	0800abcc 	.word	0x0800abcc
 80097cc:	0800abec 	.word	0x0800abec
 80097d0:	0800abac 	.word	0x0800abac

080097d4 <__swsetup_r>:
 80097d4:	4b32      	ldr	r3, [pc, #200]	; (80098a0 <__swsetup_r+0xcc>)
 80097d6:	b570      	push	{r4, r5, r6, lr}
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	4606      	mov	r6, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	b125      	cbz	r5, 80097ea <__swsetup_r+0x16>
 80097e0:	69ab      	ldr	r3, [r5, #24]
 80097e2:	b913      	cbnz	r3, 80097ea <__swsetup_r+0x16>
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 f985 	bl	8009af4 <__sinit>
 80097ea:	4b2e      	ldr	r3, [pc, #184]	; (80098a4 <__swsetup_r+0xd0>)
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d10f      	bne.n	8009810 <__swsetup_r+0x3c>
 80097f0:	686c      	ldr	r4, [r5, #4]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f8:	0719      	lsls	r1, r3, #28
 80097fa:	d42c      	bmi.n	8009856 <__swsetup_r+0x82>
 80097fc:	06dd      	lsls	r5, r3, #27
 80097fe:	d411      	bmi.n	8009824 <__swsetup_r+0x50>
 8009800:	2309      	movs	r3, #9
 8009802:	6033      	str	r3, [r6, #0]
 8009804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
 800980e:	e03e      	b.n	800988e <__swsetup_r+0xba>
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <__swsetup_r+0xd4>)
 8009812:	429c      	cmp	r4, r3
 8009814:	d101      	bne.n	800981a <__swsetup_r+0x46>
 8009816:	68ac      	ldr	r4, [r5, #8]
 8009818:	e7eb      	b.n	80097f2 <__swsetup_r+0x1e>
 800981a:	4b24      	ldr	r3, [pc, #144]	; (80098ac <__swsetup_r+0xd8>)
 800981c:	429c      	cmp	r4, r3
 800981e:	bf08      	it	eq
 8009820:	68ec      	ldreq	r4, [r5, #12]
 8009822:	e7e6      	b.n	80097f2 <__swsetup_r+0x1e>
 8009824:	0758      	lsls	r0, r3, #29
 8009826:	d512      	bpl.n	800984e <__swsetup_r+0x7a>
 8009828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982a:	b141      	cbz	r1, 800983e <__swsetup_r+0x6a>
 800982c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009830:	4299      	cmp	r1, r3
 8009832:	d002      	beq.n	800983a <__swsetup_r+0x66>
 8009834:	4630      	mov	r0, r6
 8009836:	f7fb feff 	bl	8005638 <_free_r>
 800983a:	2300      	movs	r3, #0
 800983c:	6363      	str	r3, [r4, #52]	; 0x34
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	2300      	movs	r3, #0
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f043 0308 	orr.w	r3, r3, #8
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	b94b      	cbnz	r3, 800986e <__swsetup_r+0x9a>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009864:	d003      	beq.n	800986e <__swsetup_r+0x9a>
 8009866:	4621      	mov	r1, r4
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fa05 	bl	8009c78 <__smakebuf_r>
 800986e:	89a0      	ldrh	r0, [r4, #12]
 8009870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009874:	f010 0301 	ands.w	r3, r0, #1
 8009878:	d00a      	beq.n	8009890 <__swsetup_r+0xbc>
 800987a:	2300      	movs	r3, #0
 800987c:	60a3      	str	r3, [r4, #8]
 800987e:	6963      	ldr	r3, [r4, #20]
 8009880:	425b      	negs	r3, r3
 8009882:	61a3      	str	r3, [r4, #24]
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	b943      	cbnz	r3, 800989a <__swsetup_r+0xc6>
 8009888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800988c:	d1ba      	bne.n	8009804 <__swsetup_r+0x30>
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	0781      	lsls	r1, r0, #30
 8009892:	bf58      	it	pl
 8009894:	6963      	ldrpl	r3, [r4, #20]
 8009896:	60a3      	str	r3, [r4, #8]
 8009898:	e7f4      	b.n	8009884 <__swsetup_r+0xb0>
 800989a:	2000      	movs	r0, #0
 800989c:	e7f7      	b.n	800988e <__swsetup_r+0xba>
 800989e:	bf00      	nop
 80098a0:	20000014 	.word	0x20000014
 80098a4:	0800abcc 	.word	0x0800abcc
 80098a8:	0800abec 	.word	0x0800abec
 80098ac:	0800abac 	.word	0x0800abac

080098b0 <abort>:
 80098b0:	b508      	push	{r3, lr}
 80098b2:	2006      	movs	r0, #6
 80098b4:	f000 fa50 	bl	8009d58 <raise>
 80098b8:	2001      	movs	r0, #1
 80098ba:	f7f9 fd21 	bl	8003300 <_exit>
	...

080098c0 <__sflush_r>:
 80098c0:	898a      	ldrh	r2, [r1, #12]
 80098c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	4605      	mov	r5, r0
 80098c8:	0710      	lsls	r0, r2, #28
 80098ca:	460c      	mov	r4, r1
 80098cc:	d458      	bmi.n	8009980 <__sflush_r+0xc0>
 80098ce:	684b      	ldr	r3, [r1, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dc05      	bgt.n	80098e0 <__sflush_r+0x20>
 80098d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dc02      	bgt.n	80098e0 <__sflush_r+0x20>
 80098da:	2000      	movs	r0, #0
 80098dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098e2:	2e00      	cmp	r6, #0
 80098e4:	d0f9      	beq.n	80098da <__sflush_r+0x1a>
 80098e6:	2300      	movs	r3, #0
 80098e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098ec:	682f      	ldr	r7, [r5, #0]
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	d032      	beq.n	8009958 <__sflush_r+0x98>
 80098f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	075a      	lsls	r2, r3, #29
 80098f8:	d505      	bpl.n	8009906 <__sflush_r+0x46>
 80098fa:	6863      	ldr	r3, [r4, #4]
 80098fc:	1ac0      	subs	r0, r0, r3
 80098fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009900:	b10b      	cbz	r3, 8009906 <__sflush_r+0x46>
 8009902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009904:	1ac0      	subs	r0, r0, r3
 8009906:	2300      	movs	r3, #0
 8009908:	4602      	mov	r2, r0
 800990a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800990c:	6a21      	ldr	r1, [r4, #32]
 800990e:	4628      	mov	r0, r5
 8009910:	47b0      	blx	r6
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	d106      	bne.n	8009926 <__sflush_r+0x66>
 8009918:	6829      	ldr	r1, [r5, #0]
 800991a:	291d      	cmp	r1, #29
 800991c:	d82c      	bhi.n	8009978 <__sflush_r+0xb8>
 800991e:	4a2a      	ldr	r2, [pc, #168]	; (80099c8 <__sflush_r+0x108>)
 8009920:	40ca      	lsrs	r2, r1
 8009922:	07d6      	lsls	r6, r2, #31
 8009924:	d528      	bpl.n	8009978 <__sflush_r+0xb8>
 8009926:	2200      	movs	r2, #0
 8009928:	6062      	str	r2, [r4, #4]
 800992a:	04d9      	lsls	r1, r3, #19
 800992c:	6922      	ldr	r2, [r4, #16]
 800992e:	6022      	str	r2, [r4, #0]
 8009930:	d504      	bpl.n	800993c <__sflush_r+0x7c>
 8009932:	1c42      	adds	r2, r0, #1
 8009934:	d101      	bne.n	800993a <__sflush_r+0x7a>
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	b903      	cbnz	r3, 800993c <__sflush_r+0x7c>
 800993a:	6560      	str	r0, [r4, #84]	; 0x54
 800993c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800993e:	602f      	str	r7, [r5, #0]
 8009940:	2900      	cmp	r1, #0
 8009942:	d0ca      	beq.n	80098da <__sflush_r+0x1a>
 8009944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009948:	4299      	cmp	r1, r3
 800994a:	d002      	beq.n	8009952 <__sflush_r+0x92>
 800994c:	4628      	mov	r0, r5
 800994e:	f7fb fe73 	bl	8005638 <_free_r>
 8009952:	2000      	movs	r0, #0
 8009954:	6360      	str	r0, [r4, #52]	; 0x34
 8009956:	e7c1      	b.n	80098dc <__sflush_r+0x1c>
 8009958:	6a21      	ldr	r1, [r4, #32]
 800995a:	2301      	movs	r3, #1
 800995c:	4628      	mov	r0, r5
 800995e:	47b0      	blx	r6
 8009960:	1c41      	adds	r1, r0, #1
 8009962:	d1c7      	bne.n	80098f4 <__sflush_r+0x34>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0c4      	beq.n	80098f4 <__sflush_r+0x34>
 800996a:	2b1d      	cmp	r3, #29
 800996c:	d001      	beq.n	8009972 <__sflush_r+0xb2>
 800996e:	2b16      	cmp	r3, #22
 8009970:	d101      	bne.n	8009976 <__sflush_r+0xb6>
 8009972:	602f      	str	r7, [r5, #0]
 8009974:	e7b1      	b.n	80098da <__sflush_r+0x1a>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	e7ad      	b.n	80098dc <__sflush_r+0x1c>
 8009980:	690f      	ldr	r7, [r1, #16]
 8009982:	2f00      	cmp	r7, #0
 8009984:	d0a9      	beq.n	80098da <__sflush_r+0x1a>
 8009986:	0793      	lsls	r3, r2, #30
 8009988:	680e      	ldr	r6, [r1, #0]
 800998a:	bf08      	it	eq
 800998c:	694b      	ldreq	r3, [r1, #20]
 800998e:	600f      	str	r7, [r1, #0]
 8009990:	bf18      	it	ne
 8009992:	2300      	movne	r3, #0
 8009994:	eba6 0807 	sub.w	r8, r6, r7
 8009998:	608b      	str	r3, [r1, #8]
 800999a:	f1b8 0f00 	cmp.w	r8, #0
 800999e:	dd9c      	ble.n	80098da <__sflush_r+0x1a>
 80099a0:	6a21      	ldr	r1, [r4, #32]
 80099a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099a4:	4643      	mov	r3, r8
 80099a6:	463a      	mov	r2, r7
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b0      	blx	r6
 80099ac:	2800      	cmp	r0, #0
 80099ae:	dc06      	bgt.n	80099be <__sflush_r+0xfe>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e78e      	b.n	80098dc <__sflush_r+0x1c>
 80099be:	4407      	add	r7, r0
 80099c0:	eba8 0800 	sub.w	r8, r8, r0
 80099c4:	e7e9      	b.n	800999a <__sflush_r+0xda>
 80099c6:	bf00      	nop
 80099c8:	20400001 	.word	0x20400001

080099cc <_fflush_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	690b      	ldr	r3, [r1, #16]
 80099d0:	4605      	mov	r5, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	b913      	cbnz	r3, 80099dc <_fflush_r+0x10>
 80099d6:	2500      	movs	r5, #0
 80099d8:	4628      	mov	r0, r5
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	b118      	cbz	r0, 80099e6 <_fflush_r+0x1a>
 80099de:	6983      	ldr	r3, [r0, #24]
 80099e0:	b90b      	cbnz	r3, 80099e6 <_fflush_r+0x1a>
 80099e2:	f000 f887 	bl	8009af4 <__sinit>
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <_fflush_r+0x6c>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	d11b      	bne.n	8009a24 <_fflush_r+0x58>
 80099ec:	686c      	ldr	r4, [r5, #4]
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0ef      	beq.n	80099d6 <_fflush_r+0xa>
 80099f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099f8:	07d0      	lsls	r0, r2, #31
 80099fa:	d404      	bmi.n	8009a06 <_fflush_r+0x3a>
 80099fc:	0599      	lsls	r1, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_fflush_r+0x3a>
 8009a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a02:	f7ff fcf0 	bl	80093e6 <__retarget_lock_acquire_recursive>
 8009a06:	4628      	mov	r0, r5
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f7ff ff59 	bl	80098c0 <__sflush_r>
 8009a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a10:	07da      	lsls	r2, r3, #31
 8009a12:	4605      	mov	r5, r0
 8009a14:	d4e0      	bmi.n	80099d8 <_fflush_r+0xc>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	059b      	lsls	r3, r3, #22
 8009a1a:	d4dd      	bmi.n	80099d8 <_fflush_r+0xc>
 8009a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1e:	f7ff fce3 	bl	80093e8 <__retarget_lock_release_recursive>
 8009a22:	e7d9      	b.n	80099d8 <_fflush_r+0xc>
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <_fflush_r+0x70>)
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d101      	bne.n	8009a2e <_fflush_r+0x62>
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	e7df      	b.n	80099ee <_fflush_r+0x22>
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <_fflush_r+0x74>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	bf08      	it	eq
 8009a34:	68ec      	ldreq	r4, [r5, #12]
 8009a36:	e7da      	b.n	80099ee <_fflush_r+0x22>
 8009a38:	0800abcc 	.word	0x0800abcc
 8009a3c:	0800abec 	.word	0x0800abec
 8009a40:	0800abac 	.word	0x0800abac

08009a44 <std>:
 8009a44:	2300      	movs	r3, #0
 8009a46:	b510      	push	{r4, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a52:	6083      	str	r3, [r0, #8]
 8009a54:	8181      	strh	r1, [r0, #12]
 8009a56:	6643      	str	r3, [r0, #100]	; 0x64
 8009a58:	81c2      	strh	r2, [r0, #14]
 8009a5a:	6183      	str	r3, [r0, #24]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	2208      	movs	r2, #8
 8009a60:	305c      	adds	r0, #92	; 0x5c
 8009a62:	f7fb fde1 	bl	8005628 <memset>
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <std+0x38>)
 8009a68:	6263      	str	r3, [r4, #36]	; 0x24
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <std+0x3c>)
 8009a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <std+0x40>)
 8009a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <std+0x44>)
 8009a74:	6224      	str	r4, [r4, #32]
 8009a76:	6323      	str	r3, [r4, #48]	; 0x30
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	bf00      	nop
 8009a7c:	08009d91 	.word	0x08009d91
 8009a80:	08009db3 	.word	0x08009db3
 8009a84:	08009deb 	.word	0x08009deb
 8009a88:	08009e0f 	.word	0x08009e0f

08009a8c <_cleanup_r>:
 8009a8c:	4901      	ldr	r1, [pc, #4]	; (8009a94 <_cleanup_r+0x8>)
 8009a8e:	f000 b8af 	b.w	8009bf0 <_fwalk_reent>
 8009a92:	bf00      	nop
 8009a94:	080099cd 	.word	0x080099cd

08009a98 <__sfmoreglue>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	2268      	movs	r2, #104	; 0x68
 8009a9c:	1e4d      	subs	r5, r1, #1
 8009a9e:	4355      	muls	r5, r2
 8009aa0:	460e      	mov	r6, r1
 8009aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009aa6:	f7fb fe33 	bl	8005710 <_malloc_r>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	b140      	cbz	r0, 8009ac0 <__sfmoreglue+0x28>
 8009aae:	2100      	movs	r1, #0
 8009ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ab4:	300c      	adds	r0, #12
 8009ab6:	60a0      	str	r0, [r4, #8]
 8009ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009abc:	f7fb fdb4 	bl	8005628 <memset>
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}

08009ac4 <__sfp_lock_acquire>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__sfp_lock_acquire+0x8>)
 8009ac6:	f7ff bc8e 	b.w	80093e6 <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	2000076d 	.word	0x2000076d

08009ad0 <__sfp_lock_release>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sfp_lock_release+0x8>)
 8009ad2:	f7ff bc89 	b.w	80093e8 <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	2000076d 	.word	0x2000076d

08009adc <__sinit_lock_acquire>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__sinit_lock_acquire+0x8>)
 8009ade:	f7ff bc82 	b.w	80093e6 <__retarget_lock_acquire_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	2000076e 	.word	0x2000076e

08009ae8 <__sinit_lock_release>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__sinit_lock_release+0x8>)
 8009aea:	f7ff bc7d 	b.w	80093e8 <__retarget_lock_release_recursive>
 8009aee:	bf00      	nop
 8009af0:	2000076e 	.word	0x2000076e

08009af4 <__sinit>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	4604      	mov	r4, r0
 8009af8:	f7ff fff0 	bl	8009adc <__sinit_lock_acquire>
 8009afc:	69a3      	ldr	r3, [r4, #24]
 8009afe:	b11b      	cbz	r3, 8009b08 <__sinit+0x14>
 8009b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b04:	f7ff bff0 	b.w	8009ae8 <__sinit_lock_release>
 8009b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <__sinit+0x68>)
 8009b10:	4a13      	ldr	r2, [pc, #76]	; (8009b60 <__sinit+0x6c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	bf04      	itt	eq
 8009b1a:	2301      	moveq	r3, #1
 8009b1c:	61a3      	streq	r3, [r4, #24]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 f820 	bl	8009b64 <__sfp>
 8009b24:	6060      	str	r0, [r4, #4]
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 f81c 	bl	8009b64 <__sfp>
 8009b2c:	60a0      	str	r0, [r4, #8]
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f818 	bl	8009b64 <__sfp>
 8009b34:	2200      	movs	r2, #0
 8009b36:	60e0      	str	r0, [r4, #12]
 8009b38:	2104      	movs	r1, #4
 8009b3a:	6860      	ldr	r0, [r4, #4]
 8009b3c:	f7ff ff82 	bl	8009a44 <std>
 8009b40:	68a0      	ldr	r0, [r4, #8]
 8009b42:	2201      	movs	r2, #1
 8009b44:	2109      	movs	r1, #9
 8009b46:	f7ff ff7d 	bl	8009a44 <std>
 8009b4a:	68e0      	ldr	r0, [r4, #12]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	2112      	movs	r1, #18
 8009b50:	f7ff ff78 	bl	8009a44 <std>
 8009b54:	2301      	movs	r3, #1
 8009b56:	61a3      	str	r3, [r4, #24]
 8009b58:	e7d2      	b.n	8009b00 <__sinit+0xc>
 8009b5a:	bf00      	nop
 8009b5c:	0800a764 	.word	0x0800a764
 8009b60:	08009a8d 	.word	0x08009a8d

08009b64 <__sfp>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	4607      	mov	r7, r0
 8009b68:	f7ff ffac 	bl	8009ac4 <__sfp_lock_acquire>
 8009b6c:	4b1e      	ldr	r3, [pc, #120]	; (8009be8 <__sfp+0x84>)
 8009b6e:	681e      	ldr	r6, [r3, #0]
 8009b70:	69b3      	ldr	r3, [r6, #24]
 8009b72:	b913      	cbnz	r3, 8009b7a <__sfp+0x16>
 8009b74:	4630      	mov	r0, r6
 8009b76:	f7ff ffbd 	bl	8009af4 <__sinit>
 8009b7a:	3648      	adds	r6, #72	; 0x48
 8009b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	d503      	bpl.n	8009b8c <__sfp+0x28>
 8009b84:	6833      	ldr	r3, [r6, #0]
 8009b86:	b30b      	cbz	r3, 8009bcc <__sfp+0x68>
 8009b88:	6836      	ldr	r6, [r6, #0]
 8009b8a:	e7f7      	b.n	8009b7c <__sfp+0x18>
 8009b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b90:	b9d5      	cbnz	r5, 8009bc8 <__sfp+0x64>
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <__sfp+0x88>)
 8009b94:	60e3      	str	r3, [r4, #12]
 8009b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b9c:	f7ff fc22 	bl	80093e4 <__retarget_lock_init_recursive>
 8009ba0:	f7ff ff96 	bl	8009ad0 <__sfp_lock_release>
 8009ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bac:	6025      	str	r5, [r4, #0]
 8009bae:	61a5      	str	r5, [r4, #24]
 8009bb0:	2208      	movs	r2, #8
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bb8:	f7fb fd36 	bl	8005628 <memset>
 8009bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc8:	3468      	adds	r4, #104	; 0x68
 8009bca:	e7d9      	b.n	8009b80 <__sfp+0x1c>
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f7ff ff62 	bl	8009a98 <__sfmoreglue>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	6030      	str	r0, [r6, #0]
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1d5      	bne.n	8009b88 <__sfp+0x24>
 8009bdc:	f7ff ff78 	bl	8009ad0 <__sfp_lock_release>
 8009be0:	230c      	movs	r3, #12
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	e7ee      	b.n	8009bc4 <__sfp+0x60>
 8009be6:	bf00      	nop
 8009be8:	0800a764 	.word	0x0800a764
 8009bec:	ffff0001 	.word	0xffff0001

08009bf0 <_fwalk_reent>:
 8009bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	4688      	mov	r8, r1
 8009bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bfc:	2700      	movs	r7, #0
 8009bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c02:	f1b9 0901 	subs.w	r9, r9, #1
 8009c06:	d505      	bpl.n	8009c14 <_fwalk_reent+0x24>
 8009c08:	6824      	ldr	r4, [r4, #0]
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	d1f7      	bne.n	8009bfe <_fwalk_reent+0xe>
 8009c0e:	4638      	mov	r0, r7
 8009c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c14:	89ab      	ldrh	r3, [r5, #12]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d907      	bls.n	8009c2a <_fwalk_reent+0x3a>
 8009c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	d003      	beq.n	8009c2a <_fwalk_reent+0x3a>
 8009c22:	4629      	mov	r1, r5
 8009c24:	4630      	mov	r0, r6
 8009c26:	47c0      	blx	r8
 8009c28:	4307      	orrs	r7, r0
 8009c2a:	3568      	adds	r5, #104	; 0x68
 8009c2c:	e7e9      	b.n	8009c02 <_fwalk_reent+0x12>

08009c2e <__swhatbuf_r>:
 8009c2e:	b570      	push	{r4, r5, r6, lr}
 8009c30:	460e      	mov	r6, r1
 8009c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c36:	2900      	cmp	r1, #0
 8009c38:	b096      	sub	sp, #88	; 0x58
 8009c3a:	4614      	mov	r4, r2
 8009c3c:	461d      	mov	r5, r3
 8009c3e:	da08      	bge.n	8009c52 <__swhatbuf_r+0x24>
 8009c40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	602a      	str	r2, [r5, #0]
 8009c48:	061a      	lsls	r2, r3, #24
 8009c4a:	d410      	bmi.n	8009c6e <__swhatbuf_r+0x40>
 8009c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c50:	e00e      	b.n	8009c70 <__swhatbuf_r+0x42>
 8009c52:	466a      	mov	r2, sp
 8009c54:	f000 f902 	bl	8009e5c <_fstat_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	dbf1      	blt.n	8009c40 <__swhatbuf_r+0x12>
 8009c5c:	9a01      	ldr	r2, [sp, #4]
 8009c5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c66:	425a      	negs	r2, r3
 8009c68:	415a      	adcs	r2, r3
 8009c6a:	602a      	str	r2, [r5, #0]
 8009c6c:	e7ee      	b.n	8009c4c <__swhatbuf_r+0x1e>
 8009c6e:	2340      	movs	r3, #64	; 0x40
 8009c70:	2000      	movs	r0, #0
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	b016      	add	sp, #88	; 0x58
 8009c76:	bd70      	pop	{r4, r5, r6, pc}

08009c78 <__smakebuf_r>:
 8009c78:	898b      	ldrh	r3, [r1, #12]
 8009c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c7c:	079d      	lsls	r5, r3, #30
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460c      	mov	r4, r1
 8009c82:	d507      	bpl.n	8009c94 <__smakebuf_r+0x1c>
 8009c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	6123      	str	r3, [r4, #16]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	6163      	str	r3, [r4, #20]
 8009c90:	b002      	add	sp, #8
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	ab01      	add	r3, sp, #4
 8009c96:	466a      	mov	r2, sp
 8009c98:	f7ff ffc9 	bl	8009c2e <__swhatbuf_r>
 8009c9c:	9900      	ldr	r1, [sp, #0]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f7fb fd35 	bl	8005710 <_malloc_r>
 8009ca6:	b948      	cbnz	r0, 8009cbc <__smakebuf_r+0x44>
 8009ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cac:	059a      	lsls	r2, r3, #22
 8009cae:	d4ef      	bmi.n	8009c90 <__smakebuf_r+0x18>
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	f043 0302 	orr.w	r3, r3, #2
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	e7e3      	b.n	8009c84 <__smakebuf_r+0xc>
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <__smakebuf_r+0x7c>)
 8009cbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	6020      	str	r0, [r4, #0]
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	6163      	str	r3, [r4, #20]
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	6120      	str	r0, [r4, #16]
 8009cd2:	b15b      	cbz	r3, 8009cec <__smakebuf_r+0x74>
 8009cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f8d1 	bl	8009e80 <_isatty_r>
 8009cde:	b128      	cbz	r0, 8009cec <__smakebuf_r+0x74>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	89a0      	ldrh	r0, [r4, #12]
 8009cee:	4305      	orrs	r5, r0
 8009cf0:	81a5      	strh	r5, [r4, #12]
 8009cf2:	e7cd      	b.n	8009c90 <__smakebuf_r+0x18>
 8009cf4:	08009a8d 	.word	0x08009a8d

08009cf8 <_malloc_usable_size_r>:
 8009cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfc:	1f18      	subs	r0, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfbc      	itt	lt
 8009d02:	580b      	ldrlt	r3, [r1, r0]
 8009d04:	18c0      	addlt	r0, r0, r3
 8009d06:	4770      	bx	lr

08009d08 <_raise_r>:
 8009d08:	291f      	cmp	r1, #31
 8009d0a:	b538      	push	{r3, r4, r5, lr}
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	d904      	bls.n	8009d1c <_raise_r+0x14>
 8009d12:	2316      	movs	r3, #22
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d1e:	b112      	cbz	r2, 8009d26 <_raise_r+0x1e>
 8009d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d24:	b94b      	cbnz	r3, 8009d3a <_raise_r+0x32>
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 f830 	bl	8009d8c <_getpid_r>
 8009d2c:	462a      	mov	r2, r5
 8009d2e:	4601      	mov	r1, r0
 8009d30:	4620      	mov	r0, r4
 8009d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d36:	f000 b817 	b.w	8009d68 <_kill_r>
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d00a      	beq.n	8009d54 <_raise_r+0x4c>
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	d103      	bne.n	8009d4a <_raise_r+0x42>
 8009d42:	2316      	movs	r3, #22
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7e7      	b.n	8009d1a <_raise_r+0x12>
 8009d4a:	2400      	movs	r4, #0
 8009d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d50:	4628      	mov	r0, r5
 8009d52:	4798      	blx	r3
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7e0      	b.n	8009d1a <_raise_r+0x12>

08009d58 <raise>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <raise+0xc>)
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f7ff bfd3 	b.w	8009d08 <_raise_r>
 8009d62:	bf00      	nop
 8009d64:	20000014 	.word	0x20000014

08009d68 <_kill_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	; (8009d88 <_kill_r+0x20>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	f7f9 fab3 	bl	80032e0 <_kill>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d102      	bne.n	8009d84 <_kill_r+0x1c>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	b103      	cbz	r3, 8009d84 <_kill_r+0x1c>
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	20000768 	.word	0x20000768

08009d8c <_getpid_r>:
 8009d8c:	f7f9 baa0 	b.w	80032d0 <_getpid>

08009d90 <__sread>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	f000 f894 	bl	8009ec4 <_read_r>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	bfab      	itete	ge
 8009da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009da2:	89a3      	ldrhlt	r3, [r4, #12]
 8009da4:	181b      	addge	r3, r3, r0
 8009da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009daa:	bfac      	ite	ge
 8009dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dae:	81a3      	strhlt	r3, [r4, #12]
 8009db0:	bd10      	pop	{r4, pc}

08009db2 <__swrite>:
 8009db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db6:	461f      	mov	r7, r3
 8009db8:	898b      	ldrh	r3, [r1, #12]
 8009dba:	05db      	lsls	r3, r3, #23
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	d505      	bpl.n	8009dd0 <__swrite+0x1e>
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	2302      	movs	r3, #2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f000 f868 	bl	8009ea0 <_lseek_r>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	4632      	mov	r2, r6
 8009dde:	463b      	mov	r3, r7
 8009de0:	4628      	mov	r0, r5
 8009de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009de6:	f000 b817 	b.w	8009e18 <_write_r>

08009dea <__sseek>:
 8009dea:	b510      	push	{r4, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df2:	f000 f855 	bl	8009ea0 <_lseek_r>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	bf15      	itete	ne
 8009dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e06:	81a3      	strheq	r3, [r4, #12]
 8009e08:	bf18      	it	ne
 8009e0a:	81a3      	strhne	r3, [r4, #12]
 8009e0c:	bd10      	pop	{r4, pc}

08009e0e <__sclose>:
 8009e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e12:	f000 b813 	b.w	8009e3c <_close_r>
	...

08009e18 <_write_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_write_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f9 fa91 	bl	800334e <_write>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_write_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_write_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20000768 	.word	0x20000768

08009e3c <_close_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d06      	ldr	r5, [pc, #24]	; (8009e58 <_close_r+0x1c>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	f7f9 fa9d 	bl	8003386 <_close>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d102      	bne.n	8009e56 <_close_r+0x1a>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	b103      	cbz	r3, 8009e56 <_close_r+0x1a>
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	20000768 	.word	0x20000768

08009e5c <_fstat_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d07      	ldr	r5, [pc, #28]	; (8009e7c <_fstat_r+0x20>)
 8009e60:	2300      	movs	r3, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	f7f9 fa98 	bl	800339e <_fstat>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d102      	bne.n	8009e78 <_fstat_r+0x1c>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b103      	cbz	r3, 8009e78 <_fstat_r+0x1c>
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000768 	.word	0x20000768

08009e80 <_isatty_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_isatty_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f9 fa97 	bl	80033be <_isatty>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_isatty_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_isatty_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20000768 	.word	0x20000768

08009ea0 <_lseek_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_lseek_r+0x20>)
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	602a      	str	r2, [r5, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f7f9 fa90 	bl	80033d4 <_lseek>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_lseek_r+0x1e>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_lseek_r+0x1e>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000768 	.word	0x20000768

08009ec4 <_read_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_read_r+0x20>)
 8009ec8:	4604      	mov	r4, r0
 8009eca:	4608      	mov	r0, r1
 8009ecc:	4611      	mov	r1, r2
 8009ece:	2200      	movs	r2, #0
 8009ed0:	602a      	str	r2, [r5, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f7f9 fa1e 	bl	8003314 <_read>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_read_r+0x1e>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_read_r+0x1e>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20000768 	.word	0x20000768

08009ee8 <_init>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	bf00      	nop
 8009eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eee:	bc08      	pop	{r3}
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	4770      	bx	lr

08009ef4 <_fini>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr
